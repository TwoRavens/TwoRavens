syntax = "proto3";
option go_package = "pipeline";

import "google/protobuf/descriptor.proto";

// Top level classification of the problem.
enum TaskType {
    // Default value. Not to be used.
    TASK_TYPE_UNDEFINED = 0;

    CLASSIFICATION = 1;
    REGRESSION = 2;
    CLUSTERING = 3;
    LINK_PREDICTION = 4;
    VERTEX_NOMINATION = 5;
    COMMUNITY_DETECTION = 6;
    GRAPH_CLUSTERING = 7;
    GRAPH_MATCHING = 8;
    TIME_SERIES_FORECASTING = 9;
    COLLABORATIVE_FILTERING = 10;
}

// Secondary classification of the problem.
enum TaskSubtype {
    // Default value. Not to be used.
    TASK_SUBTYPE_UNDEFINED = 0;

    // No secondary task is applicable for this problem.
    NONE = 1;
    BINARY = 2;
    MULTICLASS = 3;
    MULTILABEL = 4;
    UNIVARIATE = 5;
    MULTIVARIATE = 6;
    OVERLAPPING = 7;
    NONOVERLAPPING = 8;
}

// The evaluation metric for any potential solution.
enum PerformanceMetric {
    // Default value. Not to be used.
    METRIC_UNDEFINED = 0;

    // The following are the only evaluation methods required
    // to be supported for the ScoreSolution call.
    ACCURACY = 1;
    F1 = 2;
    F1_MICRO = 3;
    F1_MACRO = 4;
    ROC_AUC = 5;
    ROC_AUC_MICRO = 6;
    ROC_AUC_MACRO = 7;
    MEAN_SQUARED_ERROR = 8;
    ROOT_MEAN_SQUARED_ERROR = 9;
    ROOT_MEAN_SQUARED_ERROR_AVG = 10;
    MEAN_ABSOLUTE_ERROR = 11;
    R_SQUARED = 12;
    NORMALIZED_MUTUAL_INFORMATION = 13;
    JACCARD_SIMILARITY_SCORE = 14;
    PRECISION_AT_TOP_K = 15;

    // The rest are defined to allow expressing internal evaluation
    // scores used by TA2 during pipeline search. If any you are using
    // is missing, feel free to request it to be added.
    // Average loss of an unspecified loss function.
    LOSS = 100;
}

message ProblemPerformanceMetric {
    PerformanceMetric metric = 1;
    // Additional params used by some metrics.
    int32 k = 2;
    string pos_label = 3;
}

message Problem {
    // ID of this problem.
    string id = 1;
    // Version of this problem.
    string version = 2;
    string name = 3;
    string description = 4;
    TaskType task_type = 5;
    TaskSubtype task_subtype = 6;
    repeated ProblemPerformanceMetric performance_metrics = 7;
}

message ProblemTarget {
    int32 target_index = 1;
    string resource_id = 2;
    int32 column_index = 3;
    string column_name = 4;
}

message ProblemInput {
    // Should match one of input datasets given to the pipeline search.
    // Every "Dataset" object has an "id" associated with it and is available
    // in its metadata. That ID is then used here to reference those inputs.
    string dataset_id = 1;
    // Targets should resolve to columns in a given dataset.
    repeated ProblemTarget targets = 2;
}

// Problem description matches the parsed problem description by
// the d3m_metadata.problem.parse_problem_description Python method.
// Problem outputs are not necessary for the purpose of this API
// and are needed only when executing an exported pipeline, but then
// TA2 gets full problem description anyway directly.
message ProblemDescription {
    Problem problem = 1;
    repeated ProblemInput inputs = 2;
}
