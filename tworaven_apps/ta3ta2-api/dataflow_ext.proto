syntax = "proto3";
option go_package = "pipeline";

import "core.proto";

// This optional service allows a TA2 system to expose the internal of the
// computation underlying a machine learning pipeline as a dataflow.
// In the dataflow model, computation is encapsulated in "modules", that each
// have named inputs and outputs, and "connections" which connect a single
// output from a module to an input of another module.
// Constant values can also be set on input ports (sometimes referred to as
// "parameters").

// This is a reference to a specific machine learning pipeline, created by the
// core API.
message PipelineReference {
    SessionContext context = 1;
    string pipeline_id = 2;
}

// This message describes a dataflow's structure. Note that this only has the
// structure of the dataflow as it will be run, no runtime information or
// result is included in this message.
//
// The description is supposed to represent the training process, if different
// representations of the pipeline are available for training and testing.
// There is currently no way of getting a description of the testing pipeline,
// though that may be added in the future.
message DataflowDescription {
    // An input port of a module. It has a name, a type, and an optional
    // constant value (if it doesn't come from a connection).
    message Input {
        string name = 1;
        string type = 2;
        string value = 3;
    }

    // An output port of a module. Has a name and a type.
    message Output {
        string name = 1;
        string type = 2;
    }

    // A module, that represents a unit of computation. It has an opaque id
    // unique in the dataflow, a type that references the computation that it
    // performs, a human-readable label for display, and inputs and outputs.
    message Module {
        string id = 1;
        string type = 2;
        string label = 3;
        repeated Input inputs = 4;
        repeated Output outputs = 5;
    }

    // A connection, through which data is passed down between modules.
    message Connection {
        string from_module_id = 1;
        string from_output_name = 2;
        string to_module_id = 3;
        string to_input_name = 4;
    }

    Response response_info = 4;
    string pipeline_id = 1;
    repeated Module modules = 2;
    repeated Connection connections = 3;
}

// A value outputted by a module.
// Not all output values from a module need to be sent here, only the ones that
// you intend TA3 to display.
// Because a Module can have multiple Output ports, this part of the
// ModuleResult message can be repeated.
message ModuleOutput {
    string output_name = 1;
    string value = 2;
}

// This describes the status of a module's execution.
// You can get multiple ModuleResult message for the same module. The status and
// progress replace the previous values for this module, and the output_value
// replaces the previous value for that port of that module.
message ModuleResult {
    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        RUNNING = 2;
        DONE = 3;
        ERROR = 4;
    }

    Response response_info = 6; // status of the overall execution
    string module_id = 1; // required if response_info is not an error
    Status status = 2; // status of the specific module
    float progress = 3; // progress of this module, between 0.0 and 1.0
    repeated ModuleOutput outputs = 4;
    float execution_time = 5; // if DONE or ERROR, time this module took, in seconds
}

// Optional dataflow service, through which a TA2 system can expose the
// internals of computations outlining a machine learning pipeline.
service DataflowExt {
    // Get a description of the training process as a dataflow.
    rpc DescribeDataflow(PipelineReference) returns (DataflowDescription) {}
    // Get the results of each module making up the dataflow, for the most
    // recent training run.
    rpc GetDataflowResults(PipelineReference) returns (stream ModuleResult) {}
}
