sqrt(2*log(1/10^-6) )
sqrt(log(1/10^-6) )
sqrt(log(1/10^-5) )
sqrt(log(1/10^-4) )
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
a<-rlap(n=10000)#
#
rho <- mean(abs(a)^3)
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)
rho
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)
rho
length(a)
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-30#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	b[i,1]<-mean(a)#
}
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-30#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}
plot(history[,1])
hist(history[,1])
qqnorm(history[,1])
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-30#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])
help(ks.test)
ks.test(x=history[,1], y="pnorm")
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-30#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])#
ks.test(x=history[,1], y="pnorm")
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-3#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])#
ks.test(x=history[,1], y="pnorm")
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-1#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])#
ks.test(x=history[,1], y="pnorm")
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-30#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])#
ks.test(x=history[,1], y="pnorm")
x <- rnorm(50)#
y <- runif(30)#
# Do x and y come from the same distribution?#
ks.test(x, y)
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-30#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])#
#
shapiro.test(history[,1])
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-2#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])#
#
shapiro.test(history[,1])
rlap = function(mu=0, b=1, size=1) {#
    p <- runif(size) - 0.5#
    draws <- mu - b * sgn(p) * log(1 - 2 * abs(p))#
    return(draws)#
}#
#
sgn <- function(x) {#
    return(ifelse(x < 0, -1, 1))#
}#
a<-rlap(size=10000)#
#
rho <- mean(abs(a)^3)#
#
k<-5#
n.sim<-500#
history<-matrix(NA,nrow=n.sim,ncol=2)#
for(i in 1:500){#
#
	a<-rlap(size=k)#
	history[i,1]<-mean(a)#
}#
#
qqnorm(history[,1])#
#
shapiro.test(history[,1])
a<-1:1000
b<-sqrt(a)
b<-sqrt(a)*.1
c<-sqrt(a)*.1 + a*.01
plot(b,c)
help(plot)
l <- seq(from=-1, to=-10, length=30)#
#
a <- 10^l#
#
f<- log(1.25/a)#
#
plot(a, f, type="l", log="x")
l <- seq(from=-1, to=-10, length=30)#
#
a <- 10^l#
#
f<- log(1.25/a)#
#
plot(a, f, type="l", log="x", xlim=c(max(a),min(a))  )
log(1.25/(10^-6))
install.packages("latex2exp")
require(latex2exp)#
l <- seq(from=-1, to=-10, length=30)#
#
a <- 10^l#
#
f<- log(1.25/a)#
#
plot(a, f, type="l", log="x", xlim=c(max(a),min(a)) , xlab=TeX('$\\delta$'), ylab=TeX('$\\mu$') )
lplot(a, f, type="l", log="x", xlim=c(max(a),min(a)) , xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') )
plot(a, f, type="l", log="x", xlim=c(max(a),min(a)) , xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') )
dev.copy2pdf(file="cfactor.pdf")
l <- seq(from=-1, to=-10, length=30)#
#
a <- 10^l#
#
f1<- log(1.25/a)#
f2<- log(1.25/a)#
#
plot(a, f1, type="l", log="x", xlim=c(max(a),min(a)) , xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') , col="red")#
par(new=TRUE)#
plot(a, f2, type="l", log="x", xlim=c(max(a),min(a)) , xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') , col="blue")#
dev.copy2pdf(file="cfactor.pdf")
l <- seq(from=-1, to=-10, length=30)#
#
a <- 10^l#
#
f1<- log(1.25/a)#
f2<- log(1/a)#
#
plot(a, f1, type="l", log="x", xlim=c(max(a),min(a)) , xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') , col="red")#
par(new=TRUE)#
plot(a, f2, type="l", log="x", xlim=c(max(a),min(a)) , xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') , col="blue")#
dev.copy2pdf(file="cfactor.pdf")
l <- seq(from=-1, to=-10, length=30)#
#
a <- 10^l#
#
f1<- log(1.25/a)#
f2<- log(1/a)#
#
all.xlim<-c(max(a),min(a))#
all.ylim<-c(min(c(f1,f2)),max(c(f1,f2)))#
#
plot(a, f1, type="l", log="x", xlim=all.xlim, ylim=all.ylim, xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') , col="red")#
par(new=TRUE)#
plot(a, f2, type="l", log="x", xlim=all.xlim, ylim=all.ylim, xlab=TeX('$\\delta$'), ylab=TeX('$\\ln(1.25/\\delta)$') , col="blue")#
dev.copy2pdf(file="cfactor.pdf")
1-exp(-1)
choose(10,1)
choose(10,2)
choose(10,0)
n<-1000#
p<-1/n#
a<-0:8#
b<-choose(n,a) * (p)^a * (1-p)^(n-a)#
#
plot(a,b)
a
b
1-exp(-1)
n<-100000000#
p<-1/n#
a<-0:8#
b<-choose(n,a) * (p)^a * (1-p)^(n-a)#
#
plot(a,b)
b
exp(-1)
b
b*a
sum(b*a)
a<-runif(100)
var(a)
var(2*a)
4*var(a)
3/.25 + 3/.75
3/(.25^2) + 3/(.75^2)
1-exp(-1)
(1-exp(-1))^2
25*(1-exp(-1))^2
16*(1-exp(-1))^2
99/12
6*1.3
28/.4
28/.4 -28
500*1.3
400*1.3
420*1,3
420*1.3
500*1.3
600*1.3
56350/(3*12)
139000/(3*12)
139000*.3/(12)
help(lm)
help(ols)
library(rms)
rep(6)
87 * 3 *2
3600*5
.4*1.30
.4*130
.4*130/12
(4.33*3 +1)* 1.69
282.7*4
300000000*.0004
5600*5
3600*5
42-17
.0250*8*85
.0250*8
.0250*40
.0110*8*85
7.48*30
17*20
17*10
7.48*20
8*1.075^40
8*1.075^15
help(read)
help(read.table)
1028/4
494/2
5366.92*4
727.83*4
3507.36 * 4
64090/62527
128.8*1.025
3600*2*.025
1700 + 250 + 2400 + 250
13222/21467
makeSet <- function(distance, k) {#
    # permute the output to ensure that bins have#
    # equal probability of receiving noise, especially#
    # needed at small distances#
    out <- c()#
    n <- distance#
    j <- 1#
    while (j < k) {#
        draw <- sample(0:n, size=1)#
        out <- c(out, draw)#
        n <- n - draw#
        j <- j + 1#
    }#
    out <- c(out, distance - sum(out))#
    out <- sample(out)  # permute#
    return(out)#
}#
findSetRandom <- function(distance, k, n_sets) { #
    vecs <- t(replicate(n_sets, makeSet(distance, k)))#
    return(vecs)#
} #
pTruncated <- function(distances, epsilon){#
    p <- exp(-1 * distances * epsilon / 2)#
    p <- p / sum(p)#
    return(p)#
}#
#' @param vec histogram, k-vector with counts#
#' @param distance sampled L1 distance#
#' @return histogram at given distance#
#' #
#' @examples#
#' histogram <- c(15, 25, 10) #
#' distance <- 4#
#' release(histogram, 4)#
#
release <- function(vec, n, epsilon) { #
    k <- length(vec)#
    distances <- seq(from=2, to=n, by=2)#
    distance <- sample(distances, size=1, prob=pTruncated(distances, epsilon))#
    l1_nsphere_subset <- findSetRandom(distance, k, 100)#
    release = rep(0, k)#
    while (sum(release) != sum(vec)) { #
        idx <- sample(1:nrow(l1_nsphere_subset), size=1)#
        sgn <- sample(c(-1, 1), size=k, replace=TRUE)#
        release <- vec - (l1_nsphere_subset[idx, ] * sgn)#
    } #
    return(release)#
} #
if (interactive()) {#
    n_sims <- 1000#
    k <- 42#
    histogram <- sample(53:8359, size=k, replace=TRUE)#
    n <- sum(histogram)#
    epsilon <- 0.1#
#
    mses <- c()#
    for (i in 1:n_sims) {#
        out <- release(histogram, n, epsilon)#
        mse <- sum((histogram - out)^2) / k#
        mses <- c(mses, mse)#
    }#
}
mses
log(2)
log(10)
log_10(10)
help(log)
log10(2)
log10(2)/log10(1)
log10(3)/log10(2)
128*1.015
128.18*1.015
128.8/128.18
64.4/64.09
64.09/62.527
128.8 * 1.015
128.8 * 0.015
128.8 * 0.015/12
87/2000000
72 * 12 / 72
27*12/20.75
72*12/20.75
72*12/41
72*12/41.5
72*12/48
72*12/56
2198/56
2198/48
2198/72
help(optim)
help(nlm)
help(optim)
exp(-2)
exp(-4)
exp(-5)
library(tools)
help(tools:::startHTTPD)
tools:::startHTTPD
help(tools)
install.packages("tools")
library(help = "tools")
tools::doesnotexist
library(tools)
tools:::startHTTPD
help(.Call)
.Call(startHTTPD, "0.0.0.0", 8000)
.Call(tools:::startHTTPD, "0.0.0.0", 8000)
help("tools")
library(help = "tools")
tools:::startHTTPD
tools:::startHTTPD$numParameters
tools:::startHTTPD[1]
tools:::startHTTPD[[1]]
tools:::startHTTPD[[2]]
tools:::startHTTPD[[3]]
tools:::startHTTPD[3]
tools:::startHTTPD$dll
ls(getNamespace("tools"), all.names=TRUE)
11/12
9900/3
9900/6
200*6
90*4
36222 + 29737*2
36222 + 29737*2 + 21550*2
500*.75
500 + .75*450
500 + .75*450 - 250
138796 + 11766
100/120
.833*3
250-150
100*.833
120*4.333
120*4.5
120*4.333
250-158
92/120
(92/120) * 3
.75*250
187-150
37/120
250-158
92/120
92/125
.736*90
125*4
125*4.3
setwd("/Users/tercer/scratch/products/d3m/seed_datasets/o_196/data")
dir()
testData<-read.csv("testData.csv")#
trainData<-read.csv("trainData.csv")#
trainTargets<-read.csv("trainTargets.csv")
dim(testData)
dim(trainData)
dim(trainTargets)
names(trainTargets)
names(testData)
name(trainData)
names(trainData)
summary(trainData$d3mIndex)
summary(testData$d3mIndex)
(testData$d3mIndex)
(trainData$d3mIndex)
trainData$d3mIndex[1:5,]
trainData[1:5,]
testData[1:5,]
trainTargets
128806/128180
128806*.015
ls
ls()
getwd()
dir()
source("show.R")
ls()
help("read.csv")
json5<-preprocess(testdata=trainData)#
write(json5,file="trainData2R.txt")
config=jsonlite::fromJSON("config.json")
help(fromJSON)
source("show.R")
source("show.R")
ls
json5
names(trainTargets)
names(trainData)
source("show.R")
source("show.R")
help(write.csv)
help(write.csv)
source("show.R")
help(write.csv)
source("show.R")
source("show.R")
source("show.R")
