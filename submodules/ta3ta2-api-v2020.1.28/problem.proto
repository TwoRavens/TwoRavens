syntax = "proto3";
option go_package = "pipeline";

// Task keyword of the problem.
enum TaskKeyword {
    // Default value. Not to be used.
    TASK_KEYWORD_UNDEFINED = 0;

    CLASSIFICATION = 1;
    REGRESSION = 2;
    CLUSTERING = 3;
    LINK_PREDICTION = 4;
    VERTEX_NOMINATION = 5;
    VERTEX_CLASSIFICATION = 6;
    COMMUNITY_DETECTION = 7;
    GRAPH_MATCHING = 8;
    FORECASTING = 9;
    COLLABORATIVE_FILTERING = 10;
    OBJECT_DETECTION = 11;
    SEMISUPERVISED = 12;
    BINARY = 13;
    MULTICLASS = 14;
    MULTILABEL = 15;
    UNIVARIATE = 16;
    MULTIVARIATE = 17;
    OVERLAPPING = 18;
    NONOVERLAPPING = 19;
    TABULAR = 20;
    RELATIONAL = 21;
    IMAGE = 22;
    AUDIO = 23;
    VIDEO = 24;
    SPEECH = 25;
    TEXT = 26;
    GRAPH = 27;
    MULTIGRAPH = 28;
    TIME_SERIES = 29;
    GROUPED = 30;
    GEOSPATIAL = 31;
    REMOTE_SENSING = 32;
    LUPI = 33;
    MISSING_METADATA = 34;
}

// The evaluation metric for any potential solution.
enum PerformanceMetric {
    // Default value. Not to be used.
    METRIC_UNDEFINED = 0;

    // The following are the only evaluation methods required
    // to be supported for the ScoreSolution call.
    ACCURACY = 1;
    PRECISION = 2;
    RECALL = 3;
    F1 = 4;
    F1_MICRO = 5;
    F1_MACRO = 6;
    ROC_AUC = 7;
    ROC_AUC_MICRO = 8;
    ROC_AUC_MACRO = 9;
    MEAN_SQUARED_ERROR = 10;
    ROOT_MEAN_SQUARED_ERROR = 11;
    MEAN_ABSOLUTE_ERROR = 12;
    R_SQUARED = 13;
    NORMALIZED_MUTUAL_INFORMATION = 14;
    JACCARD_SIMILARITY_SCORE = 15;
    PRECISION_AT_TOP_K = 17;
    OBJECT_DETECTION_AVERAGE_PRECISION = 18;
    HAMMING_LOSS = 19;

    // This metric can be used to ask TA2 to rank a solution as part of
    // all found solutions of a given "SearchSolutions" call. Rank is a
    // floating-point number. Lower numbers represent better solutions.
    // Presently evaluation requirements are that ranks should be non-negative
    // and that each ranked pipeline have a different rank (for all
    // solutions of a given SearchSolutions call). Only possible with
    // "RANKING" evaluation method.
    RANK = 99;

    // The rest are defined to allow expressing internal evaluation
    // scores used by TA2 during pipeline search. If any you are using
    // is missing, feel free to request it to be added.
    // Average loss of an unspecified loss function.
    LOSS = 100;
}

message ProblemPerformanceMetric {
    PerformanceMetric metric = 1;
    // Additional params used by some metrics.
    int32 k = 2;
    string pos_label = 3;
}

message Problem {
    repeated TaskKeyword task_keywords = 8;
    repeated ProblemPerformanceMetric performance_metrics = 7;
}

message ProblemTarget {
    int32 target_index = 1;
    string resource_id = 2;
    int32 column_index = 3;
    string column_name = 4;
    int32 clusters_number = 5;
}

message ProblemPrivilegedData {
    int32 privileged_data_index = 1;
    string resource_id = 2;
    int32 column_index = 3;
    string column_name = 4;
}

message ForecastingHorizon {
    string resource_id = 1;
    int32 column_index = 2;
    string column_name = 3;
    double horizon_value = 4;
}

message ProblemInput {
    // Should match one of input datasets given to the pipeline search.
    // Every "Dataset" object has an "id" associated with it and is available
    // in its metadata. That ID is then used here to reference those inputs.
    string dataset_id = 1;
    // Targets should resolve to columns in a given dataset.
    repeated ProblemTarget targets = 2;
    // A list of privileged data columns related to unavailable attributes during testing.
    // These columns do not have data available in the test split of a dataset.
    repeated ProblemPrivilegedData privileged_data = 3;
    ForecastingHorizon forecasting_horizon = 4;
}

message DataAugmentation {
    repeated string domain = 1;
    repeated string keywords = 2;
}

// Problem description matches the parsed problem description by
// the d3m_metadata.problem.parse_problem_description Python method.
// Problem outputs are not necessary for the purpose of this API
// and are needed only when executing an exported pipeline, but then
// TA2 gets full problem description anyway directly.
message ProblemDescription {
    Problem problem = 1;
    repeated ProblemInput inputs = 2;
    // ID of this problem. Required.
    string id = 3;
    // Version of this problem.
    string version = 4;
    string name = 5;
    string description = 6;
    string digest = 7;
    repeated DataAugmentation data_augmentation = 8;
    repeated string other_names = 9;
}
