syntax = "proto3";
option go_package = "pipeline";

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";

import "pipeline.proto";
import "primitive.proto";
import "problem.proto";
import "value.proto";

extend google.protobuf.FileOptions {
    // 54100 is from the range reserved for internal use within individual organizations.
    // If we make this protocol public, we should obtain globally unique field number from Google.
    string protocol_version = 54100;
}

// Date-based version string. Use this to populate version field in "SearchSolutionsRequest"
// and "SearchSolutionsResponse" messages.
option (protocol_version) = "2019.1.22";

enum EvaluationMethod {
    // Default value. Not to be used.
    EVALUATION_METHOD_UNDEFINED = 0;

    // The following are the only evaluation methods required
    // to be supported for the "ScoreSolution" call.
    HOLDOUT = 1;
    K_FOLD = 2;

    // The rest are defined to allow expressing internal evaluation
    // methods used by TA2 during solution search. If any method being used
    // is missing, feel free to request it to be added.
    LEAVE_ONE_OUT = 100;
    // Instead of really scoring, a TA2 might predict the score only.
    PREDICTION = 101;
    // Training data is reused to test as well.
    TRAINING_DATA = 102;
}

message ScoringConfiguration {
    // The evaluation method to use.
    EvaluationMethod method = 1;
    // Number of folds made, if applicable.
    int32 folds = 2;
    // If applicable, the ratio between the train and test data and represents the proportion of
    // the input data to include in the train split. The rest is included in the test split.
    // E.g., "train_test_ratio == 0.8" would mean that 80% of the whole data becomes the train split
    // and 20% of the whole data becomes the test split.
    double train_test_ratio = 3;
    // Shuffle data? Set to true if employed.
    bool shuffle = 4;
    // Value for random seed to use for shuffling. Optional.
    int32 random_seed = 5;
    // Do stratified k-fold? Set to true if employed.
    bool stratified = 6;
}

message Score {
    ProblemPerformanceMetric metric = 1;
    // When doing multiple folds, which fold is this score associated with, 0-based.
    // We do not aggregate scores across folds on the TA2 side, but expose everything to the TA3.
    // If scoring was not done as part of the cross-validation, then it can be returned
    // as the first and only fold, in which case the value of this field should be 0.
    int32 fold = 2;
    // To which target or targets does this score apply?
    repeated ProblemTarget targets = 3;
    Value value = 4;
    // ID of the dataset which contain the targets for this score.
    string dataset_id = 5;
}

enum ProgressState {
    // Default value. Not to be used.
    PROGRESS_UNKNOWN = 0;

    // The process has been scheduled but is pending execution.
    PENDING = 1;
    // The process is currently running. There can be multiple messages with this state
    // (while the process is running).
    RUNNING = 2;
    // The process completed and final results are available.
    COMPLETED = 3;
    // The process failed.
    ERRORED = 4;
}

// After "state" becomes "COMPLETED" or "ERRORED" stream closes.
// The granularity of progress updates is not specified by the API at this time. Some systems
// might be updating frequently and provide many updates of the progress of a whole process
// as well as individual pipeline steps. Some systems might just report these high-level
// progress states once, not doing any progress updates in the meantime.  The "status" field
// should contain information to supplement the progress state, such as specific failure details
// in the case of an "ERRORED" state being returned.
message Progress {
    ProgressState state = 1;
    string status = 2;
    // Set only after state becomes "RUNNING". If it never really properly runs, but errors
    // when attempted to run, then it should be the timestamp of the error.
    google.protobuf.Timestamp start = 3;
    // Set only when state is "COMPLETED" or "ERRORED".
    google.protobuf.Timestamp end = 4;
}

// Updates problem with new description. This also updates the problem description for all
// ongoing solution searches associated with this problem. Internal behavior of TA2
// is unspecified: it can simply start a new search using new problem description, or
// it can start modifying solutions it has already found to new problem description, or
// it can use it to further help narrow down ongoing solution searches. In any case, after
// this call returns, all reported solutions for searches associated with this problem
// should be for the updated problem description.
message UpdateProblemRequest {
    string search_id = 1;
    // New problem description. It has to be provided in full and it replaces existing
    // problem description.
    ProblemDescription problem = 2;
}

message UpdateProblemResponse {}

// Starts a new solution search. Found solutions have not necessary been fitted on the provided
// inputs. Problem description and inputs are used only to help guide the search process.
// Consider any found solutions to be just a static description of solutions at this stage.
// Multiple parallel solution searches can happen at the same time.
message SearchSolutionsRequest {
    // Some string identifying the name and version of the TA3 system.
    string user_agent = 1;
    // Shall be set to "protocol_version" above.
    string version = 2;
    // Desired upper limit of time for solution search, expressed in minutes.
    // Is suggestion, and TA2's should attempt to obey, but TA3's should realize may be
    // violated. Default value of 0 (and any negative number) signifies no time bound.
    double time_bound = 3;
    // Value stating the priority of the search. If multiple searches are queued then highest
    // priority (largest number) should be started next by TA2. Primarily used to sort any
    // queue, but no further guarantee that TA2 can give more resources to high priority
    // searches. If unspecified, by default search will have priority 0. Negative numbers have
    // still lower priority.
    double priority = 4;
    // Which value types can a TA2 system use to communicate values to a TA3 system?
    // The order is important as a TA2 system will try value types in order until one works out,
    // or an error will be returned instead of the value.
    repeated ValueType allowed_value_types = 5;
    // Problem description to use for the solution search. Problem description is optional
    // with fully specified pipelines which TA3 provides. If still provided, TA2 should use
    // it to set semantic types on target columns and any other use of a problem description
    // for the needs of running a pipeline.
    ProblemDescription problem = 6;
    // A pipeline template to use for search or to execute. If template is omitted, then a
    // regular solution search is done. If template consists only of one placeholder step,
    // then a regular solution search is done to replace that step. If there is no placeholder
    // step, but template describes a full pipeline with free hyper-parameters, then this
    // call becomes a hyper-paramater tuning call over free hyper-paramaters and found solutions
    // share the same pipeline, but different hyper-parameter configurations. If there is no
    // placeholder step and all hyper-parameters are fixed as part of the pipeline, then this
    // call only checks the given template and returns the solution with same pipeline back, to
    // be executed. This allows fixed computations to be done on data, for example, pipeline can
    // consist of only one primitive with fixed hyper-parameters to execute that one primitive.
    // Moreover, such fully specified pipelines with fixed hyper-parametres can have any
    // inputs and any outputs. Otherwise pipelines have to be from a Dataset container value
    // to predictions Pandas dataframe. While there are all these options possible, only a
    // subset has to be supported by all systems. See README for more details.
    PipelineDescription template = 7;
    // Pipeline inputs used during solution search. They have to point to Dataset container
    // values. Order matters as each input is mapped to a template's input in order. Optional
    // for templates without a placeholder and with all hyper-parameters fixed.
    repeated Value inputs = 8;
}

// Call returns immediately with the ID. Use "GetFoundSolutions" call to get results.
message SearchSolutionsResponse {
    // An ID identifying this solution search. This string should be at least 22 characters
    // long to ensure enough entropy to not be guessable.
    string search_id = 1;
}

// Ends the search and releases all resources associated with the solution search.
// If the call is made in parallel with a running search and results are being streamed,
// the search is stopped and the "GetSearchSolutionsResults" stream is closed by TA2
// (as happens when the search is concluded on its own, or when a search is stopped
// by "StopSearchSolutions"). Found solution IDs during the search are no longer valid
// after this call.
message EndSearchSolutionsRequest {
    string search_id = 1;
}

message EndSearchSolutionsResponse {}

// Stops the search but leaves all currently found solutions available.
// If the call is made in parallel with a running search and results are being streamed,
// the "GetSearchSolutionsResults" stream is closed by the TA2 (as happens when the search
// is concluded on its own). Search cannot be re-started after it has been stopped.
message StopSearchSolutionsRequest {
    string search_id = 1;
}

message StopSearchSolutionsResponse {}

// Description of a TA2 score done during solution search. Because there is a wide range of
// potential approaches a TA2 can use to score candidate solutions this might not capture what
//  your TA2 is doing. Feel free to request additions to be able to describe your approach.
message SolutionSearchScore {
    ScoringConfiguration scoring_configuration = 1;
    repeated Score scores = 2;
}

// Get all solutions presently identified by the search and start receiving any
// further solutions also found as well.
message GetSearchSolutionsResultsRequest {
    string search_id = 1;
}

message GetSearchSolutionsResultsResponse {
    // Overall process progress, not progress per solution. While solutions are being found and
    // returned, or scores computed and updated, progress state should be kept at "RUNNING".
    Progress progress = 1;
    // A measure of progress during search. It can be any number of internal steps or
    // actions a TA2 is doing during search. It can be even number of how many candidate
    // solutions were already examined. It does not even have to be an integer.
    // How regularly a change to this number is reported to TA3 is left to TA2's discretion,
    // but a rule of thumb is at least once a minute if the number changes.
    double done_ticks = 2;
    // If TA2 knows how many internal steps or actions are there, it can set this field.
    // This can also be updated through time if more (or even less) internal steps or
    // actions are determined to be necessary. If this value is non-zero, then it should
    // always hold that "done_ticks" <= "all_ticks".
    double all_ticks = 3;
    string solution_id = 4;
    // Internal score for this solution between 0.0 and 1.0 where 1.0 is the highest score.
    // There is no other meaning to this score and it does not necessary depend on scores
    // listed in the problem description. Optional.
    // Because this field is optional, if omitted the default value will be 0. But 0 is a
    // valid value for this field. Because of that you should never omit the field.
    // If you do not have internal score to provide, use NaN for the value of this field
    // to signal that. When solution cannot be scored (i.e., the fully specified pipeline
    // used as a template is not a standard pipeline) internal score does not have to be
    // provided.
    double internal_score = 5;
    // TA2 might be able to provide more meaningful scores as well, depending on its
    // approach to solution search. Moreover, even the same TA2 might not use the same scoring
    // approach for all of its solutions. Optional. When solution cannot be scored (i.e., the
    // fully specified pipeline used as a template is not a standard pipeline) score does
    // not have to be provided.
    repeated SolutionSearchScore scores = 6;
}

// Request a detailed description of the found solution.
message DescribeSolutionRequest {
    string solution_id = 1;
}

message PrimitiveStepDescription {
    // Selected value for free pipeline hyper-parameters.
    map<string, Value> hyperparams = 1;
}

message SubpipelineStepDescription {
    // Each step in a sub-pipeline has a description. These are reported in the order of steps
    // in the sub-pipeline.
    repeated StepDescription steps = 1;
}

message StepDescription {
    oneof step {
        PrimitiveStepDescription primitive = 1;
        SubpipelineStepDescription pipeline = 2;
    }
}

message DescribeSolutionResponse {
    // A pipeline description. Nested pipelines should be fully described as well.
    PipelineDescription pipeline = 1;
    // Each step in a pipeline has description. These are reported in the order of steps in
    // the pipeline.
    repeated StepDescription steps = 2;
}

message StepProgress {
    Progress progress = 1;
    // If step is a sub-pipeline, then this list contains progress for each step in the
    // sub-pipeline, in order.
    // List can be incomplete while the process is in progress. Systems can provide
    // steps only at the end (when "progress" equals COMPLETED) and not during running.
    repeated StepProgress steps = 2;
}

// User associated with the run of the solution.
message SolutionRunUser {
    // A UUID of the user. It does not have to map to any real ID, just that it is possible
    // to connect multiple solution actions by the same user together, if necessary.
    string id = 1;
    // Was this run because solution was chosen by this user.
    bool chosen = 2;
    // Textual reason provided by the user why the run was chosen by this user.
    string reason = 3;
}

// Request solution to be scored given inputs. Inputs have to be Dataset container values
// and pipeline outputs have to be predictions. It can internally run multiple fit + produce
// runs of the pipeline on permutations of inputs data (e.g., for cross-validation). This is
// also why we cannot expose outputs here. When solution cannot be scored (i.e., the fully
// specified pipeline used as a template is not a standard pipeline), this call does
// not have to be supported.
message ScoreSolutionRequest {
    string solution_id = 1;
    repeated Value inputs = 2;
    repeated ProblemPerformanceMetric performance_metrics = 3;
    // Any users associated with this call itself. Optional.
    repeated SolutionRunUser users = 4;
    ScoringConfiguration configuration = 5;
}

message ScoreSolutionResponse {
    string request_id = 1;
}

// Get all score results computed until now and start receiving any
// new score results computed as well.
message GetScoreSolutionResultsRequest {
    string request_id = 1;
}

message GetScoreSolutionResultsResponse {
    // Overall process progress.
    Progress progress = 1;
    // List of score results. List can be incomplete while the process is in progress.
    repeated Score scores = 2;
}

// Fit the solution on given inputs. If a solution is already fitted on inputs this is a NOOP
// (if no additional outputs should be exposed). This can happen when a TA2 simultaneously
// fits the solution as part of the solution search phase.
message FitSolutionRequest {
    string solution_id = 1;
    repeated Value inputs = 2;
    // List of data references of step outputs which should be exposed to the TA3 system.
    // If you want to expose outputs of the whole pipeline (e.g., predictions themselves),
    // list them here as well. These can be recursive data references like
    // "steps.1.steps.4.produce" to point to an output inside a sub-pipeline.
    // Systems only have to support exposing final outputs and can return "ValueError" for
    // intermediate values.
    repeated string expose_outputs = 3;
    // Which value types should be used for exposing outputs. If not provided, the allowed
    // value types list from the search solutions call is used instead.
    // The order is important as TA2 system will try value types in order until one works out,
    // or an error will be returned instead of the value. An error exposing a value does not
    // stop the overall process.
    repeated ValueType expose_value_types = 4;
    // Any users associated with this call itself. Optional.
    repeated SolutionRunUser users = 5;
}

message FitSolutionResponse {
    string request_id = 1;
}

// Get the latest state of fitting the solution and start receiving any further
// new updates to the state as well.
message GetFitSolutionResultsRequest {
    string request_id = 1;
}

message GetFitSolutionResultsResponse {
    // Overall process progress.
    Progress progress = 1;
    // The list contains progress for each step in the pipeline, in order.
    // List can be incomplete while the process is in progress. Systems can provide
    // steps only at the end (when "progress" equals COMPLETED) and not during running.
    repeated StepProgress steps = 2;
    // A mapping between data references of step outputs and values.
    map<string, Value> exposed_outputs = 3;
    // The fitted solution ID, once progress = COMPLETED.
    string fitted_solution_id = 4;
}

// Produce (execute) the solution on given inputs. A solution has to have been fitted for this
// to be possible (even if in cases where this is just created by transformations).
message ProduceSolutionRequest {
    string fitted_solution_id = 1;
    repeated Value inputs = 2;
    // List of data references of step outputs which should be exposed to the TA3 system.
    // If you want to expose outputs of the whole pipeline (e.g., predictions themselves),
    // list them here as well. These can be recursive data references like
    // "steps.1.steps.4.produce" to point to an output inside a sub-pipeline.
    // Systems only have to support exposing final outputs and can return "ValueError" for
    // intermediate values.
    repeated string expose_outputs = 3;
    // Which value types should be used for exposing outputs. If not provided, the allowed
    // value types list from the search solutions call is used instead.
    // The order is important as the TA2 system will try value types in order until one works
    // out, or an error will be returned instead of the value. An error exposing a value does
    // not stop the overall process.
    repeated ValueType expose_value_types = 4;
    // Any users associated with this call itself. Optional.
    repeated SolutionRunUser users = 5;
}

message ProduceSolutionResponse {
    string request_id = 1;
}

// Get the latest state of producing the fitted solution and start receiving any further
// new updates to the state as well.
message GetProduceSolutionResultsRequest {
    string request_id = 1;
}

message GetProduceSolutionResultsResponse {
    // Overall process progress.
    Progress progress = 1;
    // The list contains progress for each step in the pipeline, in order.
    // List can be incomplete while the process is in progress. Systems can provide
    // steps only at the end (when "progress" equals COMPLETED) and not during running.
    repeated StepProgress steps = 2;
    // A mapping between data references of step outputs and values.
    map<string, Value> exposed_outputs = 3;
}

// Exports a solution for evaluation purposes based on NIST specifications.
message SolutionExportRequest {
    // Found solution to export.
    string fitted_solution_id = 1;
    // Solution rank to be used for the exported solution. Lower numbers represent
    // better solutions. Presently NIST requirements are that ranks should be non-negative
    // and that each exported pipeline have a different rank. TA3 should make sure not to repeat ranks.
    // Filenames of exported files are left to be chosen by the TA2 system.
    double rank = 2;
}

message SolutionExportResponse {}

// Save a solution that can be loaded later. (Pipeline description/ Pipeline run) Optional.
message SaveSolutionRequest {
    // Id of solution to saved
    string solution_id = 1;
}

message SaveSolutionResponse {
    // An URI pointing to a directory containing a solution saved.
    string solution_uri = 1;
}

// Load a solution that was saved before.
message LoadSolutionRequest {
    // An URI pointing to a directory containing a solution saved.
    string solution_uri = 1;
}

message LoadSolutionResponse {
    // Id of solution which was loaded.
    string solution_id = 1;
}

// Save a fitted solution that can be loaded later. Optional.
message SaveFittedSolutionRequest {
    // Fitted solution id to saved.
    string fitted_solution_id = 1;
}

message SaveFittedSolutionResponse {
    // An URI pointing to a directory containing a fitted solution.
    string fitted_solution_uri = 1;
}

// Load a fitted solution that was saved before.
message LoadFittedSolutionRequest {
    // An URI pointing to a directory containing a fitted solution.
    string fitted_solution_uri = 1;
}

message LoadFittedSolutionResponse {
    // Fitted solution id loaded.
    string fitted_solution_id = 1;
}

// List all primitives known to TA2, their IDs, versions, names, and digests. Using this
// information a TA3 should know which primitives may be put into a pipeline template.
// To narrow down potential primitives to use a TA3 can also ask a TA2 to do a solution
// search and then observe which primitives the TA2 is using. If more metadata about primitives
// is needed, then a TA3 can use the results of this call to map primitives to metadata
// (from Python code or primitive annotations) on its own.
message ListPrimitivesRequest {}

message ListPrimitivesResponse {
    repeated Primitive primitives = 1;
}

// Identify a TA2 and get supported features.
// This call is also suitable for a ping/pong call to check that the gRPC connection to the
// TA2 is ready.
message HelloRequest {}

message HelloResponse {
    // Some string identifying the name and version of the TA2 system.
    string user_agent = 1;
    // Shall be set to "protocol_version" above.
    string version = 2;
    // List of value types that a TA3 system can use to communicate values to a TA2 system.
    // The order is important as a TA3 system should try value types in order until one works
    // out, or an error will be returned instead of the value.
    repeated ValueType allowed_value_types = 3;
    // List of API extensions that a TA2 supports.
    repeated string supported_extensions = 4;
}

// See each message's comments for information about each particular call.
service Core {
    rpc SearchSolutions (SearchSolutionsRequest) returns (SearchSolutionsResponse) {}
    rpc GetSearchSolutionsResults (GetSearchSolutionsResultsRequest) returns (stream GetSearchSolutionsResultsResponse) {}
    rpc EndSearchSolutions (EndSearchSolutionsRequest) returns (EndSearchSolutionsResponse) {}
    rpc StopSearchSolutions (StopSearchSolutionsRequest) returns (StopSearchSolutionsResponse) {}

    rpc DescribeSolution (DescribeSolutionRequest) returns (DescribeSolutionResponse) {}

    rpc ScoreSolution (ScoreSolutionRequest) returns (ScoreSolutionResponse) {}
    rpc GetScoreSolutionResults (GetScoreSolutionResultsRequest) returns (stream GetScoreSolutionResultsResponse) {}

    rpc FitSolution (FitSolutionRequest) returns (FitSolutionResponse) {}
    rpc GetFitSolutionResults (GetFitSolutionResultsRequest) returns (stream GetFitSolutionResultsResponse) {}

    rpc ProduceSolution (ProduceSolutionRequest) returns (ProduceSolutionResponse) {}
    rpc GetProduceSolutionResults (GetProduceSolutionResultsRequest) returns (stream GetProduceSolutionResultsResponse) {}

    rpc SolutionExport (SolutionExportRequest) returns (SolutionExportResponse) {}

    rpc UpdateProblem (UpdateProblemRequest) returns (UpdateProblemResponse) {}

    rpc ListPrimitives (ListPrimitivesRequest) returns (ListPrimitivesResponse) {}

    rpc Hello (HelloRequest) returns (HelloResponse) {}

    // Optional.
    rpc SaveSolution (SaveSolutionRequest) returns (SaveSolutionResponse) {}
    rpc LoadSolution (LoadSolutionRequest) returns (LoadSolutionResponse) {}

    rpc SaveFittedSolution (SaveFittedSolutionRequest) returns (SaveFittedSolutionResponse) {}
    rpc LoadFittedSolution (LoadFittedSolutionRequest) returns (LoadFittedSolutionResponse) {}
}
