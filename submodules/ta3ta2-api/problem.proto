syntax = "proto3";
option go_package = "pipeline";

message ProblemPerformanceMetric {
    // The evaluation metric. Standard values are required to be supported
    // and are available here:
    // https://metadata.datadrivendiscovery.org/devel/?definitions#definitions.performance_metric
    //
    // In addition, "RANK" metric should be also supported. "RANK" metric
    // can be used for a rank of a solution among all found solutions of
    // a given "SearchSolutions" call. Rank is a non-negative floating-point number.
    // Lower numbers represent better solutions. Each ranked solution should have
    // a different rank (for all solutions of a given "SearchSolutions" call).
    // Only possible with "RANKING" evaluation method.
    //
    // The following additional metrics are defined to allow expressing
    // internal evaluation scores used by TA2 during solution search.
    // If any you are using is missing, feel free to request it to be added.
    // * "LOSS"
    //   Average loss of an unspecified loss function.
    //
    // No standard value will ever start with "_", so if you worry about
    // potential conflicts with future standard values, consider starting
    // your non-standard values with "_'.
    string metric = 1;
    // Additional params used by some metrics.
    int32 k = 2;
    string pos_label = 3;
}

message Problem {
    // Task keywords of the problem. Standard values are required
    // to be supported and are available here:
    // https://metadata.datadrivendiscovery.org/devel/?definitions#definitions.problem.task_keywords
    //
    // No standard value will ever start with "_", so if you worry about
    // potential conflicts with future standard values, consider starting
    // your non-standard values with "_'.
    repeated string task_keywords = 8;
    repeated ProblemPerformanceMetric performance_metrics = 7;
}

message ProblemTarget {
    int32 target_index = 1;
    string resource_id = 2;
    int32 column_index = 3;
    string column_name = 4;
    int32 clusters_number = 5;
}

message ProblemPrivilegedData {
    int32 privileged_data_index = 1;
    string resource_id = 2;
    int32 column_index = 3;
    string column_name = 4;
}

message ForecastingHorizon {
    string resource_id = 1;
    int32 column_index = 2;
    string column_name = 3;
    double horizon_value = 4;
}

message ProblemInput {
    // Should match one of input datasets given to the pipeline search.
    // Every "Dataset" object has an "id" associated with it and is available
    // in its metadata. That ID is then used here to reference those inputs.
    string dataset_id = 1;
    // Targets should resolve to columns in a given dataset.
    repeated ProblemTarget targets = 2;
    // A list of privileged data columns related to unavailable attributes during testing.
    // These columns do not have data available in the test split of a dataset.
    repeated ProblemPrivilegedData privileged_data = 3;
    ForecastingHorizon forecasting_horizon = 4;
}

message DataAugmentation {
    repeated string domain = 1;
    repeated string keywords = 2;
}

// Problem description matches the parsed problem description by
// the d3m_metadata.problem.parse_problem_description Python method.
// Problem outputs are not necessary for the purpose of this API
// and are needed only when executing an exported pipeline, but then
// TA2 gets full problem description anyway directly.
message ProblemDescription {
    Problem problem = 1;
    repeated ProblemInput inputs = 2;
    // ID of this problem. Required.
    string id = 3;
    // Version of this problem.
    string version = 4;
    string name = 5;
    string description = 6;
    string digest = 7;
    repeated DataAugmentation data_augmentation = 8;
    repeated string other_names = 9;
}
