syntax = "proto3";
option go_package = "pipeline";

import "google/protobuf/descriptor.proto";

// All values are immutable and no files should be changed after a URI
// is provided to the other system. When using shared file system, all
// URIs should be absolute to the file system, for example
// "file:///datasets/dataset_1/datasetDoc.json". It is assumed that both
// TA2 and TA3 systems both have a limited number of shared directories
// mounted at same locations (in previous example, "/datasets" directory).
// When one system creates a dataset and sends over the URI, the other can
// directly access it without doing any extra work (like downloading or copying).
//
// Configuration of shared directories and shared instance of Plasma are not
// specified by this API.
//
// Not all types of non-raw values is necessary to be supported/allowed.
// Both systems maintain a list of allowed value types the other system accepts.
// Some calls also provide a way to provide such a list. When a value is to be
// provided to the other system, the list is traversed in order and the first
// value type which can be used without an error is used. If the list is
// exhausted, then an error is provided instead.

enum ValueType {
    // Default value. Not to be used.
    VALUE_TYPE_UNDEFINED = 0;

    // The following value types are those everyone should support.

    // Raw value. Not all values can be represented as a raw value.
    // The value before encoding should be at most 64 KB.
    RAW = 1;
    // Represent the value as a D3M dataset. Only "file://" schema is supported using a
    // shared file system. Dataset URI should point to the "datasetDoc.json" file of the dataset.
    // Only Dataset container values can be represented this way.
    DATASET_URI = 2;
    // Represent the value as a CSV file. Only "file://" schema is supported using a
    // shared file system. CSV URI should point to the file with ".csv" file extension.
    // Only tabular container values with numeric and string cell values can be represented
    // this way.
    CSV_URI = 3;

    // The following are additional value types which can be supported by systems,
    // but it is not required. If the value cannot be represented with value types your system
    // supports and your system is still asked to do so, it should return "ValueError" error instead.

    // Represent values by Python-pickling them. Only "file://" schema is supported using a
    // shared file system. Pickle URI should point to the file with ".pickle" file extension.
    PICKLE_URI = 4;
    // Represent values by Python-pickling them but sending them through the API.
    // The value before encoding should be at most 64 KB.
    PICKLE_BLOB = 5;
    // Represent values with arrow and storing them into shared instance of Plasma.
    PLASMA_ID = 6;
    // Same as "RAW", but without any size limit.
    LARGE_RAW = 7;
    // Same as "PICKLE_BLOB", but without any size limit.
    LARGE_PICKLE_BLOB = 8;
}

message ValueError {
    // A error message useful for debugging or logging. Not meant to be very end-user friendly.
    // If a list of supported/allowed value types could not support a given value, then message
    // should say so. On the other hand, if there was really an error using a value type which
    // would otherwise support a given value, then the error message should communicate this error.
    // If there was such an error but some later value type allowed for recovery, then there
    // should be no error.
    string message = 1;
}

message ValueList {
    repeated ValueRaw items = 1;
}

message ValueDict {
    map<string, ValueRaw> items = 1;
}

enum NullValue {
  NULL_VALUE = 0;
}

message ValueRaw {
    oneof raw {
        NullValue null = 1;
        double double = 2;
        int64 int64 = 3;
        bool bool = 4;
        string string = 5;
        bytes bytes = 6;
        ValueList list = 7;
        ValueDict dict = 8;
    }
}

message Value {
    oneof value {
        // If there was an error trying to provided the value using the requested
        // value type and no other value type was available to be used.
        ValueError error = 1;
        // Raw values directly provided in the message.
        ValueRaw raw = 2;
        // An URI pointing to a dataset. Resulting value is Dataset container value from loading this URI.
        string dataset_uri = 3;
        // An URI pointing to a CSV file.
        string csv_uri = 4;
        // An URI to a Python-pickled value.
        string pickle_uri = 5;
        // A Python-pickled value itself.
        bytes pickle_blob = 6;
        // 20 bytes of Plasma ObjectID of the value.
        bytes plasma_id = 7;
    }
}
