!function(Q){function I(B){if(F[B])return F[B].exports;var C=F[B]={i:B,l:!1,exports:{}};return Q[B].call(C.exports,C,C.exports,I),C.l=!0,C.exports}var F={};I.m=Q,I.c=F,I.i=function(Q){return Q},I.d=function(Q,F,B){I.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:B})},I.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(F,"a",F),F},I.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},I.p="",I(I.s=25)}([function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(setImmediate, global) {;(function() {\n"use strict"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== "object") return Vnode("#", undefined, undefined, node === false ? "" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*("|\'|)((?:\\\\["\'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction compileSelector(selector) {\n\tvar match, tag = "div", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === "" && value !== "") tag = value\n\t\telse if (type === "#") attrs.id = value\n\t\telse if (type === ".") classes.push(value)\n\t\telse if (match[3][0] === "[") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\(["\'])/g, "$1").replace(/\\\\\\\\/g, "\\\\")\n\t\t\tif (match[4] === "class") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(" ")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + " " + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== "key") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {\n\t\tthrow Error("The selector must be either a string or a component.");\n\t}\n\tif (typeof selector === "string") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === "string") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = ""\n\treturn Vnode("<", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode("[", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")\n\tif (typeof executor !== "function") throw new TypeError("executor must be a function")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {\n\t\t\t\t\tif (value === self) throw new TypeError("Promise can\'t be resolved w/ itself")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== "function") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === "function" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== "undefined") {\n\tif (typeof window.Promise === "undefined") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== "undefined") {\n\tif (typeof global.Promise === "undefined") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== "[object Object]") return ""\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join("&")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === "[object Object]") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp("^file://", "i")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === "function") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === "string") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = "GET"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === "GET" || args.method === "TRACE") ? false : (typeof args.useBody === "boolean" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== "function") args.serialize = typeof FormData !== "undefined" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== "function") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== "function") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === "boolean" ? args.async : true, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody) {\n\t\t\t\txhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize) {\n\t\t\t\txhr.setRequestHeader("Accept", "application/json, text/*")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === "function") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don\'t throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++\n\t\t\tvar script = $window.document.createElement("script")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error("JSONP request failed"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || "callback"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== "") {\n\t\t\tvar prefix = url.indexOf("?") < 0 ? "?" : "&"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== "" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === "function") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar nameSpace = {\n\t\tsvg: "http://www.w3.org/2000/svg",\n\t\tmath: "http://www.w3.org/1998/Math/MathML"\n\t}\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === "string") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase "#": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase "<": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase "[": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}[match1[1]] || "div"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tns = getNameSpace(vnode) || ns\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== "") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === "function") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === "string") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase "#": updateText(old, vnode); break\n\t\t\t\t\tcase "<": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase "[": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\t\tif (vnode.tag === "textarea") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== "") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === "<") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeremove === "function") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === "string") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === "function") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onremove === "function") vnode._state.onremove.call(vnode.state, vnode)\n\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\telse {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === "key" || key2 === "is" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== "object" || typeof value === "undefined" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(":")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === "xlink") {\n\t\t\telement.setAttributeNS("http://www.w3.org/1999/xlink", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === "o" && key2[1] === "n" && typeof value === "function") updateEvent(vnode, key2, value)\n\t\telse if (key2 === "style") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\tif (key2 === "value") {\n\t\t\t\tvar normalized0 = "" + value // eslint-disable-line no-implicit-coercion\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "select") {\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tif (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "option" && old != null && vnode.dom.value === normalized0) return\n\t\t\t}\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === "input" && key2 === "type") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === "boolean") {\n\t\t\t\tif (value) element.setAttribute(key2, "")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === "className" ? "class" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === "select" && attrs2 != null) {\n\t\t\tif ("value" in attrs2) setAttr(vnode, "value", null, attrs2.value, undefined)\n\t\t\tif ("selectedIndex" in attrs2) setAttr(vnode, "selectedIndex", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === "className") key2 = "class"\n\t\t\t\t\tif (key2[0] === "o" && key2[1] === "n" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== "key") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === "href" || attr === "list" || attr === "form" || attr === "width" || attr === "height"// || attr === "type"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf("-") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = "", old = null\n\t\tif (style == null) element.style.cssText = ""\n\t\telse if (typeof style === "string") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === "string") element.style.cssText = ""\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== "string") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = ""\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== "function" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === "function" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === "function") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === "function") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === "function") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === "function") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeupdate === "function") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\tvar namespace = dom.namespaceURI\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = ""\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)\n\t\tdom.vnodes = vnodes\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t\tif ($doc.activeElement !== active) active.focus()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === "function" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw === false) e.redraw = undefined\n\t\telse redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== "function") throw new Error("m.mount(element, component) expects a component, not a vnode")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === "" || string == null) return {}\n\tif (string.charAt(0) === "?") string = string.slice(1)\n\tvar entries = string.split("&"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split("=")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""\n\t\tif (value === "true") value = true\n\t\telse if (value === "false") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf("[") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === "") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === "function"\n\tvar callAsync0 = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === "pathname" && data[0] !== "/") data = "/" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf("?")\n\t\tvar hashIndex = path.indexOf("#")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: "#!"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase "#": return normalize1("hash").slice(router.prefix.length)\n\t\t\tcase "?": return normalize1("search").slice(router.prefix.length) + normalize1("hash")\n\t\t\tdefault: return normalize1("pathname").slice(router.prefix.length) + normalize1("search") + normalize1("hash")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += "?" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += "#" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp("^" + route0.replace(/:[^\\/]+?\\.{3}/g, "(.*?)").replace(/:[^\\/]+/g, "([^\\\\/]+)") + "\\/?$")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, "")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === "#") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error("Could not resolve default route " + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === "function") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, "div")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute("href", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute("href")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== "undefined" && typeof key3 !== "undefined") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = "1.1.3"\nm.vnode = Vnode\nif (true) module["exports"] = m\nelse window.m = m\n}());\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31).setImmediate, __webpack_require__(9)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.setPanelOpen = setPanelOpen;\nexports.togglePanelOpen = togglePanelOpen;\nexports.setPanelCallback = setPanelCallback;\nexports.setPanelOcclusion = setPanelOcclusion;\nexports.scrollBarChanged = scrollBarChanged;\nexports.mergeAttributes = mergeAttributes;\n// Global configuration\n\nvar aboutText = exports.aboutText = 'TwoRavens v0.1 \"Dallas\" -- The Norse god Odin had two talking ravens as advisors, who would fly out into the world and report back all they observed. In the Norse, their names were \"Thought\" and \"Memory\". In our coming release, our thought-raven automatically advises on statistical model selection, while our memory-raven accumulates previous statistical models from Dataverse, to provide cummulative guidance and meta-analysis.';\n\nvar panelMargin = exports.panelMargin = 10; // in pixels\nvar heightHeader = exports.heightHeader = 62;\nvar heightFooter = exports.heightFooter = 40;\n\nvar menuColor = exports.menuColor = '#f9f9f9';\nvar borderColor = exports.borderColor = '1px solid #adadad';\n\n// initial color scale used to establish the initial colors of nodes\n// allNodes.push() below establishes a field for the master node array allNodes called \"nodeCol\" and assigns a color from this scale to that field\n// everything there after should refer to the nodeCol and not the color scale, this enables us to update colors and pass the variable type to R based on its coloring\nvar colors = exports.colors = d3.scale.category20();\nvar csColor = exports.csColor = '#419641';\nvar dvColor = exports.dvColor = '#28a4c9';\nvar gr1Color = exports.gr1Color = '#14bdcc'; // initially was #24a4c9', but that is dvColor, and we track some properties by color assuming them unique\nvar gr1Opacity = exports.gr1Opacity = [0, 1];\nvar gr2Color = exports.gr2Color = '#ffcccc';\nvar gr2Opacity = exports.gr2Opacity = [0, 1];\n\nvar grayColor = exports.grayColor = '#c0c0c0';\nvar nomColor = exports.nomColor = '#ff6600';\nvar varColor = exports.varColor = '#f0f8ff'; // d3.rgb(\"aliceblue\");\nvar taggedColor = exports.taggedColor = '#f5f5f5'; // d3.rgb(\"whitesmoke\");\nvar timeColor = exports.timeColor = '#2d6ca2';\n\nvar d3Color = exports.d3Color = '#1f77b4'; // d3's default blue\nvar selVarColor = exports.selVarColor = '#fa8072'; // d3.rgb(\"salmon\");\n\n// Global features\n\n// stores all functions to be called on window resize\nvar onResize = exports.onResize = [];\nvar callOnResize = exports.callOnResize = function callOnResize(resize) {\n    return onResize.push(resize);\n};\nwindow.onresize = function () {\n    return onResize.map(function (resize) {\n        return resize();\n    });\n};\n\nvar panelOpen = exports.panelOpen = {\n    'left': true,\n    'right': true\n};\n\n// If you invoke from outside a mithril context, run m.redraw() to trigger the visual update\nfunction setPanelOpen(side) {\n    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    panelOpen[side] = state;\n    panelCallback[side](state);\n}\n\nfunction togglePanelOpen(side) {\n    panelOpen[side] = !panelOpen[side];\n    panelCallback[side](panelOpen[side]);\n}\n\n// Optionally trigger callback after setting panel state (but before redraw)\nvar panelCallback = exports.panelCallback = {\n    'left': Function,\n    'right': Function\n};\nfunction setPanelCallback(side, callback) {\n    panelCallback[side] = callback;\n}\n\n// Number of pixels occluded by the panels. Left at zero if panels are hovering\nvar panelOcclusion = exports.panelOcclusion = {\n    'left': 0,\n    'right': 0\n};\nfunction setPanelOcclusion(side, state) {\n    panelOcclusion[side] = state;\n}\n\nvar scrollbarWidth = exports.scrollbarWidth = getScrollbarWidth();\nvar canvasScroll = exports.canvasScroll = {\n    vertical: false,\n    horizontal: false\n};\n\n// If scroll bar has been added or removed from canvas, update state and return true.\nfunction scrollBarChanged() {\n    var canvas = document.getElementById('canvas');\n    if (canvas === null) return false;\n\n    var newState = {\n        vertical: canvas.scrollHeight > canvas.clientHeight,\n        horizontal: canvas.scrollWidth > canvas.clientWidth\n    };\n\n    if (newState['vertical'] !== canvasScroll['vertical'] || newState['horizontal'] !== canvasScroll['horizontal']) {\n        exports.canvasScroll = canvasScroll = newState;\n        return true;\n    } else return false;\n}\n\n// Merge arrays and objects up to one layer deep\nfunction mergeAttributes(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    if (!sources.length) return target;\n    var source = sources.shift();\n\n    for (var key in source) {\n        if (Array.isArray(source[key]) && Array.isArray(target[key])) target[key].concat(source[key]);else if (_typeof(target[key]) === 'object' && _typeof(source[key]) === 'object') Object.assign(target[key], source[key]);else target[key] = source[key];\n    }\n    return mergeAttributes.apply(undefined, [target].concat(sources));\n}\n\n// https://stackoverflow.com/a/13382873\nfunction getScrollbarWidth() {\n    var outer = document.createElement(\"div\");\n    outer.style.visibility = \"hidden\";\n    outer.style.width = \"100px\";\n    outer.style.msOverflowStyle = \"scrollbar\"; // needed for WinJS apps\n\n    document.body.appendChild(outer);\n\n    var widthNoScroll = outer.offsetWidth;\n    // force scrollbars\n    outer.style.overflow = \"scroll\";\n\n    // add innerdiv\n    var inner = document.createElement(\"div\");\n    inner.style.width = \"100%\";\n    outer.appendChild(inner);\n\n    var widthWithScroll = inner.offsetWidth;\n\n    // remove divs\n    outer.parentNode.removeChild(outer);\n\n    return widthNoScroll - widthWithScroll;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\nexports.setCheckedDiscoveryProblem = exports.checkedDiscoveryProblems = exports.setSelectedProblem = exports.selectedProblem = exports.probtable = exports.fakeClick = exports.hexToRgba = exports.popoverContent = exports.summary = exports.setLeftTab = exports.pipelineTable = exports.pipelineHeader = exports.setSelectedPipeline = exports.selectedPipeline = exports.lockDescription = exports.searchVariables = exports.matchedVariables = exports.marginLeftCarousel = exports.marginTopCarousel = exports.lockTour = exports.mytour3 = exports.mytour = exports.step = exports.restart = exports.reset = exports.byId = exports.arc4 = exports.arc3 = exports.arc2 = exports.arc1 = exports.arc0 = exports.discoveryLadda = exports.estimateLadda = exports.height = exports.width = exports.setD3mProblemDescription = exports.d3mProblemDescription = exports.d3mMetrics = exports.d3mTaskSubtype = exports.d3mTaskType = exports.domainIdentifier = exports.modalFunc = exports.modalBtnDisplay = exports.modalClose = exports.modalVis = exports.modalButton = exports.modalHeader = exports.modalText = exports.callHistory = exports.links = exports.nodes = exports.allResults = exports.allNodes = exports.valueKey = exports.modelCount = exports.disco = exports.zparams = exports.logArray = exports.allPipelineInfo = exports.swandive = exports.locktoggle = exports.forcetoggle = exports.myspace = exports.RADIUS = exports.transformList = exports.panelWidth = exports.setRightTabExplore = exports.setRightTab = exports.exploreRightPanelWidths = exports.modelRightPanelWidths = exports.modelLeftPanelWidths = exports.rightTabExplore = exports.rightTab = exports.summaryHold = exports.subset = exports.leftTabHidden = exports.leftTab = exports.timeColor = exports.varColor = exports.nomColor = exports.gr2Color = exports.gr1Color = exports.dvColor = exports.csColor = exports.k = exports.cdb = exports.currentMode = exports.univariate_finished = exports.task2_finished = exports.task1_finished = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();\n\nvar _arguments = arguments;\nexports.set_mode = set_mode;\nexports.main = main;\nexports.setup_svg = setup_svg;\nexports.layout = layout;\nexports.findNodeIndex = findNodeIndex;\nexports.findNode = findNode;\nexports.clickVar = clickVar;\nexports.getVariableData = getVariableData;\nexports.forceSwitch = forceSwitch;\nexports.helpmaterials = helpmaterials;\nexports.zPop = zPop;\nexports.downloadIncomplete = downloadIncomplete;\nexports.estimate = estimate;\nexports.ta2stuff = ta2stuff;\nexports.makeRequest = makeRequest;\nexports.legend = legend;\nexports.erase = erase;\nexports.panelPlots = panelPlots;\nexports.borderState = borderState;\nexports.subsetSelect = subsetSelect;\nexports.endsession = endsession;\nexports.deletepipelines = deletepipelines;\nexports.cancelpipelines = cancelpipelines;\nexports.listpipelines = listpipelines;\nexports.executepipeline = executepipeline;\nexports.setPebbleRadius = setPebbleRadius;\nexports.resultsplotinit = resultsplotinit;\nexports.genconfdata = genconfdata;\nexports.confusionmatrix = confusionmatrix;\nexports.bivariatePlot = bivariatePlot;\nexports.setxTable = setxTable;\nexports.exportpipeline = exportpipeline;\nexports.deletepipeline = deletepipeline;\nexports.ta3_search_message = ta3_search_message;\nexports.test_msg_ta3_search = test_msg_ta3_search;\nexports.end_ta3_search = end_ta3_search;\nexports.record_user_metadata = record_user_metadata;\nexports.showPredPlot = showPredPlot;\nexports.showGenPreds = showGenPreds;\nexports.discovery = discovery;\nexports.submitDiscProb = submitDiscProb;\nexports.saveDisc = saveDisc;\nexports.setModal = setModal;\n\nvar _hopscotch = __webpack_require__(8);\n\nvar _hopscotch2 = _interopRequireDefault(_hopscotch);\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _plots = __webpack_require__(3);\n\nvar _common = __webpack_require__(1);\n\nvar common = _interopRequireWildcard(_common);\n\nvar _Search = __webpack_require__(4);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// hostname default - the app will use it to obtain the variable metadata\n// (ddi) and pre-processed data info if the file id is supplied as an\n// argument (for ex., gui.html?dfId=17), but hostname isn\'t.\n// Edit it to suit your installation.\n// (NOTE that if the file id isn\'t supplied, the app will default to the\n// local files specified below!)\n// NEW: it is also possible now to supply complete urls for the ddi and\n// the tab-delimited data file; the parameters are ddiurl and dataurl.\n// These new parameters are optional. If they are not supplied, the app\n// will go the old route - will try to cook standard dataverse urls\n// for both the data and metadata, if the file id is supplied; or the\n// local files if nothing is supplied.\n\n//-------------------------------------------------\n// NOTE: global variables are now set in the index.html file.\n//    Developers, see /template/index.html\n//-------------------------------------------------\n\nvar task1_finished = exports.task1_finished = false;\nvar task2_finished = exports.task2_finished = false;\nvar univariate_finished = exports.univariate_finished = false;\n\nvar currentMode = exports.currentMode = \'model\';\nvar is_explore_mode = false;\nvar is_results_mode = false;\n\nfunction set_mode(mode) {\n    if (!mode) mode = \'model\';\n    mode = mode.toLowerCase();\n\n    if (currentMode !== mode) {\n        updateRightPanelWidth();\n        updateLeftPanelWidth();\n\n        exports.currentMode = currentMode = mode;\n        _mithril2.default.route.set(\'/\' + mode.toLowerCase());\n    }\n\n    is_explore_mode = mode === \'explore\';\n    is_results_mode = mode === \'results\';\n}\n\n// for debugging - if not in PRODUCTION, prints args\nvar cdb = exports.cdb = function cdb(_) {\n    var _console;\n\n    return PRODUCTION || (_console = console).log.apply(_console, _arguments);\n};\n\nvar k = exports.k = 4; // strength parameter for group attraction/repulsion\nvar tutorial_mode = localStorage.getItem(\'tutorial_mode\') !== \'false\';\n\n// initial color scale used to establish the initial colors of nodes\n// allNodes.push() below establishes a field for the master node array allNodes called "nodeCol" and assigns a color from this scale to that field\n// everything there after should refer to the nodeCol and not the color scale, this enables us to update colors and pass the variable type to R based on its coloring\nvar colors = d3.scale.category20();\nvar csColor = exports.csColor = \'#419641\';\nvar dvColor = exports.dvColor = \'#28a4c9\';\nvar gr1Color = exports.gr1Color = \'#14bdcc\'; // initially was #24a4c9\', but that is dvColor, and we track some properties by color assuming them unique\nvar gr1Opacity = [0, 1];\nvar gr2Color = exports.gr2Color = \'#ffcccc\';\nvar gr2Opacity = [0, 1];\n\nvar grayColor = \'#c0c0c0\';\nvar nomColor = exports.nomColor = \'#ff6600\';\nvar varColor = exports.varColor = \'#f0f8ff\'; // d3.rgb("aliceblue");\nvar taggedColor = \'#f5f5f5\'; // d3.rgb("whitesmoke");\nvar timeColor = exports.timeColor = \'#2d6ca2\';\n\nvar leftTab = exports.leftTab = \'Variables\'; // current tab in left panel\nvar leftTabHidden = exports.leftTabHidden = \'Variables\'; // stores the tab user was in before summary hover\nvar subset = exports.subset = false;\nvar summaryHold = exports.summaryHold = false;\n\nvar rightTab = exports.rightTab = \'Task Type\'; // current tab in right panel\nvar rightTabExplore = exports.rightTabExplore = \'Univariate\';\n\nvar modelLeftPanelWidths = exports.modelLeftPanelWidths = {\n    \'Variables\': \'300px\',\n    \'Discovery\': \'auto\',\n    \'Summary\': \'300px\'\n};\n\nvar modelRightPanelWidths = exports.modelRightPanelWidths = {\n    \'Models\': \'300px\',\n    \'Task Type\': \'300px\',\n    \'Subtype\': \'300px\',\n    \'Metrics\': \'300px\',\n    //     \'Set Covar.\': \'900px\',\n    \'Results\': \'900px\'\n};\n\nvar exploreRightPanelWidths = exports.exploreRightPanelWidths = {\n    \'Univariate\': \'700px\',\n    \'Bivariate\': \'75%\'\n};\n\nvar setRightTab = exports.setRightTab = function setRightTab(tab) {\n    exports.rightTab = rightTab = tab;updateRightPanelWidth();\n};\nvar setRightTabExplore = exports.setRightTabExplore = function setRightTabExplore(tab) {\n    exports.rightTabExplore = rightTabExplore = tab;updateRightPanelWidth();\n};\n\n// panelWidth is meant to be read only\nvar panelWidth = exports.panelWidth = {\n    \'left\': \'0\',\n    \'right\': \'0\'\n};\n\nvar updateRightPanelWidth = function updateRightPanelWidth() {\n    if (common.panelOpen[\'right\']) {\n        var tempWidth = {\n            \'model\': modelRightPanelWidths[rightTab],\n            \'explore\': exploreRightPanelWidths[rightTabExplore]\n        }[currentMode];\n\n        panelWidth[\'right\'] = \'calc(\' + common.panelMargin * 2 + \'px + \' + tempWidth + \')\';\n    } else panelWidth[\'right\'] = \'calc(\' + common.panelMargin * 2 + \'px + 16px)\';\n};\nvar updateLeftPanelWidth = function updateLeftPanelWidth() {\n    if (common.panelOpen[\'left\']) panelWidth[\'left\'] = \'calc(\' + common.panelMargin * 2 + \'px + \' + modelLeftPanelWidths[leftTab] + \')\';else panelWidth[\'left\'] = \'calc(\' + common.panelMargin * 2 + \'px + 16px)\';\n};\n\nupdateRightPanelWidth();\nupdateLeftPanelWidth();\n\ncommon.setPanelCallback(\'right\', updateRightPanelWidth);\ncommon.setPanelCallback(\'left\', updateLeftPanelWidth);\n\n// transformation toolbar options\nvar t = void 0,\n    typeTransform = void 0;\nvar transformList = exports.transformList = \'log(d) exp(d) d^2 sqrt(d) interact(d,e)\'.split(\' \');\nvar transformVar = \'\';\n\n// var list for each space contain variables in original data\n// plus trans in that space\nvar trans = [];\nvar preprocess = {}; // hold pre-processed data\nvar spaces = [];\n\n// layout function constants\nvar layoutAdd = "add";\nvar layoutMove = "move";\n\n// radius of circle\nvar RADIUS = exports.RADIUS = 40;\n\n// cx, cy, r values for indicator lights\nvar ind1 = [(RADIUS + 30) * Math.cos(1.3), -1 * (RADIUS + 30) * Math.sin(1.3), 5];\nvar ind2 = [(RADIUS + 30) * Math.cos(1.1), -1 * (RADIUS + 30) * Math.sin(1.1), 5];\n\n// space index\nvar myspace = exports.myspace = 0;\n\nvar forcetoggle = exports.forcetoggle = ["true"];\nvar locktoggle = exports.locktoggle = true;\nvar priv = true;\n\n// swandive is our graceful fail for d3m\n// swandive set to true if task is in failset\nvar swandive = exports.swandive = false;\nvar failset = ["TIME_SERIES_FORECASTING", "GRAPH_MATCHING", "LINK_PREDICTION", "timeSeriesForecasting", "graphMatching", "linkPrediction"];\n\n// object that contains all information about the returned pipelines\nvar allPipelineInfo = exports.allPipelineInfo = {};\n\nvar logArray = exports.logArray = [];\nvar zparams = exports.zparams = {\n    zdata: [],\n    zedges: [],\n    ztime: [],\n    znom: [],\n    zcross: [],\n    zmodel: "",\n    zvars: [],\n    zdv: [],\n    zgroup1: [],\n    zgroup2: [], // hard coding to two groups for present experiments, but will eventually make zgroup array of arrays, with zgroup.length the number of groups\n    zdataurl: "",\n    zd3mdata: "", //these take the place of zdataurl for d3m, because data is in two placees. eventually will generalize\n    zd3mtarget: "",\n    zsubset: [],\n    zsetx: [],\n    zmodelcount: 0,\n    zplot: [],\n    zsessionid: "",\n    zdatacite: \'...\',\n    zcrosstab: [],\n    zusername: \'\'\n};\n\nvar disco = exports.disco = [];\n\nvar modelCount = exports.modelCount = 0;\nvar valueKey = exports.valueKey = [];\nvar allNodes = exports.allNodes = [];\nvar allResults = exports.allResults = [];\nvar nodes = exports.nodes = [];\nvar links = exports.links = [];\nvar mods = {};\nvar estimated = false;\nvar rightClickLast = false;\nvar selInteract = false;\nvar callHistory = exports.callHistory = []; // transform and subset calls\nvar mytarget = \'\';\n\n// things to customize modal window from app.js\nvar modalText = exports.modalText = "Default modal text";\nvar modalHeader = exports.modalHeader = "Default modal header";\nvar modalButton = exports.modalButton = "Close";\nvar modalVis = exports.modalVis = false;\nvar modalClose = exports.modalClose = false;\nvar modalBtnDisplay = exports.modalBtnDisplay = \'block\';\nvar modalFunc = exports.modalFunc = function modalFunc() {\n    return;\n};\n\nvar configurations = {};\nvar datadocument = {};\n\nvar domainIdentifier = exports.domainIdentifier = null; // available throughout apps js; used for saving workspace\n\n// eventually read this from the schema with real descriptions\n// metrics, tasks, and subtasks as specified in D3M schemas\n// MEAN SQUARED ERROR IS SET TO SAME AS RMSE. MSE is in schema but not proto\nvar d3mTaskType = exports.d3mTaskType = {\n    taskTypeUndefined: ["description", "TASK_TYPE_UNDEFINED", 0],\n    classification: ["description", "CLASSIFICATION", 1],\n    regression: ["description", "REGRESSION", 2],\n    clustering: ["description", "CLUSTERING", 3],\n    linkPrediction: ["description", "LINK_PREDICTION", 4],\n    vertexNomination: ["description", "VERTEX_NOMINATION", 5],\n    communityDetection: ["description", "COMMUNITY_DETECTION", 6],\n    graphClustering: ["description", "GRAPH_CLUSTERING", 7],\n    graphMatching: ["description", "GRAPH_MATCHING", 8],\n    timeSeriesForecasting: ["description", "TIME_SERIES_FORECASTING", 9],\n    collaborativeFiltering: ["description", "COLLABORATIVE_FILTERING", 10]\n};\n\nvar d3mTaskSubtype = exports.d3mTaskSubtype = {\n    taskSubtypeUndefined: ["description", "TASK_SUBTYPE_UNDEFINED", 0],\n    subtypeNone: ["description", "NONE", 1],\n    binary: ["description", "BINARY", 2],\n    multiClass: ["description", "MULTICLASS", 3],\n    multiLabel: ["description", "MULTILABEL", 4],\n    univariate: ["description", "UNIVARIATE", 5],\n    multivariate: ["description", "MULTIVARIATE", 6],\n    overlapping: ["description", "OVERLAPPING", 7],\n    nonOverlapping: ["description", "NONOVERLAPPING", 8]\n};\n/*export let d3mOutputType = {\n    outputUndefined:["description","OUTPUT_TYPE_UNDEFINED ", 0],\n    predictionsFile:["description","PREDICTIONS_FILE",1],\n    scoresFile:["description","SCORES_FILE",2]\n}; */\nvar d3mMetrics = exports.d3mMetrics = {\n    metricUndefined: ["description", "METRIC_UNDEFINED", 0],\n    executionTime: ["description", "EXECUTION_TIME", 1],\n    accuracy: ["description", "ACCURACY", 2],\n    f1: ["description", "F1", 3],\n    f1Micro: ["description", "F1_MICRO", 4],\n    f1Macro: ["description", "F1_MACRO", 5],\n    rocAuc: ["description", "ROC_AUC", 6],\n    rocAucMicro: ["description", "ROC_AUC_MICRO", 7],\n    rocAucMacro: ["description", "ROC_AUC_MACRO", 8],\n    meanSquaredError: ["description", "MEAN_SQUARED_ERROR", 9],\n    rootMeanSquaredError: ["description", "ROOT_MEAN_SQUARED_ERROR", 10],\n    rootMeanSquaredErrorAvg: ["description", "ROOT_MEAN_SQUARED_ERROR_AVG", 11],\n    meanAbsoluteError: ["description", "MEAN_ABSOLUTE_ERROR", 12],\n    rSquared: ["description", "R_SQUARED", 13],\n    normalizedMutualInformation: ["description", "NORMALIZED_MUTUAL_INFORMATION", 14],\n    jaccardSimilarityScore: ["description", "JACCARD_SIMILARITY_SCORE", 15]\n};\n\nvar d3mProblemDescription = exports.d3mProblemDescription = {\n    taskType: "taskTypeUndefined",\n    taskSubtype: "taskSubtypeUndefined",\n    //   outputType: [3,"DEFAULT"],\n    metric: "metricUndefined",\n    taskDescription: ""\n};\n\n/*\n * call to django to update the problem definition in the problem document\n * rpc SetProblemDoc(SetProblemDocRequest) returns (Response) {}\n */\nvar setD3mProblemDescription = exports.setD3mProblemDescription = function setD3mProblemDescription(key, value) {\n    if (!locktoggle) {\n        d3mProblemDescription[key] = value;\n\n        var lookup = {\n            \'taskType\': d3mTaskType,\n            \'taskSubtype\': d3mTaskSubtype,\n            // \'outputType\': d3mOutputType,\n            \'metric\': d3mMetrics\n        }[key];\n\n        if (lookup === undefined) return;\n        makeRequest(D3M_SVC_URL + "/SetProblemDoc", { replaceProblemSchemaField: _defineProperty({}, key, lookup[d3mProblemDescription[key]][1]), context: apiSession(zparams.zsessionid) });\n    } else _hopscotch2.default.startTour(lockTour);\n};\n\nvar svg = void 0,\n    div = void 0,\n    selectLadda = void 0;\nvar width = exports.width = void 0,\n    height = exports.height = void 0,\n    estimateLadda = exports.estimateLadda = void 0,\n    discoveryLadda = exports.discoveryLadda = void 0;\n\n// arcs for denoting pebble characteristics\nvar arc = function arc(start, end) {\n    return d3.svg.arc().innerRadius(RADIUS + 5).outerRadius(RADIUS + 20).startAngle(start).endAngle(end);\n};\nvar _ref = [arc(0, 3.2), arc(0, 1), arc(1.1, 2.2), arc(2.3, 3.3), arc(4.3, 5.3)];\nvar arc0 = _ref[0],\n    arc1 = _ref[1],\n    arc2 = _ref[2],\n    arc3 = _ref[3],\n    arc4 = _ref[4];\nexports.arc0 = arc0;\nexports.arc1 = arc1;\nexports.arc2 = arc2;\nexports.arc3 = arc3;\nexports.arc4 = arc4;\n\nvar arcInd = function arcInd(arclimits) {\n    return d3.svg.arc().innerRadius(RADIUS + 22).outerRadius(RADIUS + 37).startAngle(arclimits[0]).endAngle(arclimits[1]);\n};\n\nvar arcInd1Limits = [0, 0.3],\n    arcInd2Limits = [0.35, 0.65];\nvar _ref2 = [arcInd(arcInd1Limits), arcInd(arcInd2Limits)],\n    arcInd1 = _ref2[0],\n    arcInd2 = _ref2[1];\nvar byId = exports.byId = function byId(id) {\n    return document.getElementById(id);\n};\n// export let byId = id => {console.log(id); return document.getElementById(id);}\n\n/**\n   page reload linked to btnReset\n*/\nvar reset = exports.reset = async function reloadPage() {\n    var res = await makeRequest(D3M_SVC_URL + \'/endsession\', apiSession(zparams.zsessionid));\n    byId("btnModel").click();\n    location.reload();\n};\nvar _restart = void 0;\n\nexports.restart = _restart;\nvar dataurl = \'\';\n\nvar step = exports.step = function step(target, placement, title, content) {\n    return {\n        target: target,\n        placement: placement,\n        title: title,\n        content: content,\n        showCTAButton: true,\n        ctaLabel: \'Disable these messages\',\n        onCTA: function onCTA() {\n            localStorage.setItem(\'tutorial_mode\', \'false\');\n            _hopscotch2.default.endTour(true);\n        }\n    };\n};\n\nvar mytour = exports.mytour = {\n    id: "dataset_launch",\n    i18n: { doneBtn: \'Ok\' },\n    showCloseButton: true,\n    scrollDuration: 300,\n    steps: [step("dataName", "bottom", "Welcome to TwoRavens Solver", \'<p>This tool can guide you to solve an empirical problem in the dataset above.</p>\\n                      <p>These messages will teach you the steps to take to find and submit a solution.</p>\'), step("btnReset", "bottom", "Restart Any Problem Here", \'<p>You can always start a problem over by using this reset button.</p>\'), step("btnDiscovery", "right", "Start Task 1", \'<p>This Problem Discovery button allows you to start Task 1 - Problem Discovery.</p>\\n                     <p>Generally, as a tip, the Green button is the next button you need to press to move the current task forward.</p>\\n                     <p>Click this button to see a list of problems that have been discovered in the dataset.</p>\\n                     <p>You can mark which ones you agree may be interesting, and then submit the table as an answer.</p>\'),\n    //step("btnSelect", "right", "Complete Task 1",\n    //     `<p>This submission button marks Task 1 - Problem Discovery, as complete.</p>\n    //     <p>Click this button to save the check marked problems in the table below as potentially interesting or relevant.</p>\n    //     <p>Generally, as a tip, the Green button is the next button you need to press to move the current task forward.</p>`),\n    step("btnEstimate", "left", "Solve Task 2", \'<p>This generally is the important step to follow for Task 2 - Build a Model.</p>\\n                      <p>Generally, as a tip, the Green button is the next button you need to press to move the current task forward, and this button will be Green when Task 1 is completed and Task 2 started.</p>\\n                      <p>Click this Solve button to tell the tool to find a solution to the problem, using the variables presented in the center panel.</p>\'), step(mytarget + \'biggroup\', "left", "Target Variable", \'This is the variable, \' + mytarget + \', we are trying to predict.\\n                      This center panel graphically represents the problem currently being attempted.\'), step("gr1hull", "right", "Explanation Set", "This set of variables can potentially predict the target."), step("displacement", "right", "Variable List", \'<p>Click on any variable name here if you wish to remove it from the problem solution.</p>\\n                      <p>You likely do not need to adjust the problem representation in the center panel.</p>\'), step("btnEndSession", "bottom", "Finish Problem", "If the solution reported back seems acceptable, then finish this problem by clicking this End Session button.")]\n};\n\nvar mytour3 = exports.mytour3 = {\n    id: "dataset_launch",\n    i18n: { doneBtn: \'Ok\' },\n    showCloseButton: true,\n    scrollDuration: 300,\n    steps: [step("btnSelect", "right", "Complete Task 1", \'<p>This submission button marks Task 1 - Problem Discovery, as complete.</p>\\n                     <p>Click this button to save the check marked problems in the table below as potentially interesting or relevant.</p>\\n                     <p>Generally, as a tip, the Green button is the next button you need to press to move the current task forward.</p>\')]\n};\n\n// appears when a user attempts to edit when the toggle is set\nvar lockTour = exports.lockTour = {\n    id: "lock_toggle",\n    i18n: { doneBtn: \'Ok\' },\n    showCloseButton: true,\n    scrollDuration: 300,\n    steps: [step("btnLock", "left", "Locked Mode", \'<p>Click the lock button to enable editing.</p>\')]\n};\n\n/**\n  called by main\n  Loads all external data in the following order (logic is not included):\n  1. Retrieve the configuration information\n  2. Set \'configurations\'\n  3. Read the problem schema and set \'d3mProblemDescription\'\n  4. Read the data document and set \'datadocument\'\n  5. Read in zelig models (not for d3m)\n  6. Read in zeligchoice models (not for d3m)\n  7. Start the user session\n  8. Read preprocess data or (if necessary) run preprocess\n  9. Build allNodes[] using preprocessed information\n  10. Add datadocument information to allNodes (when in IS_D3M_DOMAIN)\n  11. Call layout() and start up\n*/\nasync function load(hold, lablArray, d3mRootPath, d3mDataName, d3mPreprocess, d3mData, d3mPS, d3mDS, pURL) {\n    if (!IS_D3M_DOMAIN) {\n        return;\n    }\n\n    // 1. Retrieve the configuration information\n    var res = await _mithril2.default.request({\n        method: "POST",\n        url: "/config/d3m-config/json/latest"\n    });\n    console.log(res);\n    // 2. Set \'configurations\'\n    configurations = JSON.parse(JSON.stringify(res)); // this is just copying res\n    d3mRootPath = configurations.training_data_root.replace(/\\/data/, \'\');\n    d3mDataName = configurations.name;\n\n    // scopes at app.js level; used for saving workspace\n    exports.domainIdentifier = domainIdentifier = { name: configurations.name,\n        source_url: configurations.config_url,\n        description: \'D3M config file\' };\n    //id: configurations.id};\n\n    d3mPS = "/config/d3m-config/get-problem-schema/json";\n    d3mDS = "/config/d3m-config/get-dataset-schema/json";\n    console.log("Configurations: ", configurations);\n    d3mPreprocess = pURL = \'rook-custom/rook-files/\' + d3mDataName + \'/preprocess/preprocess.json\';\n\n    // 3. Read the problem schema and set \'d3mProblemDescription\'\n    // ...and make a call to start the session with TA2. if we get this far, data are guaranteed to exist for the frontend\n\n    res = await _mithril2.default.request("/config/d3m-config/get-problem-data-file-info");\n    // The result of this call is similar to below:\n    // example:\n    /*  {\n             "success":true,\n             "data":{\n                "learningData.csv":{\n                   "exists":true,\n                   "size":11654,\n                   "path":"/inputs/dataset_TRAIN/tables/learningData.csv"\n                },\n                "learningData.csv.gz":{\n                   "exists":false,\n                   "size":-1,\n                   "path":"/inputs/dataset_TRAIN/tables/learningData.csv.gz"\n                }\n             }\n          }\n    */\n\n    // Loop through the response above and\n    // pick the first "path" where "exists" is true\n    //\n    // Note: if data files have "exists" as false, stay as default which is null\n    //\n    var set_d3m_data_path = function set_d3m_data_path(field, val) {\n        return res.data[field].exists ? res.data[field].path : res.data[field + \'.gz\'].exists ? res.data[field + \'.gz\'].path : val;\n    };\n\n    zparams.zd3mdata = d3mData = set_d3m_data_path(\'learningData.csv\', d3mData);\n    zparams.zd3mtarget = set_d3m_data_path(\'learningData.csv\', d3mData);\n\n    // If this is the D3M domain; d3mData MUST be set to an actual value\n    //\n    if (IS_D3M_DOMAIN && d3mData == null) {\n        var d3m_path_err = \'NO VALID d3mData path!! \' + JSON.stringify(res);\n        console.log(d3m_path_err);\n        alert(\'debug (be more graceful): \' + d3m_path_err);\n    }\n\n    // hardcoding this, once get-problem-data-file-info is revised this hardcode can go away and use the previous two LOC\n    //  zparams.zd3mdata = d3mData = d3mRootPath+"/dataset_TRAIN/tables/learningData.csv";\n    //  zparams.zd3mtarget = d3mRootPath+"/dataset_TRAIN/tables/learningData.csv";\n\n    res = await _mithril2.default.request(d3mPS);\n    console.log("prob schema data: ", res);\n\n    mytarget = res.inputs.data[0].targets[0].colName; // easier way to access target name?\n    if (typeof res.about.taskType !== \'undefined\') {\n        d3mProblemDescription.taskType = res.about.taskType;\n    }\n    if (typeof res.about.taskSubType !== \'undefined\') {\n        d3mProblemDescription.taskSubtype = res.about.taskSubType;\n    }\n    if (typeof res.inputs.performanceMetrics[0].metric !== \'undefined\') {\n        d3mProblemDescription.metric = res.inputs.performanceMetrics[0].metric;\n    }\n    if (typeof res.descriptionFile !== \'undefined\') {\n        d3mProblemDescription.taskDescription = res.descriptionFile;\n    }\n    //   d3mProblemDescription.outputType = res.expectedOutputs.predictionsFile;\n\n    // making it case insensitive because the case seems to disagree all too often\n    if (failset.includes(d3mProblemDescription.taskType.toUpperCase())) {\n        if (IS_D3M_DOMAIN) {\n            console.log(\'D3M WARNING: failset  task type found\');\n        }\n        exports.swandive = swandive = true;\n    }\n\n    // 4. Read the data document and set \'datadocument\'\n    datadocument = await _mithril2.default.request(d3mDS);\n\n    // if no columns in the datadocument, go to swandive\n    // 4a. Set datadocument columns!\n    var datadocument_columns = void 0;\n    var col_idx = void 0;\n    for (col_idx = 0; col_idx < datadocument.dataResources.length; col_idx++) {\n        if (datadocument.dataResources[col_idx].columns) {\n            datadocument_columns = datadocument.dataResources[col_idx].columns;\n            console.log(\'columns found in datadocument.dataResources[\' + col_idx + \'].columns\');\n            break;\n        }\n    }\n    if (typeof datadocument_columns === "undefined") {\n        console.log(\'D3M WARNING: datadocument.dataResources[x].columns is undefined.\');\n        exports.swandive = swandive = true;\n    }\n\n    if (IS_D3M_DOMAIN) {\n        var datasetName = datadocument.about.datasetID; //.datasetName;             // Was use "datasetName" field in dataset document, but is commonly "null"\n        zparams.zdata = datasetName.charAt(0).toUpperCase() + datasetName.slice(1); // Make sure to capitalize;\n        var cite = "No citation provided";\n        if (typeof datadocument.about.citation !== \'undefined\') {\n            cite = datadocument.about.citation;\n        }\n        //console.log(cite);\n        //let newcite = cite.match(/{\\s*[\\w\\.]+\\s*}/g).map(function(x) { return x.match(/[\\w\\.]+/)[0]; });\n        //console.log(newcite);\n        /*\n        // clean citation\n        zparams.zdatacite = cite\n            .replace(/\\&/g, "and")\n            .replace(/\\;/g, ",")\n            .replace(/\\%/g, "-");\n        // fill in citation in header\n        $(\'#cite div.panel-body\').text(zparams.zdatacite);\n        */\n    } else {\n        // Note: presently xml is no longer being read from Dataverse metadata anywhere\n        var temp = xml.documentElement.getElementsByTagName("fileName");\n        zparams.zdata = temp[0].childNodes[0].nodeValue;\n        var _cite = xml.documentElement.getElementsByTagName("biblCit");\n        // clean citation so POST is valid json\n        zparams.zdatacite = _cite[0].childNodes[0].nodeValue.replace(/\\&/g, "and").replace(/\\;/g, ",").replace(/\\%/g, "-");\n        // fill in citation in header\n        $(\'#cite div.panel-body\').text(zparams.zdatacite);\n    }\n    // drop file extension\n    var dataname = IS_D3M_DOMAIN ? zparams.zdata : zparams.zdata.replace(/\\.(.*)/, \'\');\n    d3.select("#dataName").html(dataname);\n    // put dataset name, from meta-data, into page title\n    d3.select("title").html("TwoRavens " + dataname);\n\n    // if swandive, we have to set valueKey here so that left panel can populate.\n    if (swandive) {\n        alert(\'Exceptional data detected.  Please check the logs for "D3M WARNING"\');\n        //    let mydataRes = datadocument.dataResources;\n        //  for (let i = 0; i < mydataRes.length; i++) {\n        //       valueKey.push(mydataRes[i].resFormat[0]);\n        //  }\n        // end session if neither trainData nor trainTargets?\n        // valueKey.length === 0 && alert("no trainData or trainTargest in data description file. valueKey length is 0");\n        // perhaps allow users to unlock and select things?\n        byId(\'btnLock\').classList.add(\'noshow\');\n        byId(\'btnForce\').classList.add(\'noshow\');\n        byId(\'btnEraser\').classList.add(\'noshow\');\n        byId(\'btnSubset\').classList.add(\'noshow\');\n        byId(\'main\').style.backgroundColor = \'grey\';\n        byId(\'whitespace\').style.backgroundColor = \'grey\';\n    }\n    console.log("data schema data: ", datadocument);\n\n    // 5. Read in zelig models (not for d3m)\n    // 6. Read in zeligchoice models (not for d3m)\n    if (!IS_D3M_DOMAIN) {\n        var _arr = [\'zelig5models\', \'zelig5choicemodels\'];\n\n        var _loop = async function _loop() {\n            var field = _arr[_i];\n            try {\n                res = await _mithril2.default.request(\'data/\' + field + \'.json\');\n                cdb(field + \' json: \', res);\n                res[field].filter(function (key) {\n                    return res[field].hasOwnProperty(key);\n                }).forEach(function (key) {\n                    return mods[key.name[0]] = key.description[0];\n                });\n            } catch (_) {\n                console.log("can\'t load " + field);\n            }\n        };\n\n        for (var _i = 0; _i < _arr.length; _i++) {\n            await _loop();\n        }\n    }\n    // 7. Start the user session\n    // rpc StartSession(SessionRequest) returns (SessionResponse) {}\n    res = await makeRequest(D3M_SVC_URL + \'/startsession\', { user_agent: \'some agent\', version: \'some version\' });\n    if (res) {\n        if (res.responseInfo.status.code != "OK") {\n            var user_err_msg = "Failed to StartSession with TA2! status code: " + res.responseInfo.status.code;\n            setModal(user_err_msg, "Error Connecting to TA2", true, "Reset", false, "location.reload()");\n            //  end_ta3_search(false, user_err_msg);\n            return;\n        } else {\n            zparams.zsessionid = res.context.sessionId;\n        }\n    }\n\n    // hopscotch tutorial\n    if (tutorial_mode) {\n        console.log(\'Starting Hopscotch Tour\');\n        _hopscotch2.default.startTour(mytour);\n    }\n\n    // 8. read preprocess data or (if necessary) run preprocess\n    // NOTE: preprocess.json is now guaranteed to exist...\n    var read = function read(res) {\n        priv = res.dataset.private || priv;\n        Object.keys(res.variables).forEach(function (k) {\n            return preprocess[k] = res.variables[k];\n        });\n        return res;\n    };\n    try {\n        console.log(\'attempt to read preprocess file (which may not exist): \' + pURL);\n        res = read((await _mithril2.default.request(pURL)));\n    } catch (_) {\n        console.log("Ok, preprocess not found, try to RUN THE PREPROCESSAPP");\n        var url = ROOK_SVC_URL + \'preprocessapp\';\n        var json_input;\n        if (IS_D3M_DOMAIN) {\n            // For D3M inputs, change the preprocess input data\n            //\n            json_input = { data: d3mData, datastub: d3mDataName };\n        } else {\n            json_input = { data: dataloc, target: targetloc, datastub: datastub };\n        }\n\n        console.log(\'json_input: \', json_input);\n        console.log(\'url: \', url);\n        var data = new FormData();\n        try {\n            res = read((await _mithril2.default.request({ method: \'POST\', url: url, data: json_input })));\n        } catch (_) {\n            console.log(\'preprocess failed\');\n            alert(\'preprocess failed. ending user session.\');\n            endsession();\n        }\n    }\n\n    console.log("is this preprocess?");\n    console.log(res);\n    console.log(preprocess);\n\n    // 9. Build allNodes[] using preprocessed information\n    var vars = Object.keys(preprocess);\n    // temporary values for hold that correspond to histogram bins\n    hold = [.6, .2, .9, .8, .1, .3, .4];\n    for (var i = 0; i < vars.length; i++) {\n        // valueKey[i] = vars[i].attributes.name.nodeValue;\n        // lablArray[i] = varsXML[i].getElementsByTagName("labl").length == 0 ?\n        // "no label" :\n        // varsXML[i].getElementsByTagName("labl")[0].childNodes[0].nodeValue;\n        // let datasetcount = d3.layout.histogram()\n        //     .bins(barnumber).frequency(false)\n        //     ([0, 0, 0, 0, 0]);\n        valueKey[i] = vars[i];\n        lablArray[i] = "no label";\n        // contains all the preprocessed data we have for the variable, as well as UI data pertinent to that variable,\n        // such as setx values (if the user has selected them) and pebble coordinates\n        var obj = {\n            id: i,\n            reflexive: false,\n            name: valueKey[i],\n            labl: lablArray[i],\n            data: [5, 15, 20, 0, 5, 15, 20],\n            count: hold,\n            nodeCol: colors(i),\n            baseCol: colors(i),\n            strokeColor: _plots.selVarColor,\n            strokeWidth: "1",\n            subsetplot: false,\n            subsetrange: ["", ""],\n            setxplot: false,\n            setxvals: ["", ""],\n            grayout: false,\n            group1: false,\n            group2: false,\n            forefront: false\n        };\n        jQuery.extend(true, obj, preprocess[valueKey[i]]);\n        allNodes.push(obj);\n    }\n\n    // 10. Add datadocument information to allNodes (when in IS_D3M_DOMAIN)\n    if (!swandive) {\n        var datavars = datadocument_columns;\n        datavars.forEach(function (v, i) {\n            var myi = findNodeIndex(v.colName);\n            allNodes[myi] = Object.assign(allNodes[myi], { d3mDescription: v });\n        });\n        console.log(allNodes);\n    }\n\n    // 10b. Call problem discovery\n    // Requires that `res` built in 8. above still exists.  Should make this better.\n    if (!swandive) {\n        exports.disco = disco = discovery(res);\n\n        // Kick off discovery button as green for user guidance\n        $("#btnDiscovery").removeClass("btn-default");\n        $("#btnDiscovery").addClass("btn-success"); // Would be better to attach this as a class at creation, but don\'t see where it is created\n\n        console.log(disco);\n    }\n\n    // 11. Call layout() and start up\n    layout(false, true);\n    IS_D3M_DOMAIN ? zPop() : dataDownload();\n}\n\n/**\n   called on app start\n   @param {string} fileid\n   @param {string} hostname\n   @param {string} ddiurl\n   @param {string} dataurl\n   @param {string} apikey\n*/\nfunction main(fileid, hostname, ddiurl, dataurl, apikey) {\n    if (PRODUCTION && fileid === \'\') {\n        var msg = \'Error: No fileid has been provided.\';\n        alert(msg);\n        throw new Error(msg);\n    }\n\n    var dataverseurl = hostname ? \'https://\' + hostname : PRODUCTION ? DATAVERSE_URL : \'http://localhost:8080\';\n    // if file id supplied, assume we are dealing with dataverse and cook a standard dataverse data access url\n    // with the fileid supplied and the hostname we have supplied or configured\n    dataurl = fileid && !dataurl ? dataverseurl + \'/api/access/datafile/\' + fileid + \'?key=\' + apikey : dataurl;\n    cdb(\'--dataurl: \' + dataurl);\n    cdb(\'--dataverseurl: \' + dataverseurl);\n\n    var tempWidth = d3.select(\'#main.left\').style(\'width\');\n    exports.width = width = tempWidth.substring(0, tempWidth.length - 2);\n    exports.height = height = $(window).height() - 120; // hard code header, footer, and bottom margin\n\n    exports.estimateLadda = estimateLadda = Ladda.create(byId("btnEstimate"));\n    exports.discoveryLadda = discoveryLadda = Ladda.create(byId("btnSubmitDisc"));\n    svg = d3.select("#whitespace");\n\n    // indicators for showing membership above arcs\n    // let indicator = (degree) => d3.svg.circle()\n    //     .cx( RADIUS )//(RADIUS+35) * Math.sin(degree))\n    //     .cy( RADIUS )//(RADIUS+35) * Math.cos(degree))\n    //     .r(3);\n    // ind1 = indicator(1);\n    // ind2 = indicator(1.2);\n\n    // from .csv\n    var hold = [],\n        lablArray = [];\n\n    // assume locations are consistent based on d3m directory structure\n\n    var d3mRootPath = \'\';\n    var d3mDataName = \'\';\n    var d3mData = null;\n    var d3mPreprocess = \'\';\n    var d3mPS = \'\';\n    var d3mDS = \'\';\n\n    // default to Fearon Laitin\n    var data = \'data/\' + (false ? \'PUMS5small\' : \'fearonLaitin\');\n    var metadataurl = ddiurl || (fileid ? dataverseurl + \'/api/meta/datafile/\' + fileid : data + \'.xml\');\n    // read pre-processed metadata and data\n    var pURL = dataurl ? dataurl + \'&format=prep\' : data + \'.json\';\n\n    if (IS_D3M_DOMAIN) {\n        pURL = d3mPreprocess;\n    } else if (!PRODUCTION) {\n        zparams.zdataurl = \'data/fearonLaitin.tsv\';\n    }\n    load(hold, lablArray, d3mRootPath, d3mDataName, d3mPreprocess, d3mData, d3mPS, d3mDS, pURL);\n}\n\nvar $fill = function $fill(obj, op, d1, d2) {\n    return d3.select(obj).transition().attr(\'fill-opacity\', op).delay(d1).duration(d2);\n};\nvar fill = function fill(d, id, op, d1, d2) {\n    return $fill(\'#\' + id + d.id, op, d1, d2);\n};\nvar fillThis = function fillThis(self, op, d1, d2) {\n    return $fill(self, op, d1, d2);\n};\n\n/**\n   deletes the item at index from array.\n   if object is provided, deletes first instance of object from array.\n   @param {Object[]} arr - array\n   @param {number} idx - index\n   @param {Object} [obj] - object\n*/\nfunction del(arr, idx, obj) {\n    idx = obj ? arr.indexOf(obj) : idx;\n    idx > -1 && arr.splice(idx, 1);\n}\n\n/** needs doc */\nfunction zparamsReset(text) {\n    \'zdv zcross ztime znom\'.split(\' \').forEach(function (x) {\n        return del(zparams[x], -1, text);\n    });\n}\n\nfunction setup_svg(svg) {\n    svg.append("svg:defs").append("svg:marker").attr("id", "group1-arrow").attr(\'viewBox\', \'0 -5 15 15\').attr("refX", 2.5).attr("refY", 0).attr("markerWidth", 3).attr("markerHeight", 3).attr("orient", "auto").append("path").attr(\'d\', \'M0,-5L10,0L0,5\').style("fill", gr1Color);\n    svg.append("svg:defs").append("svg:marker").attr("id", "group2-arrow").attr(\'viewBox\', \'0 -5 15 15\').attr("refX", 2.5).attr("refY", 0).attr("markerWidth", 3).attr("markerHeight", 3).attr("orient", "auto").append("path").attr(\'d\', \'M0,-5L10,0L0,5\').style("fill", gr2Color);\n    // define arrow markers for graph links\n    svg.append(\'svg:defs\').append(\'svg:marker\').attr(\'id\', \'end-arrow\').attr(\'viewBox\', \'0 -5 10 10\').attr(\'refX\', 6).attr(\'markerWidth\', 3).attr(\'markerHeight\', 3).attr(\'orient\', \'auto\').append(\'svg:path\').attr(\'d\', \'M0,-5L10,0L0,5\').style(\'fill\', \'#000\');\n    svg.append(\'svg:defs\').append(\'svg:marker\').attr(\'id\', \'start-arrow\').attr(\'viewBox\', \'0 -5 10 10\').attr(\'refX\', 4).attr(\'markerWidth\', 3).attr(\'markerHeight\', 3).attr(\'orient\', \'auto\').append(\'svg:path\').attr(\'d\', \'M10,-5L0,0L10,5\').style(\'fill\', \'#000\');\n\n    var line = svg.append("line").style(\'fill\', \'none\').style(\'stroke\', gr1Color).style(\'stroke-width\', 5).attr("marker-end", "url(#group1-arrow)");\n    var line2 = svg.append("line").style(\'fill\', \'none\').style(\'stroke\', gr2Color).style(\'stroke-width\', 5).attr("marker-end", "url(#group2-arrow)");\n    var visbackground = svg.append("svg").attr("width", width).attr("height", height);\n    visbackground.append("path") // note lines, are behind group hulls of which there is a white and colored semi transparent layer\n    .attr("id", \'gr1background\').style("fill", \'#ffffff\').style("stroke", \'#ffffff\').style("stroke-width", 2.5 * RADIUS).style(\'stroke-linejoin\', \'round\').style("opacity", 1);\n    var vis2background = svg.append("svg").attr("width", width).attr("height", height);\n    vis2background.append("path").attr("id", \'gr1background\').style("fill", \'#ffffff\').style("stroke", \'#ffffff\').style("stroke-width", 2.5 * RADIUS).style(\'stroke-linejoin\', \'round\').style("opacity", 1);\n    var vis = svg.append("svg").attr("width", width).attr("height", height);\n    vis.append("path").attr("id", \'gr1hull\').style("fill", gr1Color).style("stroke", gr1Color).style("stroke-width", 2.5 * RADIUS).style(\'stroke-linejoin\', \'round\');\n    var vis2 = svg.append("svg").attr("width", width).attr("height", height);\n    vis2.append("path").style("fill", gr2Color).style("stroke", gr2Color).style("stroke-width", 2.5 * RADIUS).style(\'stroke-linejoin\', \'round\');\n    // line displayed when dragging new nodes\n    var drag_line = svg.append(\'svg:path\').attr(\'class\', \'link dragline hidden\').attr(\'d\', \'M0,0L0,0\');\n    // handles to link and node element groups\n    var path = svg.append(\'svg:g\').selectAll(\'path\'),\n        circle = svg.append(\'svg:g\').selectAll(\'g\');\n    return [line, line2, visbackground, vis2background, vis, vis2, drag_line, path, circle];\n}\n\n/** needs doc */\nfunction layout(v, v2) {\n    var myValues = [];\n    exports.nodes = nodes = [];\n    exports.links = links = [];\n\n    var _setup_svg = setup_svg(svg),\n        _setup_svg2 = _slicedToArray(_setup_svg, 9),\n        line = _setup_svg2[0],\n        line2 = _setup_svg2[1],\n        visbackground = _setup_svg2[2],\n        vis2background = _setup_svg2[3],\n        vis = _setup_svg2[4],\n        vis2 = _setup_svg2[5],\n        drag_line = _setup_svg2[6],\n        path = _setup_svg2[7],\n        circle = _setup_svg2[8];\n\n    if (v == layoutAdd || v == layoutMove) {\n        for (var j = 0; j < zparams.zvars.length; j++) {\n            var ii = findNodeIndex(zparams.zvars[j]);\n            if (allNodes[ii].grayout) continue;\n            nodes.push(allNodes[ii]);\n            var selectMe = zparams.zvars[j].replace(/\\W/g, "_");\n            selectMe = "#".concat(selectMe);\n            d3.select(selectMe).style(\'background-color\', function () {\n                return hexToRgba(nodes[j].strokeColor);\n            });\n        }\n\n        for (var j = 0; j < zparams.zedges.length; j++) {\n            var mysrc = nodeIndex(zparams.zedges[j][0]);\n            var mytgt = nodeIndex(zparams.zedges[j][1]);\n            links.push({\n                source: nodes[mysrc],\n                target: nodes[mytgt],\n                left: false,\n                right: true\n            });\n        }\n    } else {\n        if (IS_D3M_DOMAIN) {\n            //nodes = [findNode(mytarget)];               // Only add dependent variable on startup\n            exports.nodes = nodes = allNodes.slice(1, allNodes.length); // Add all but first variable on startup (assumes 0 position is d3m index variable)\n            for (var _j = 0; _j < nodes.length; _j++) {\n                //populate zvars array\n                if (nodes[_j].name != mytarget) {\n                    nodes[_j].group1 = true;\n                    zparams.zgroup1.push(nodes[_j].name); // write all names (except d3m index and the dependent variable) to zgroup1 array\n                };\n            };\n        } else if (allNodes.length > 2) {\n            exports.nodes = nodes = [allNodes[0], allNodes[1], allNodes[2]];\n            exports.links = links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }, {\n                source: nodes[0],\n                target: nodes[2],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 2) {\n            exports.nodes = nodes = [allNodes[0], allNodes[1]];\n            exports.links = links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 1) {\n            exports.nodes = nodes = [allNodes[0]];\n        } else {\n            alert("There are zero variables in the metadata.");\n            return;\n        }\n    }\n\n    panelPlots(); // after nodes is populated, add subset and (if !IS_D3M_DOMAIN) setx panels\n\n    var force = d3.layout.force().nodes(nodes).links(links).size([width, height]).linkDistance(150).charge(-800).on(\'tick\', tick);\n\n    // mouse event vars\n    var selected_node = null,\n        selected_link = null,\n        mousedown_link = null,\n        mousedown_node = null,\n        mouseup_node = null;\n\n    function resetMouseVars() {\n        mousedown_node = null;\n        mouseup_node = null;\n        mousedown_link = null;\n    }\n\n    // update force layout (called automatically each iteration)\n    function tick() {\n        function findcoords(findnames, allnames, coords, lengthen) {\n            var fcoords = new Array(findnames.length); // found coordinates\n            var addlocation = 0;\n            if (findnames.length > 0) {\n                for (var j = 0; j < findnames.length; j++) {\n                    addlocation = allnames.indexOf(findnames[j]);\n                    fcoords[j] = coords[addlocation];\n                };\n            };\n\n            if (lengthen) {\n                // d3.geom.hull returns null for two points, and fails if three points are in a line,\n                // so this puts a couple points slightly off the line for two points, or around a singleton.\n                if (fcoords.length == 2) {\n                    var deltax = fcoords[0][0] - fcoords[1][0];\n                    var deltay = fcoords[0][1] - fcoords[1][1];\n                    fcoords.push([(fcoords[0][0] + fcoords[1][0]) / 2 + deltay / 20, (fcoords[0][1] + fcoords[1][1]) / 2 + deltax / 20]);\n                    fcoords.push([(fcoords[0][0] + fcoords[1][0]) / 2 - deltay / 20, (fcoords[0][1] + fcoords[1][1]) / 2 - deltax / 20]);\n                }\n                if (fcoords.length == 1) {\n                    var delta = RADIUS * 0.2;\n                    fcoords.push([fcoords[0][0] + delta, fcoords[0][1]]);\n                    fcoords.push([fcoords[0][0] - delta, fcoords[0][1]]);\n                    fcoords.push([fcoords[0][0], fcoords[0][1] + delta]);\n                    fcoords.push([fcoords[0][0], fcoords[0][1] - delta]);\n                }\n            }\n            return fcoords;\n        };\n\n        // d3.geom.hull returns null for two points, and fails if three points are in a line,\n        // so this puts a couple points slightly off the line for two points, or around a singleton.\n        function lengthencoords(coords) {\n            if (coords.length == 2) {\n                var deltax = coords[0][0] - coords[1][0];\n                var deltay = coords[0][1] - coords[1][1];\n                coords.push([(coords[0][0] + coords[1][0]) / 2 + deltay / 20, (coords[0][1] + coords[1][1]) / 2 + deltax / 20]);\n                coords.push([(coords[0][0] + coords[1][0]) / 2 - deltay / 20, (coords[0][1] + coords[1][1]) / 2 - deltax / 20]);\n            }\n            if (coords.length == 1) {\n                var delta = RADIUS * 0.2;\n                coords.push([coords[0][0] + delta, coords[0][1]]);\n                coords.push([coords[0][0] - delta, coords[0][1]]);\n                coords.push([coords[0][0], coords[0][1] + delta]);\n                coords.push([coords[0][0], coords[0][1] - delta]);\n            }\n            return coords;\n        };\n\n        var coords = nodes.map(function (d) {\n            return [d.x, d.y];\n        });\n        var gr1coords = findcoords(zparams.zgroup1, zparams.zvars, coords, true);\n        var gr2coords = findcoords(zparams.zgroup2, zparams.zvars, coords, true);\n        var depcoords = findcoords(zparams.zdv, zparams.zvars, coords, false);\n\n        // draw convex hull around independent variables, if three or more coordinates given\n        // note, d3.geom.hull returns null if shorter coordinate set than 3,\n        // so findcoords() function has option to lengthen the coordinates returned to bypass this\n        if (gr1coords.length > 2) {\n            line.style("opacity", 1);\n            visbackground.style("opacity", 1);\n            vis.style("opacity", 0.3);\n            var myhull = d3.geom.hull(gr1coords);\n\n            vis.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n            visbackground.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n\n            //var p = d3.geom.polygon(indcoords).centroid();  // Seems to go strange sometimes\n            var p = jamescentroid(gr1coords);\n\n            if (depcoords.length > 0) {\n                var q = depcoords[0]; // Note, only using first dep var currently\n                //var r = findboundary(p,q,gr1coords);        // An approach to find the exact boundary, not presently working\n                var ldeltaX = q[0] - p[0],\n                    ldeltaY = q[1] - p[1],\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY),\n                    lnormX = 0,\n                    lnormY = 0,\n                    lsourcePadding = RADIUS + 7,\n                    ltargetPadding = RADIUS + 10;\n\n                if (ldist > 0) {\n                    lnormX = ldeltaX / ldist;\n                    lnormY = ldeltaY / ldist;\n                };\n\n                line.attr("x1", p[0] + lsourcePadding * lnormX) // or r[0] if findboundary works\n                .attr("y1", p[1] + lsourcePadding * lnormY) // or r[1] if findboundary works\n                .attr("x2", q[0] - ltargetPadding * lnormX).attr("y2", q[1] - ltargetPadding * lnormY);\n            };\n\n            // group members attract each other, repulse non-group members\n            nodes.forEach(function (n) {\n                var sign = n.group1 ? 1 : -1; //was: Math.sign( zparams.zgroup1.indexOf(n.name) +0.5 );  // 1 if n in group, -1 if n not in group;\n                var ldeltaX = p[0] - n.x,\n                    ldeltaY = p[1] - n.y,\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY);\n                lnormX = 0, lnormY = 0;\n\n                if (ldist > 0) {\n                    lnormX = ldeltaX / ldist;\n                    lnormY = ldeltaY / ldist;\n                };\n\n                n.x += Math.min(lnormX, ldeltaX / 100) * k * sign * force.alpha();\n                n.y += Math.min(lnormY, ldeltaY / 100) * k * sign * force.alpha();\n            });\n        } else {\n            visbackground.style("opacity", 0);\n            vis.style("opacity", 0);\n            line.style("opacity", 0);\n        };\n\n        if (gr2coords.length > 2) {\n            line2.style("opacity", 1);\n            vis2background.style("opacity", 1);\n            vis2.style("opacity", 0.3);\n            var myhull = d3.geom.hull(gr2coords);\n            vis2.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n            vis2background.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n\n            //var p = d3.geom.polygon(indcoords).centroid();  // Seems to go strange sometimes\n            var p = jamescentroid(gr2coords);\n\n            if (depcoords.length > 0) {\n                var q = depcoords[0]; // Note, only using first dep var currently\n                var ldeltaX = q[0] - p[0],\n                    ldeltaY = q[1] - p[1],\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY),\n                    lnormX = ldeltaX / ldist,\n                    lnormY = ldeltaY / ldist,\n                    lsourcePadding = RADIUS + 7,\n                    ltargetPadding = RADIUS + 10;\n\n                line2.attr("x1", p[0] + lsourcePadding * lnormX).attr("y1", p[1] + lsourcePadding * lnormY).attr("x2", q[0] - ltargetPadding * lnormX).attr("y2", q[1] - ltargetPadding * lnormY);\n            };\n\n            // group members attract each other, repulse non-group members\n            nodes.forEach(function (n) {\n                var sign = n.group2 ? 1 : -1; // was: Math.sign( zparams.zgroup2.indexOf(n.name) +0.5 );  // 1 if n in group, -1 if n not in group;\n                var ldeltaX = p[0] - n.x,\n                    ldeltaY = p[1] - n.y,\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY),\n                    lnormX = 0,\n                    lnormY = 0;\n\n                if (ldist > 0) {\n                    lnormX = ldeltaX / ldist;\n                    lnormY = ldeltaY / ldist;\n                };\n\n                n.x += Math.min(lnormX, ldeltaX / 100) * k * sign * force.alpha();\n                n.y += Math.min(lnormY, ldeltaY / 100) * k * sign * force.alpha();\n            });\n        } else {\n            vis2background.style("opacity", 0);\n            vis2.style("opacity", 0);\n            line2.style("opacity", 0);\n        };\n\n        // draw directed edges with proper padding from node centers\n        path.attr(\'d\', function (d) {\n            var deltaX = d.target.x - d.source.x,\n                deltaY = d.target.y - d.source.y,\n                dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n                normX = deltaX / dist,\n                normY = deltaY / dist,\n                sourcePadding = d.left ? RADIUS + 5 : RADIUS,\n                targetPadding = d.right ? RADIUS + 5 : RADIUS,\n                sourceX = d.source.x + sourcePadding * normX,\n                sourceY = d.source.y + sourcePadding * normY,\n                targetX = d.target.x - targetPadding * normX,\n                targetY = d.target.y - targetPadding * normY;\n            return \'M\' + sourceX + \',\' + sourceY + \'L\' + targetX + \',\' + targetY;\n        });\n\n        circle.attr(\'transform\', function (d) {\n            return \'translate(\' + d.x + \',\' + d.y + \')\';\n        });\n\n        circle.selectAll(\'circle\') // Shrink/expand pebbles that join/leave groups\n        .transition().duration(100).attr(\'r\', function (d) {\n            return setPebbleRadius(d);\n        });\n    }\n\n    // update graph (called when needed)\n    exports.restart = _restart = function restart($links) {\n        if (is_results_mode) {\n            return;\n        }\n\n        exports.links = links = $links || links;\n        // nodes.id is pegged to allNodes, i.e. the order in which variables are read in\n        // nodes.index is floating and depends on updates to nodes.  a variables index changes when new variables are added.\n        circle.call(force.drag);\n        if (forcetoggle[0] == "true") {\n            force.gravity(0.1);\n            force.charge(function (d) {\n                return setPebbleCharge(d);\n            });\n            force.start();\n            force.linkStrength(1);\n            exports.k = k = 4; // strength parameter for group attraction/repulsion\n            if (zparams.zgroup1.length > 0 & zparams.zgroup2.length > 0) {\n                // scale down by number of active groups\n                exports.k = k = 2.5;\n            }\n        } else {\n            force.gravity(0);\n            force.charge(0);\n            force.linkStrength(0);\n            exports.k = k = 0;\n        }\n        force.resume();\n\n        // path (link) group\n        path = path.data(links);\n\n        var marker = function marker(side) {\n            return function (x) {\n                var kind = side === \'left\' ? \'start\' : \'end\';\n                return is_explore_mode ? \'url(#circle)\' : x[side] ? \'url(#\' + kind + \'-arrow)\' : \'\';\n            };\n        };\n\n        // update existing links\n        // VJD: dashed links between pebbles are "selected". this is disabled for now\n        path.classed(\'selected\', function (x) {\n            return null;\n        }).style(\'marker-start\', marker(\'left\')).style(\'marker-end\', marker(\'right\'));\n\n        // add new links\n        path.enter().append(\'svg:path\').attr(\'class\', \'link\').classed(\'selected\', function (x) {\n            return null;\n        }).style(\'marker-start\', marker(\'left\')).style(\'marker-end\', marker(\'right\')).on(\'mousedown\', function (d) {\n            // do we ever need to select a link? make it delete..\n            var obj = JSON.stringify(d);\n            for (var j = 0; j < links.length; j++) {\n                if (obj === JSON.stringify(links[j])) del(links, j);\n            }\n        });\n\n        // remove old links\n        path.exit().remove();\n\n        // circle (node) group\n        circle = circle.data(nodes, function (x) {\n            return x.id;\n        });\n\n        // update existing nodes (reflexive & selected visual states)\n        // d3.rgb is the function adjusting the color here\n        circle.selectAll(\'circle\').classed(\'reflexive\', function (x) {\n            return x.reflexive;\n        }).style(\'fill\', function (x) {\n            return d3.rgb(x.nodeCol);\n        }).style(\'stroke\', function (x) {\n            return d3.rgb(x.strokeColor);\n        }).style(\'stroke-width\', function (x) {\n            return x.strokeWidth;\n        });\n\n        // add new nodes\n        var g = circle.enter().append(\'svg:g\').attr(\'id\', function (x) {\n            return x.name + \'biggroup\';\n        });\n\n        // add plot\n        g.each(function (d) {\n            d3.select(this);\n            if (d.plottype == \'continuous\') (0, _plots.densityNode)(d, this);else if (d.plottype == \'bar\') (0, _plots.barsNode)(d, this);\n        });\n\n        var append = function append(str, attr) {\n            return function (x) {\n                return str + x[attr || \'id\'];\n            };\n        };\n\n        g.append("path").attr("id", append(\'dvArc\')).attr("d", arc3).style("fill", dvColor).attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, \'dvText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, \'dvText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            setColors(d, dvColor);\n            legend(dvColor);\n            _restart();\n            d.group1 = d.group2 = false;\n        });\n\n        g.append("text").attr("id", append(\'dvText\')).attr("x", 6).attr("dy", 11.5).attr("fill-opacity", 0).append("textPath").attr("xlink:href", append(\'#dvArc\')).text("Dep Var");\n\n        g.append("path").attr("id", append(\'nomArc\')).attr("d", arc4).style("fill", nomColor).attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            if (d.defaultNumchar == "character") return;\n            fillThis(this, .3, 0, 100);\n            fill(d, "nomText", .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            if (d.defaultNumchar == "character") return;\n            fillThis(this, 0, 100, 500);\n            fill(d, "nomText", 0, 100, 500);\n        }).on(\'click\', function (d) {\n            if (d.defaultNumchar == "character") return;\n            setColors(d, nomColor);\n            legend(nomColor);\n            _restart();\n        });\n\n        g.append("text").attr("id", append("nomText")).attr("x", 6).attr("dy", 11.5).attr("fill-opacity", 0).append("textPath").attr("xlink:href", append("#nomArc")).text("Nominal");\n\n        g.append("path").attr("id", append(\'grArc\')).attr("d", arc1).style("fill", gr1Color).attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fill(d, "gr1indicator", .3, 0, 100);\n            fill(d, "gr2indicator", .3, 0, 100);\n            fillThis(this, .3, 0, 100);\n            fill(d, \'grText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fill(d, "gr1indicator", 0, 100, 500);\n            fill(d, "gr2indicator", 0, 100, 500);\n            fillThis(this, 0, 100, 500);\n            fill(d, \'grText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            //d.group1 = !d.group1;      // This might be easier, but currently set in setColors()\n            setColors(d, gr1Color);\n            legend(gr1Color);\n            _restart();\n        });\n\n        g.append("path").attr("id", append(\'gr1indicator\')).attr("d", arcInd1).style("fill", gr1Color) // something like: zparams.zgroup1.indexOf(node.name) > -1  ?  #FFFFFF : gr1Color)\n        .attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, "grArc", .1, 0, 100);\n            fill(d, \'grText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, "grArc", 0, 100, 500);\n            fill(d, \'grText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            //d.group1 = !d.group1;      // This might be easier, but currently set in setColors()\n            setColors(d, gr1Color);\n            legend(gr1Color);\n            _restart();\n        });\n\n        g.append("path").attr("id", append(\'gr2indicator\')).attr("d", arcInd2).style("fill", gr2Color) // something like: zparams.zgroup1.indexOf(node.name) > -1  ?  #FFFFFF : gr1Color)\n        .attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, "grArc", .1, 0, 100);\n            fill(d, \'grText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, "grArc", 0, 100, 500);\n            fill(d, \'grText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            //d.group2 = !d.group2;      // This might be easier, but currently set in setColors()\n            setColors(d, gr2Color);\n            legend(gr2Color);\n            _restart();\n        });\n\n        g.append("text").attr("id", append(\'grText\')).attr("x", 6).attr("dy", 11.5).attr("fill-opacity", 0).append("textPath").attr("xlink:href", append(\'#grArc\')).text("Groups");\n\n        g.append(\'svg:circle\').attr(\'class\', \'node\').attr(\'r\', function (d) {\n            return setPebbleRadius(d);\n        }).style(\'pointer-events\', \'inherit\').style(\'fill\', function (d) {\n            return d.nodeCol;\n        }).style(\'opacity\', "0.5").style(\'stroke\', function (d) {\n            return d3.rgb(d.strokeColor).toString();\n        }).classed(\'reflexive\', function (d) {\n            return d.reflexive;\n        }).on(\'dblclick\', function (_) {\n            d3.event.stopPropagation(); // stop click from bubbling\n            exports.summaryHold = summaryHold = true;\n        }).on(\'contextmenu\', function (d) {\n            // right click on node\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n\n            rightClickLast = true;\n            mousedown_node = d;\n            selected_node = mousedown_node === selected_node ? null : mousedown_node;\n            selected_link = null;\n\n            // reposition drag line\n            drag_line.style(\'marker-end\', is_explore_mode ? \'url(#end-marker)\' : \'url(#end-arrow)\').classed(\'hidden\', false).attr(\'d\', \'M\' + mousedown_node.x + \',\' + mousedown_node.y + \'L\' + mousedown_node.x + \',\' + mousedown_node.y);\n\n            svg.on(\'mousemove\', mousemove);\n            _restart();\n        }).on(\'mouseup\', function (d) {\n            d3.event.stopPropagation();\n\n            if (rightClickLast) {\n                rightClickLast = false;\n                return;\n            }\n            if (!mousedown_node) return;\n\n            // needed by FF\n            drag_line.classed(\'hidden\', true).style(\'marker-end\', \'\');\n\n            // check for drag-to-self\n            mouseup_node = d;\n            if (mouseup_node === mousedown_node) {\n                resetMouseVars();\n                return;\n            }\n\n            // unenlarge target node\n            d3.select(this).attr(\'transform\', \'\');\n\n            // add link to graph (update if exists)\n            // NB: links are strictly source < target; arrows separately specified by booleans\n            var source, target, direction;\n            if (mousedown_node.id < mouseup_node.id) {\n                source = mousedown_node;\n                target = mouseup_node;\n                direction = \'right\';\n            } else {\n                source = mouseup_node;\n                target = mousedown_node;\n                direction = \'left\';\n            }\n\n            var link = links.filter(function (x) {\n                return x.source == source && x.target == target;\n            })[0];\n            if (link) {\n                link[direction] = true;\n            } else {\n                link = {\n                    source: source,\n                    target: target,\n                    left: false,\n                    right: false\n                };\n                link[direction] = true;\n                links.push(link);\n            }\n\n            // select new link\n            selected_link = link;\n            selected_node = null;\n            svg.on(\'mousemove\', null);\n\n            resetMouseVars();\n            _restart();\n        });\n\n        // show node names\n        g.append(\'svg:text\').attr(\'x\', 0).attr(\'y\', 15).attr(\'class\', \'id\').text(function (d) {\n            return d.name;\n        });\n\n        // show summary stats on mouseover\n        // SVG doesn\'t support text wrapping, use html instead\n        g.selectAll("circle.node").on("mouseover", function (d) {\n            exports.leftTabHidden = leftTabHidden = leftTab;\n            setLeftTab(\'Summary\');\n            varSummary(d);\n            d.forefront = true;\n\n            byId(\'transformations\').setAttribute(\'style\', \'display:block\');\n            byId("transSel").selectedIndex = d.id;\n            transformVar = valueKey[d.id];\n\n            fill(d, "dvArc", .1, 0, 100);\n            fill(d, "dvText", .5, 0, 100);\n            fill(d, "grArc", .1, 0, 100);\n            fill(d, "grText", .5, 0, 100);\n            //fill(d, "gr1indicator", .1, 0, 100);\n            //fill(d, "gr1indicatorText", .1, 0, 100);\n            //fill(d, "gr2indicator", .1, 0, 100);\n            //fill(d, "gr2indicatorText", .1, 0, 100);\n\n            if (d.defaultNumchar == "numeric") {\n                fill(d, "nomArc", .1, 0, 100);\n                fill(d, "nomText", .5, 0, 100);\n            }\n            fill(d, "csArc", .1, 0, 100);\n            fill(d, "csText", .5, 0, 100);\n            fill(d, "timeArc", .1, 0, 100);\n            fill(d, "timeText", .5, 0, 100);\n\n            _mithril2.default.redraw();\n        }).on(\'mouseout\', function (d) {\n            d.forefront = false;\n            summaryHold || setLeftTab(leftTabHidden);\n            \'csArc csText timeArc timeText dvArc dvText nomArc nomText grArc grText\'.split(\' \').map(function (x) {\n                return fill(d, x, 0, 100, 500);\n            });\n            _mithril2.default.redraw();\n        });\n\n        // the transformation variable list is silently updated as pebbles are added/removed\n        d3.select("#transSel").selectAll(\'li\').remove();\n\n        d3.select("#transSel").selectAll(\'li\').data(nodes.map(function (x) {\n            return x.name;\n        })) // set to variables in model space as they\'re added\n        .enter().append("li").text(function (d) {\n            return d;\n        });\n\n        if (!IS_D3M_DOMAIN) {\n            $(\'#transSel li\').click(function (evt) {\n                // if \'interaction\' is the selected function, don\'t show the function list again\n                if (selInteract) {\n                    var n = $(\'#tInput\').val().concat($(this).text());\n                    $(\'#tInput\').val(n);\n                    evt.stopPropagation();\n                    var t = transParse(n = n);\n                    if (!t) return;\n                    $(this).parent().fadeOut(100);\n                    transform(n = t.slice(0, t.length - 1), t = t[t.length - 1], typeTransform = false);\n                    return;\n                }\n\n                $(\'#tInput\').val($(this).text());\n                $(this).parent().fadeOut(100);\n                $(\'#transList\').fadeIn(100);\n                evt.stopPropagation();\n            });\n        };\n\n        // remove old nodes\n        circle.exit().remove();\n        force.start();\n\n        // save workspaces\n        // console.log(\'ok ws\');\n        record_user_metadata();\n    };\n\n    function mousedown(d) {\n        // prevent I-bar on drag\n        d3.event.preventDefault();\n        // because :active only works in WebKit?\n        svg.classed(\'active\', true);\n        if (d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n        _restart();\n    }\n\n    function mousemove(d) {\n        if (!mousedown_node) return;\n        // update drag line\n        drag_line.attr(\'d\', \'M\' + mousedown_node.x + \',\' + mousedown_node.y + \'L\' + d3.mouse(this)[0] + \',\' + d3.mouse(this)[1]);\n    }\n\n    function mouseup(d) {\n        if (mousedown_node) {\n            drag_line.classed(\'hidden\', true).style(\'marker-end\', \'\');\n        }\n        // because :active only works in WebKit?\n        svg.classed(\'active\', false);\n        // clear mouse event vars\n        resetMouseVars();\n    }\n\n    // app starts here\n    svg.attr(\'id\', function () {\n        return "whitespace".concat(myspace);\n    }).attr(\'height\', height).attr(\'width\', width).on(\'mousedown\', function () {\n        mousedown(this);\n    }).on(\'mouseup\', function () {\n        mouseup(this);\n    });\n\n    d3.select(window).on(\'click\', function () {\n        // all clicks will bubble here unless event.stopPropagation()\n        $(\'#transList\').fadeOut(100);\n        $(\'#transSel\').fadeOut(100);\n    });\n\n    _restart(); // initializes force.layout()\n    fakeClick();\n\n    if (v2 & IS_D3M_DOMAIN) {\n        var click_ev = document.createEvent("MouseEvents");\n        // initialize the event\n        click_ev.initEvent("click", true /* bubble */, true /* cancelable */);\n        // trigger the event\n        var clickID = "dvArc" + findNodeIndex(mytarget);\n        byId(clickID).dispatchEvent(click_ev);\n    }\n}\n\nvar marginTopCarousel = exports.marginTopCarousel = 0;\nvar marginLeftCarousel = exports.marginLeftCarousel = 0;\n\nwindow.onresize = function () {\n    var carousel = document.getElementById(\'innercarousel\');\n    var container = document.getElementById(\'m0\');\n    var whitespace = document.getElementById(\'whitespace0\');\n\n    exports.marginTopCarousel = marginTopCarousel = (carousel.offsetHeight - whitespace.getAttribute("height") - 16) / 2;\n    exports.marginLeftCarousel = marginLeftCarousel = (carousel.offsetWidth - whitespace.getAttribute("width")) / 2;\n\n    container.style.marginTop = marginTopCarousel + \'px\';\n    container.style.marginLeft = marginLeftCarousel + \'px\';\n    container.style.height = \'calc(100% + \' + Math.abs(marginTopCarousel) + \'px)\';\n};\n\n/** needs doc */\nfunction find($nodes, name) {\n    for (var i in $nodes) {\n        if ($nodes[i].name == name) return $nodes[i].id;\n    }\n}\n\n/**\n returns id\n */\nfunction findNodeIndex(name, whole) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = allNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var node = _step.value;\n\n            if (node.name === name) return whole ? node : node.id;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n\n/** needs doc */\nfunction nodeIndex(nodeName) {\n    for (var i in nodes) {\n        if (nodes[i].name === nodeName) return i;\n    }\n}\n\n/** needs doc */\nfunction findNode(name) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = allNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var n = _step2.value;\n\n            if (n.name === name) return n;\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n}\n\n/** needs doc */\nfunction updateNode(id) {\n    var node = findNode(id);\n    if (node.grayout) return false;\n\n    var name = node.name;\n    var names = function names() {\n        return nodes.map(function (n) {\n            return n.name;\n        });\n    };\n    if (names().includes(name)) {\n        del(nodes, node.index);\n        links.filter(function (l) {\n            return l.source === node || l.target === node;\n        }).forEach(function (l) {\n            return del(links, -1, l);\n        });\n        zparamsReset(name);\n\n        // remove node name from group lists\n        node.group1 && del(zparams.zgroup1, -1, name);\n        node.group2 && del(zparams.zgroup2, -1, name);\n        node.group1 = node.group2 = false;\n\n        // node reset - perhaps this will become a hard reset back to all original allNode values?\n        node.nodeCol = node.baseCol;\n        node.strokeColor = _plots.selVarColor;\n        node.strokeWidth = \'1\';\n\n        borderState();\n    } else {\n        nodes.push(node);\n    }\n    zparams.zvars = names();\n    return true;\n}\n\n/**\n every time a variable in leftpanel is clicked, nodes updates and background color changes\n */\nfunction clickVar(elem) {\n    if (updateNode(elem)) {\n        // panelPlots(); is this necessary?\n        _restart();\n    }\n}\n\n// Used for left panel variable search\nvar matchedVariables = exports.matchedVariables = [];\nvar searchVariables = exports.searchVariables = function searchVariables(val) {\n    matchedVariables.length = 0;\n\n    var others = [],\n        match = function match(n, key) {\n        return n[key].toLowerCase().includes(val.toLowerCase());\n    };\n\n    allNodes.forEach(function (n) {\n        return match(n, \'name\') || match(n, \'labl\') ? matchedVariables.push(n.name) : others.push(n.name);\n    });\n    exports.valueKey = valueKey = matchedVariables.concat(others);\n\n    // Just because having every variable bordered all the time is not pleasant\n    if (val === \'\') matchedVariables.length = 0;\n};\n\n/**\n Retrieve the variable list from the preprocess data.\n This helps handle the new format and (temporarily)\n the older format in PRODUCTION (rp 8.14.2017)\n "new" response:\n {\n "dataset" : {...}\n "variables" : {\n "var1" : {...},\n (etc)\n }\n }\n "old" response:\n {\n "var1" : {...},\n (etc)\n }\n */\nfunction getVariableData(json) {\n    return json.hasOwnProperty(\'variables\') ? json.variables : json;\n}\n\n/**\n called by force button\n */\nfunction forceSwitch() {\n    exports.forcetoggle = forcetoggle = [forcetoggle[0] == \'true\' ? \'false\' : \'true\'];\n    if (forcetoggle[0] === "false") {\n        byId(\'btnForce\').setAttribute("class", "btn active");\n    } else {\n        byId(\'btnForce\').setAttribute("class", "btn btn-default");\n        fakeClick();\n    }\n}\n\n/** needs doc */\nfunction helpmaterials(type) {\n    if (type == "video") {\n        var win = window.open("http://2ra.vn/demos/d3mintegrationdemo.mp4", \'_blank\');\n        win.focus();\n    } else {\n        var win = window.open("http://2ra.vn/papers/tworavens-d3mguide.pdf", \'_blank\');\n        win.focus();\n    }\n    console.log(type);\n}\n\n/** needs doc */\nvar lockDescription = exports.lockDescription = function lockDescription(state) {\n    return exports.locktoggle = locktoggle = state;\n};\n\n/** needs doc */\nfunction zPop() {\n    if (dataurl) zparams.zdataurl = dataurl;\n    zparams.zmodelcount = modelCount;\n    zparams.zedges = [];\n    zparams.zvars = [];\n    zparams.znature = [];\n    for (var j = 0; j < nodes.length; j++) {\n        //populate zvars array\n        zparams.zvars.push(nodes[j].name);\n        zparams.znature.push(nodes[j].nature);\n        var temp = nodes[j].id;\n        zparams.zsetx[j] = allNodes[temp].setxvals;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n    }\n    for (var _j2 = 0; _j2 < links.length; _j2++) {\n        //populate zedges array\n        //correct the source target ordering for Zelig\n        var srctgt = links[_j2].left == false ? [links[_j2].source.name, links[_j2].target.name] : [links[_j2].target.name, links[_j2].source.name];\n        zparams.zedges.push(srctgt);\n    }\n}\n\n// when selected, the key/value [mode]: [pipelineID] is set.\nvar selectedPipeline = exports.selectedPipeline = {};\nvar setSelectedPipeline = exports.setSelectedPipeline = function setSelectedPipeline(result) {\n    selectedPipeline[currentMode] = result;\n    if (currentMode === \'model\') {\n        // the \'find\' function would have been nice here-- es6 only. Find pipeline with UID, then pass pipeline_id\n        var pipeline = pipelineTable.filter(function (row) {\n            return row[0] == result;\n        })[0];\n        resultsplotinit(pipeline[1]);\n    }\n};\n\nvar pipelineHeader = exports.pipelineHeader = [\'Hidden_UID\', \'PipelineID\', \'Metric\', \'Score\'];\nvar pipelineTable = exports.pipelineTable = void 0;\n\nfunction onPipelineCreate(PipelineCreateResult, rookpipe) {\n    // rpc GetExecutePipelineResults(PipelineExecuteResultsRequest) returns (stream PipelineExecuteResult) {}\n    estimateLadda.stop(); // stop spinner\n    console.log(PipelineCreateResult);\n\n    // change status of buttons for estimating problem and marking problem as finished\n    $("#btnEstimate").removeClass("btn-success");\n    $("#btnEstimate").addClass("btn-default");\n    $("#btnEndSession").removeClass("btn-default");\n    $("#btnEndSession").addClass("btn-success");\n\n    var context = apiSession(zparams.zsessionid);\n    for (var i = 0; i < PipelineCreateResult.length; i++) {\n        if (PipelineCreateResult[i].pipelineId in allPipelineInfo) {\n            allPipelineInfo[PipelineCreateResult[i].pipelineId] = Object.assign(allPipelineInfo[PipelineCreateResult[i].pipelineId], PipelineCreateResult[i]);\n        } else {\n            allPipelineInfo[PipelineCreateResult[i].pipelineId] = PipelineCreateResult[i];\n        }\n    }\n    console.log(allPipelineInfo);\n    // to get all pipeline ids: Object.keys(allPipelineInfo)\n\n    exports.pipelineTable = pipelineTable = [];\n    for (var key in allPipelineInfo) {\n        console.log(key);\n        console.log(allPipelineInfo[key]);\n\n        if (key == "rookpipe") {\n            // happens when multiple CreatePipelines calls have been made\n            continue;\n        }\n        // this will NOT report the pipeline to user if pipeline has failed, if pipeline is still running, or if it has not completed\n        if (allPipelineInfo[key].responseInfo.status.details == "Pipeline Failed") {\n            continue;\n        }\n        if (allPipelineInfo[key].progressInfo == "RUNNING") {\n            continue;\n        }\n\n        var myid = "";\n        var mymetric = "";\n        var myval = "";\n        console.log(key);\n        console.log(allPipelineInfo[key].progressInfo);\n        var myscores = [];\n        if (allPipelineInfo[key].progressInfo == "COMPLETED") {\n            myscores = allPipelineInfo[key].pipelineInfo.scores;\n            for (var i = 0; i < myscores.length; i++) {\n                //if(i==0) {myid=key;}\n                //   else myid="";\n                myid = key;\n                mymetric = myscores[i].metric;\n                myval = +myscores[i].value.toFixed(3);\n                pipelineTable.push([pipelineTable.length, myid, mymetric, myval]);\n            }\n        } else {\n            // if progressInfo is not "COMPLETED"\n            continue;\n        }\n    }\n\n    console.table(pipelineTable, [1, 2, 3]);\n\n    if (IS_D3M_DOMAIN) {\n        byId("btnSetx").click(); // Was "btnResults" - changing to simplify user experience for testing.\n    };\n\n    //adding rookpipe to allPipelineInfo\n    allPipelineInfo.rookpipe = rookpipe; // This is setting rookpipe for the entire table, but when there are multiple CreatePipelines calls, this is only recording latest values\n\n    // this initializes the results windows using the first pipeline ID\n    if (!swandive) {\n        resultsplotinit(pipelineTable[0][1]);\n    }\n    // VJD: these two functions are built and (I believe) functioning as intended. These exercise two core API calls that are currently unnecessary\n    //exportpipeline(pipelineTable[1][1]);\n    //listpipelines();\n\n    // VJD: this is a third core API call that is currently unnecessary\n    //let pipelineid = PipelineCreateResult.pipelineid;\n    // getexecutepipelineresults is the third to be called\n    //  makeRequest(D3M_SVC_URL + \'/getexecutepipelineresults\', {context, pipeline_ids: Object.keys(allPipelineInfo)});\n}\n\nfunction CreatePipelineData(predictors, depvar, aux) {\n    var context = apiSession(zparams.zsessionid);\n    var uriCsv = zparams.zd3mdata;\n    var uriJson = uriCsv.substring(0, uriCsv.lastIndexOf("/tables")) + "/datasetDoc.json";\n    var targetFeatures = [{ \'resource_id\': "0", \'feature_name\': depvar[0] }];\n    var predictFeatures = [];\n    for (var i = 0; i < predictors.length; i++) {\n        predictFeatures[i] = { \'resource_id\': "0", \'feature_name\': predictors[i] };\n    }\n    if (typeof aux === "undefined") {\n        //default behavior for creating pipeline data\n        return {\n            context: context,\n            dataset_uri: uriJson, // uriCsv is also valid, but not currently accepted by ISI TA2\n            task: d3mTaskType[d3mProblemDescription.taskType][1],\n            taskSubtype: d3mTaskSubtype[d3mProblemDescription.taskSubtype][1],\n            taskDescription: d3mProblemDescription.taskDescription,\n            output: "OUTPUT_TYPE_UNDEFINED", // valid values will come in future API\n            metrics: [d3mMetrics[d3mProblemDescription.metric][1]],\n            targetFeatures: targetFeatures,\n            /* Example:\n              "targetFeatures": [\n              {\n                  "resource_id": "0",\n                  "feature_name": "At_bats"\n              }\n              ],\n            */\n            predictFeatures: predictFeatures,\n            /* Example:\n              "predictReatures": [\n              {\n                "resource_id": "0",\n                "feature_name": "RBIs"\n              }\n              ],\n            */\n            maxPipelines: 5 //user to specify this eventually?\n        };\n    } else {\n        //creating pipeline data for problem discovery using aux inputs\n        return {\n            context: context,\n            dataset_uri: uriJson, // uriCsv is also valid, but not currently accepted by ISI TA2\n            task: aux.task,\n            taskSubtype: "TASK_SUBTYPE_UNDEFINED",\n            taskDescription: aux.description,\n            output: "OUTPUT_TYPE_UNDEFINED",\n            metrics: [aux.metrics],\n            targetFeatures: targetFeatures,\n            predictFeatures: predictFeatures,\n            maxPipelines: 1\n        };\n    }\n}\n\nfunction downloadIncomplete() {\n    if (PRODUCTION && zparams.zsessionid === \'\') {\n        alert(\'Warning: Data download is not complete. Try again soon.\');\n        return true;\n    }\n    return false;\n}\n\n/**\n    called by clicking \'Solve This Problem\' in model mode\n*/\nasync function estimate(btn) {\n    if (!IS_D3M_DOMAIN) {\n        if (downloadIncomplete()) {\n            return;\n        }\n\n        zPop();\n        // write links to file & run R CMD\n        // package the output as JSON\n        // add call history and package the zparams object as JSON\n        zparams.callHistory = callHistory;\n        zparams.allVars = valueKey.slice(10, 25); // because the URL is too long...\n\n        /* UNUSED\n        var selectorurlcall = ROOK_SVC_URL + "selectorapp";\n        function selectorSuccess(btn, json) {\n            d3.select("#ticker")\n                .text("Suggested variables and percent improvement on RMSE: " + json.vars);\n            cdb("selectorSuccess: ", json);\n        }\n        function selectorFail(btn) {\n            alert("Selector Fail");\n        }\n        */\n\n        estimateLadda.start(); // start spinner\n        var json = await makeRequest(ROOK_SVC_URL + \'zeligapp\', zparams);\n        if (!json) {\n            estimated = true;\n        } else {\n            var modCol = function modCol() {\n                d3.select("#modelView").selectAll("p").style(\'background-color\', hexToRgba(varColor));\n            };\n\n            allResults.push(json);\n            if (!estimated) byId("tabResults").removeChild(byId("resultsHolder"));\n\n            estimated = true;\n            d3.select("#tabResults").style("display", "block");\n\n            d3.select("#resultsView").style("display", "block");\n\n            d3.select("#modelView").style("display", "block");\n\n            // programmatic click on Results button\n            $("#btnSetx").trigger("click"); // Was "btnResults" - changing to simplify user experience for testing.\n\n            var model = "Model".concat(exports.modelCount = modelCount = modelCount + 1);\n\n            modCol();\n\n            d3.select("#modelView").insert("p", ":first-child") // top stack for results\n            .attr("id", model).text(model).style(\'background-color\', hexToRgba(_plots.selVarColor)).on("click", function () {\n                var a = this.style.backgroundColor.replace(/\\s*/g, "");\n                var b = hexToRgba(_plots.selVarColor).replace(/\\s*/g, "");\n                if (a.substr(0, 17) == b.substr(0, 17)) return; // escape function if displayed model is clicked\n                modCol();\n                d3.select(this).style(\'background-color\', hexToRgba(_plots.selVarColor));\n                viz(this.id);\n            });\n\n            var rCall = [json.call];\n            showLog(\'estimate\', rCall);\n\n            viz(model);\n        }\n    } else if (swandive) {\n        // IS_D3M_DOMAIN and swandive is true\n        zPop();\n        zparams.callHistory = callHistory;\n\n        var myvki = valueKey.indexOf(mytarget);\n        if (myvki != -1) {\n            del(valueKey, myvki);\n        }\n\n        estimateLadda.start(); // start spinner\n        var res = await makeRequest(D3M_SVC_URL + \'/CreatePipelines\', CreatePipelineData(valueKey, mytarget));\n        res && onPipelineCreate(res);\n    } else {\n        // we are in IS_D3M_DOMAIN no swandive\n        // rpc CreatePipelines(PipelineCreateRequest) returns (stream PipelineCreateResult) {}\n        zPop();\n        zparams.callHistory = callHistory;\n\n        // pipelineapp is a rook application that returns the dependent variable, the DV values, and the predictors. can think of it was a way to translate the potentially complex grammar from the UI\n\n        estimateLadda.start(); // start spinner\n\n        // 1. Some diagnostic tests to add special characters to the pipelineapp call:\n        //zparams.zgroup1.unshift("blah+");\n        //zparams.zgroup1.unshift("Alice-was_beg!n^ing t* get/ ve#y tired of s(tt)ng by her si$\\+er on th= bank & of having nothing to do:");\n\n        // 2. Note how they go out in call:\n        //console.log("zparams zgroup1");\n        //console.log(zparams.zgroup1);      // Notice zgroup1 is being sent with correct characters\n\n        var rookpipe = await makeRequest(ROOK_SVC_URL + \'pipelineapp\', zparams);\n\n        // 3. And check they come back correctly formed:\n        //console.log("pipeline app return (rookpipe)");\n        //console.log(rookpipe);            \n\n        if (!rookpipe) {\n            estimated = true;\n        } else {\n\n            setxTable(rookpipe.predictors);\n            //     let dvvals = res.dvvalues;\n            //    let dvvar = res.depvar[0];\n            var _res = await makeRequest(D3M_SVC_URL + \'/CreatePipelines\', CreatePipelineData(rookpipe.predictors, rookpipe.depvar));\n            //   res = await makeRequest(ROOK_SVC_URL + \'createpipeline\', zparams);\n            _res && onPipelineCreate(_res, rookpipe);\n        }\n    }\n    exports.task2_finished = task2_finished = true;\n}\n\n/** needs doc */\nfunction ta2stuff() {\n    console.log(d3mProblemDescription);\n}\n\n/** needs doc */\nasync function dataDownload() {\n    zPop();\n    // write links to file & run R CMD\n\n    // package the output as JSON\n    // add call history and package the zparams object as JSON\n    var res = await makeRequest(ROOK_SVC_URL + \'dataapp\', zparams);\n    if (!res) {\n        return;\n    }\n\n    zparams.zsessionid = res.sessionid[0];\n    // set link URL\n    byId("logID").href = \'\' + (PRODUCTION ? ROOK_SVC_URL + \'log_dir/log_\' : \'rook/log_\') + zparams.zsessionid + \'.txt\';\n}\n\n/** needs doc */\nfunction viz(mym) {\n    mym = +mym.substr(5, 5) - 1;\n\n    var removeKids = function removeKids(parent) {\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild);\n        }\n    };\n    removeKids(byId("resultsView"));\n\n    var json = allResults[mym];\n\n    // pipe in figures to right panel\n    var filelist = new Array();\n    for (var i in json.images) {\n        var zfig = document.createElement("img");\n        zfig.setAttribute("src", json.images[i]);\n        zfig.setAttribute(\'width\', 200);\n        zfig.setAttribute(\'height\', 200);\n        byId("resultsView").appendChild(zfig);\n    }\n\n    // write the results table\n    var resultsArray = [];\n    for (var key in json.sumInfo) {\n        if (key == \'colnames\') continue;\n        resultsArray.push(json.sumInfo[key]);\n    }\n\n    var table = d3.select("#resultsView").append("p").append("table");\n\n    var thead = table.append("thead");\n    thead.append("tr").selectAll("th").data(json.sumInfo.colnames).enter().append("th").text(function (d) {\n        return d;\n    });\n\n    var tbody = table.append("tbody");\n    tbody.selectAll("tr").data(resultsArray).enter().append("tr").selectAll("td").data(function (d) {\n        return d;\n    }).enter().append("td").text(function (d) {\n        var myNum = Number(d);\n        if (isNaN(myNum)) return d;\n        return myNum.toPrecision(3);\n    }).on("mouseover", function () {\n        d3.select(this).style("background-color", "aliceblue");\n    }) // for no discernable reason\n    .on("mouseout", function () {\n        d3.select(this).style("background-color", "#F9F9F9");\n    }); //(but maybe we\'ll think of one)\n\n    d3.select("#resultsView").append("p").html(function () {\n        return "<b>Formula: </b>".concat(json.call[0]);\n    });\n\n    _mithril2.default.redraw();\n}\n\n/**\n   parses the transformation input.\n   variable names are often nested inside one another, e.g., ethwar, war, wars, and so this is handled\n*/\nfunction transParse(n) {\n    var out2 = [];\n    var t2 = n;\n    var k2 = 0;\n    var subMe2 = "_transvar".concat(k2);\n    var indexed = [];\n\n    // out2 is all matched variables, indexed is an array, each element is an object that contains the matched variables starting index and finishing index.  e.g., n="wars+2", out2=[war, wars], indexed=[{0,2},{0,3}]\n    for (var i in valueKey) {\n        var m2 = n.match(valueKey[i]);\n        if (m2 != null) out2.push(m2[0]);\n\n        var re = new RegExp(valueKey[i], "g");\n        var s = n.search(re);\n        if (s != -1) indexed.push({ from: s, to: s + valueKey[i].length });\n    }\n\n    // nested loop not good, but indexed is not likely to be very large.\n    // if a variable is nested, it is removed from out2\n    // notice, loop is backwards so that index changes don\'t affect the splice\n    cdb("indexed ", indexed);\n    for (var i = indexed.length - 1; i > -1; i--) {\n        for (var j = indexed.length - 1; j > -1; j--) {\n            if (i === j) continue;\n            if (indexed[i].from >= indexed[j].from & indexed[i].to <= indexed[j].to) {\n                cdb(i, " is nested in ", j);\n                del(out2, i);\n            }\n        }\n    }\n\n    for (var i in out2) {\n        t2 = t2.replace(out2[i], subMe2); //something that\'ll never be a variable name\n        k2 = k2 + 1;\n        subMe2 = "_transvar".concat(k2);\n    }\n\n    if (out2.length > 0) {\n        out2.push(t2);\n        cdb("new out ", out2);\n        return out2;\n    } else {\n        alert("No variable name found. Perhaps check your spelling?");\n        return null;\n    }\n}\n\n/**\n   n = name of column/node\n   t = selected transformation\n*/\nasync function transform(n, t, typeTransform) {\n    if (downloadIncomplete()) {\n        return;\n    }\n\n    if (!typeTransform) t = t.replace("+", "_plus_"); // can\'t send the plus operator\n\n    cdb(\'name of col: \' + n);\n    cdb(\'transformation: \' + t);\n\n    var btn = byId(\'btnEstimate\');\n\n    // find the node by name\n    var myn = findNodeIndex(n[0], true);\n\n    if (typeof myn === "undefined") {\n        myn = findNodeIndex(n, true);\n    }\n\n    var outtypes = {\n        varnamesTypes: n,\n        interval: myn.interval,\n        numchar: myn.numchar,\n        nature: myn.nature,\n        binary: myn.binary\n    };\n\n    cdb(myn);\n    // if typeTransform but we already have the metadata\n    if (typeTransform) {\n        if (myn.nature == "nominal" & typeof myn.plotvalues !== "undefined") {\n            myn.plottype = "bar";\n            (0, _plots.barsNode)(myn);\n            panelPlots();\n            return;\n        } else if (myn.nature != "nominal" & typeof myn.plotx !== "undefined") {\n            myn.plottype = "continuous";\n            (0, _plots.densityNode)(myn);\n            panelPlots();\n            return;\n        }\n    }\n\n    estimateLadda.start(); // start spinner\n    var json = await makeRequest(ROOK_SVC_URL + \'transformapp\', { zdataurl: dataurl,\n        zvars: myn.name,\n        zsessionid: zparams.zsessionid,\n        transform: t,\n        callHistory: callHistory,\n        typeTransform: typeTransform,\n        typeStuff: outtypes });\n    if (!json) {\n        return;\n    }\n\n    // Is this a typeTransform?\n    if (json.typeTransform[0]) {\n        // Yes. We\'re updating an existing node\n        d3.json(json.url, function (err, data) {\n            if (err) return console.warn(err);\n            var node = void 0;\n            for (var key in data) {\n                node = findNodeIndex(key, true);\n                if (!node) continue;\n                jQuery.extend(true, node, data[key]);\n                node.plottype === "continuous" ? (0, _plots.densityNode)(node) : node.plottype === "bar" ? (0, _plots.barsNode)(node) : null;\n            }\n            fakeClick();\n            panelPlots();\n            node && cdb(node);\n        });\n    } else {\n        /* No, we have a new node here--e.g. the transformed column\n           example response: {\n           "call":["t_year_2"],\n           "url":["data/preprocessSubset_BACCBC78-7DD9-4482-B31D-6EB01C3A0C95.txt"],\n           "trans":["year","_transvar0^2"],\n           "typeTransform":[false]\n           }\n        */\n        callHistory.push({\n            func: "transform",\n            zvars: n,\n            transform: t\n        });\n\n        var subseted = false;\n        var rCall = [];\n\n        rCall[0] = json.call;\n        var newVar = rCall[0][0];\n\n        trans.push(newVar);\n\n        // Read the preprocess file containing values\n        // for the transformed variable\n        //\n        d3.json(json.url, function (error, json) {\n            if (error) return console.warn(error);\n\n            var jsondata = getVariableData(json);\n\n            for (var key in jsondata) {\n                var myIndex = findNodeIndex(key);\n                if (typeof myIndex !== "undefined") {\n                    alert("Invalid transformation: this variable name already exists.");\n                    return;\n                }\n                // add transformed variable to the current space\n                var i = allNodes.length; // get new index\n                var obj1 = {\n                    id: i,\n                    reflexive: false,\n                    name: key,\n                    labl: "transformlabel",\n                    data: [5, 15, 20, 0, 5, 15, 20],\n                    count: [.6, .2, .9, .8, .1, .3, .4],\n                    nodeCol: colors(i),\n                    baseCol: colors(i),\n                    strokeColor: _plots.selVarColor,\n                    strokeWidth: "1",\n                    subsetplot: false,\n                    subsetrange: ["", ""],\n                    setxplot: false,\n                    setxvals: ["", ""],\n                    grayout: false,\n                    defaultInterval: jsondata[key].interval,\n                    defaultNumchar: jsondata[key].numchar,\n                    defaultNature: jsondata[key].nature,\n                    defaultBinary: jsondata[key].binary\n                };\n\n                jQuery.extend(true, obj1, jsondata[key]);\n                allNodes.push(obj1);\n\n                valueKey.push(newVar);\n                nodes.push(allNodes[i]);\n                fakeClick();\n                panelPlots();\n\n                if (allNodes[i].plottype === "continuous") {\n                    (0, _plots.densityNode)(allNodes[i]);\n                } else if (allNodes[i].plottype === "bar") {\n                    (0, _plots.barsNode)(allNodes[i]);\n                }\n\n                _mithril2.default.redraw();\n            }\n        });\n\n        showLog(\'transform\', rCall);\n    }\n}\n\nasync function makeRequest(url, data) {\n    console.log(\'url:\', url);\n    console.log(\'POST:\', data);\n    var res = void 0;\n    try {\n        res = await _mithril2.default.request(url, { method: \'POST\', data: data });\n        console.log(\'response:\', res);\n        if (Object.keys(res)[0] === \'warning\') {\n            alert(\'Warning: \' + res.warning);\n            end_ta3_search(false, res.warning);\n        }\n    } catch (err) {\n        end_ta3_search(false, err);\n        cdb(err);\n        alert(\'Error: call to \' + url + \' failed\');\n    }\n\n    /*\n     // call end_ta3_search if status != OK\n     // status may be in different places for different calls though, and this is not worth doing at the moment\n     let myreg = /d3m-service/g;\n     let isd3mcall = myreg.test(url);\n     if(isd3mcall) {\n         let mystatus = res.responseInfo.status.code.toUpperCase();\n         if(mystatus != "OK") {\n             end_ta3_search(false, "grpc response status not ok");\n         }\n     }\n     */\n\n    if (!IS_D3M_DOMAIN) {\n        estimateLadda.stop(); // estimateLadda is being stopped in onPipelineCreate in D3M\n    };\n    return res;\n}\n\n/** needs doc */\nfunction legend() {\n    borderState();\n    _mithril2.default.redraw();\n}\n\n/**\n   programmatically deselect every selected variable\n*/\nfunction erase() {\n    setLeftTab(\'Variables\');\n\n    valueKey.forEach(function (element) {\n        if (zparams.zdv.concat(zparams.znom, zparams.zvars).includes(element)) // names start with varList now\n            clickVar(element);\n    });\n}\n\n/** needs doc */\nvar setLeftTab = exports.setLeftTab = function setLeftTab(tab) {\n    exports.leftTab = leftTab = tab;\n    updateLeftPanelWidth();\n\n    if (tab === "Discovery") {\n        probtable.length = 0;\n        for (var i = 0; i < disco.length; i++) {\n            var mypredictors = disco[i].predictors.join();\n            probtable.push([i, disco[i].target, mypredictors, disco[i].task, disco[i].metric]);\n        }\n\n        document.getElementById("discoveryInput").value = disco[0].description;\n    }\n};\n\nvar summary = exports.summary = { data: [] };\n\n/** needs doc */\nfunction varSummary(d) {\n    var t1 = \'Mean:, Median:, Most Freq:, Occurrences:, Median Freq:, Occurrences:, Least Freq:, Occurrences:, Std Dev:, Minimum:, Maximum:, Invalid:, Valid:, Uniques:, Herfindahl\'.split(\', \');\n\n    var rint = d3.format(\'r\');\n    var str = function str(x, p) {\n        return (+x).toPrecision(p || 4).toString();\n    };\n    var t2 = priv && d.meanCI ? [str(d.mean, 2) + \' (\' + str(d.meanCI.lowerBound, 2) + \' - \' + str(d.meanCI.upperBound, 2) + \')\', str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)] : [str(d.mean), str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)];\n\n    summary.data = [];\n    t1.forEach(function (e, i) {\n        return !t2[i].includes(\'NaN\') && t2[i] != \'NA\' && t2[i] != \'\' && summary.data.push([e, t2[i]]);\n    });\n\n    summary.name = d.name;\n    summary.labl = d.labl;\n\n    d3.select(\'#tabSummary\').selectAll(\'svg\').remove();\n\n    if (!d.plottype) return;\n    d.plottype == \'continuous\' ? (0, _plots.density)(d, \'Summary\', priv) : d.plottype == "bar" ? (0, _plots.bars)(d, \'Summary\', priv) : d3.select("#tabSummary") // no graph to draw, but still need to remove previous graph\n    .selectAll("svg").remove();\n}\n\nvar popoverContent = exports.popoverContent = function popoverContent(d) {\n    if (swandive) return;\n    var text = \'<table class="table table-sm table-striped" style="margin:-10px;"><tbody>\';\n    var _ref3 = [d3.format(\'r\'), function (val, int) {\n        return (+val).toPrecision(int).toString();\n    }],\n        rint = _ref3[0],\n        prec = _ref3[1];\n\n    var div = function div(field, name, val) {\n        if (field != \'NA\') text += \'<tr><th>\' + name + \'</th><td><p class="text-left" style="height:10px;">\' + (val || field) + \'</p></td></tr>\';\n    };\n    d.labl != \'\' && div(d.labl, \'Label\');\n    div(d.mean, \'Mean\', priv && d.meanCI ? prec(d.mean, 2) + \' (\' + prec(d.meanCI.lowerBound, 2) + \' - \' + prec(d.meanCI.upperBound, 2) + \')\' : prec(d.mean, 4));\n    div(d.median, \'Median\', prec(d.median, 4));\n    div(d.mode, \'Most Freq\');\n    div(d.freqmode, \'Occurrences\', rint(d.freqmode));\n    div(d.mid, \'Median Freq\');\n    div(d.freqmid, \'Occurrences\', rint(d.freqmid));\n    div(d.fewest, \'Least Freq\');\n    div(d.freqfewest, \'Occurrences\', rint(d.freqfewest));\n    div(d.sd, \'Stand Dev\', prec(d.sd, 4));\n    div(d.max, \'Maximum\', prec(d.max, 4));\n    div(d.min, \'Minimum\', prec(d.min, 4));\n    div(d.invalid, \'Invalid\', rint(d.invalid));\n    div(d.valid, \'Valid\', rint(d.valid));\n    div(d.uniques, \'Uniques\', rint(d.uniques));\n    div(d.herfindahl, \'Herfindahl\', prec(d.herfindahl, 4));\n    return text + \'</tbody></table>\';\n};\n\n/** needs doc */\nfunction panelPlots() {\n\n    if (IS_D3M_DOMAIN) {}\n    //    byId(\'btnSubset\').classList.add(\'noshow\');\n\n    // build arrays from nodes in main\n    var vars = [];\n    var ids = [];\n    nodes.forEach(function (n) {\n        vars.push(n.name.replace(/\\(|\\)/g, \'\'));\n        ids.push(n.id);\n    });\n\n    //remove all plots, could be smarter here\n    d3.select(\'#setxLeft\').selectAll(\'svg\').remove();\n    for (var i = 0; i < vars.length; i++) {\n        if (allNodes[ids[i]].valid == 0) // this was a silent error... very frustrating...\n            continue;\n        var node = allNodes[ids[i]];\n        node.setxplot = false;\n        node.subsetplot = false;\n        if (node.plottype === "continuous" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.density)(node, div = "setxLeft", priv);\n            node.subsetplot = true;\n            (0, _plots.density)(node, div = "Summary", priv);\n        } else if (node.plottype === "bar" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.bars)(node, div = "setxLeft", priv);\n            node.subsetplot = true;\n            (0, _plots.barsSubset)(node);\n        }\n    }\n\n    d3.select("#setxLeft").selectAll("svg").each(function () {\n        d3.select(this);\n        var regstr = /(.+)_setxLeft_(\\d+)/;\n        var myname = regstr.exec(this.id);\n        var nodeid = myname[2];\n        myname = myname[1];\n        if (!vars.includes(myname)) {\n            allNodes[nodeid].setxplot = false;\n            var temp = "#".concat(myname, "_setxLeft_", nodeid);\n            d3.select(temp).remove();\n            allNodes[nodeid].subsetplot = false;\n            temp = "#".concat(myname, "_tab2_", nodeid);\n            d3.select(temp).remove();\n        }\n    });\n\n    // just removing all the subset plots here, because using this button for problem discover\n    d3.select(\'#tabDiscovery\').selectAll(\'svg\').remove();\n}\n\n/**\n   converts color codes\n*/\nvar hexToRgba = exports.hexToRgba = function hexToRgba(hex) {\n    var int = parseInt(hex.replace(\'#\', \'\'), 16);\n    return \'rgba(\' + [int >> 16 & 255, int >> 8 & 255, int & 255, \'0.5\'].join(\',\') + \')\';\n};\n\n/**\n   takes node and color and updates zparams\n*/\nfunction setColors(n, c) {\n    if (n.strokeWidth == \'1\') {\n        if (c == gr1Color) {\n            var tempindex = zparams.zgroup1.indexOf(n.name);\n            if (tempindex > -1) {\n                n.group1 = false;\n                del(zparams.zgroup1, tempindex);\n            } else {\n                n.group1 = true;\n                zparams.zgroup1.push(n.name);\n            };\n        } else if (c == gr2Color) {\n            var tempindex = zparams.zgroup2.indexOf(n.name);\n            if (tempindex > -1) {\n                n.group2 = false;\n                del(zparams.zgroup2, tempindex);\n            } else {\n                n.group2 = true;\n                zparams.zgroup2.push(n.name);\n            };\n        } else {\n            // adding time, cs, dv, nom to node with no stroke\n            n.strokeWidth = \'4\';\n            n.strokeColor = c;\n            n.nodeCol = taggedColor;\n            var push = function push(_ref4) {\n                var _ref5 = _slicedToArray(_ref4, 2),\n                    color = _ref5[0],\n                    key = _ref5[1];\n\n                if (color != c) return;\n                zparams[key] = Array.isArray(zparams[key]) ? zparams[key] : [];\n                zparams[key].push(n.name);\n                if (key == \'znom\') {\n                    findNodeIndex(n.name, true).nature = "nominal";\n                    transform(n.name, t = null, typeTransform = true);\n                }\n                if (key == \'zdv\') {\n                    // remove group memberships from dv\'s\n                    if (n.group1) {\n                        n.group1 = false;\n                        del(zparams.zgroup1, -1, n.name);\n                    };\n                    if (n.group2) {\n                        n.group2 = false;\n                        del(zparams.zgroup2, -1, n.name);\n                    };\n                }\n            };\n            [[dvColor, \'zdv\'], [csColor, \'zcross\'], [timeColor, \'ztime\'], [nomColor, \'znom\']].forEach(push);\n        }\n    } else if (n.strokeWidth == \'4\') {\n        if (c == n.strokeColor) {\n            // deselecting time, cs, dv, nom\n            n.strokeWidth = \'1\';\n            n.strokeColor = _plots.selVarColor;\n            n.nodeCol = colors(n.id);\n            zparamsReset(n.name);\n            if (nomColor == c && zparams.znom.includes(n.name)) {\n                findNodeIndex(n.name, true).nature = findNodeIndex(n.name, true).defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n        } else {\n            // deselecting time, cs, dv, nom AND changing it to time, cs, dv, nom\n            zparamsReset(n.name);\n            if (nomColor == n.strokeColor && zparams.znom.includes(n.name)) {\n                findNodeIndex(n.name, true).nature = findNodeIndex(n.name, true).defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n            n.strokeColor = c;\n            if (dvColor == c) {\n                var dvname = n.name;\n                zparams.zdv.push(dvname);\n                if (n.group1) {\n                    // remove group memberships from dv\'s\n                    ngroup1 = false;\n                    del(zparams.zgroup1, -1, dvname);\n                };\n                if (n.group2) {\n                    ngroup2 = false;\n                    del(zparams.zgroup2, -1, dvname);\n                };\n            } else if (csColor == c) zparams.zcross.push(n.name);else if (timeColor == c) zparams.ztime.push(n.name);else if (nomColor == c) {\n                zparams.znom.push(n.name);\n                findNodeIndex(n.name, true).nature = "nominal";\n                transform(n.name, t = null, typeTransform = true);\n            }\n        }\n    }\n}\n\n/** needs doc */\nfunction borderState() {\n    zparams.zdv.length > 0 ? $(\'#dvButton .rectColor svg circle\').attr(\'stroke\', dvColor) : $(\'#dvButton\').css(\'border-color\', \'#ccc\');\n    zparams.zcross.length > 0 ? $(\'#csButton .rectColor svg circle\').attr(\'stroke\', csColor) : $(\'#csButton\').css(\'border-color\', \'#ccc\');\n    zparams.ztime.length > 0 ? $(\'#timeButton .rectColor svg circle\').attr(\'stroke\', timeColor) : $(\'#timeButton\').css(\'border-color\', \'#ccc\');\n    zparams.znom.length > 0 ? $(\'#nomButton .rectColor svg circle\').attr(\'stroke\', nomColor) : $(\'#nomButton\').css(\'border-color\', \'#ccc\');\n    zparams.zgroup1.length > 0 ? $(\'#gr1Button .rectColor svg circle\').attr(\'stroke\', gr1Color).attr(\'fill\', gr1Color).attr(\'fill-opacity\', 0.6).attr(\'stroke-opacity\', 0) : $(\'#gr1Button\').css(\'border-color\', \'#ccc\');\n    zparams.zgroup2.length > 0 ? $(\'#gr2Button .rectColor svg circle\').attr(\'stroke\', gr2Color).attr(\'fill\', gr2Color).attr(\'fill-opacity\', 0.6).attr(\'stroke-opacity\', 0) : $(\'#gr2Button\').css(\'border-color\', \'#ccc\');\n}\n\n/** needs doc */\nfunction subsetSelect(btn) {\n    if (dataurl) {\n        zparams.zdataurl = dataurl;\n    }\n    if (downloadIncomplete()) {\n        return;\n    }\n\n    zparams.zvars = [];\n    zparams.zplot = [];\n    var subsetEmpty = true;\n    // is this the same as zPop()?\n    for (var j = 0; j < nodes.length; j++) {\n        // populate zvars and zsubset arrays\n        zparams.zvars.push(nodes[j].name);\n        var temp = nodes[j].id;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n        if (zparams.zsubset[j].length > 0) {\n            if (zparams.zsubset[j][0] != "") zparams.zsubset[j][0] = Number(zparams.zsubset[j][0]);\n            if (zparams.zsubset[j][1] != "") zparams.zsubset[j][1] = Number(zparams.zsubset[j][1]);\n        }\n        zparams.zplot.push(allNodes[temp].plottype);\n        if (zparams.zsubset[j][1] != "") subsetEmpty = false; // only need to check one\n    }\n\n    if (subsetEmpty == true) {\n        alert("Warning: No new subset selected.");\n        return;\n    }\n\n    var outtypes = [];\n    for (var j = 0; j < allNodes.length; j++) {\n        outtypes.push({\n            varnamesTypes: allNodes[j].name,\n            nature: allNodes[j].nature,\n            numchar: allNodes[j].numchar,\n            binary: allNodes[j].binary,\n            interval: allNodes[j].interval\n        });\n    }\n\n    var json = makeRequest(ROOK_SVC_URL + \'subsetSelect\', { zdataurl: zparams.zdataurl,\n        zvars: zparams.zvars,\n        zsubset: zparams.zsubset,\n        zsessionid: zparams.zsessionid,\n        zplot: zparams.zplot,\n        callHistory: callHistory,\n        typeStuff: outtypes });\n    if (!json) {\n        return;\n    }\n\n    $("#btnVariables").trigger("click"); // programmatic clicks\n    $("#btnModels").trigger("click");\n\n    var grayOuts = [];\n    var rCall = [];\n    rCall[0] = json.call;\n\n    // store contents of the pre-subset space\n    zPop();\n    var myNodes = jQuery.extend(true, [], allNodes);\n    var myParams = jQuery.extend(true, {}, zparams);\n    var myTrans = jQuery.extend(true, [], trans);\n    var myForce = jQuery.extend(true, [], forcetoggle);\n    var myPreprocess = jQuery.extend(true, {}, preprocess);\n    var myLog = jQuery.extend(true, [], logArray);\n    var myHistory = jQuery.extend(true, [], callHistory);\n\n    spaces[myspace] = {\n        "allNodes": myNodes,\n        "zparams": myParams,\n        "trans": myTrans,\n        "force": myForce,\n        "preprocess": myPreprocess,\n        "logArray": myLog,\n        "callHistory": myHistory\n    };\n\n    // remove pre-subset svg\n    var selectMe = "#m".concat(myspace);\n    d3.select(selectMe).attr(\'class\', \'item\');\n    selectMe = "#whitespace".concat(myspace);\n    d3.select(selectMe).remove();\n\n    exports.myspace = myspace = spaces.length;\n    callHistory.push({\n        func: "subset",\n        zvars: jQuery.extend(true, [], zparams.zvars),\n        zsubset: jQuery.extend(true, [], zparams.zsubset),\n        zplot: jQuery.extend(true, [], zparams.zplot)\n    });\n\n    // this is to be used to gray out and remove listeners for variables that have been subsetted out of the data\n    function varOut(v) {\n        // if in nodes, remove gray out in left panel\n        // make unclickable in left panel\n        for (var i = 0; i < v.length; i++) {\n            var selectMe = v[i].replace(/\\W/g, "_");\n            byId(selectMe).style.color = hexToRgba(grayColor);\n            selectMe = "p#".concat(selectMe);\n            d3.select(selectMe).on("click", null);\n        }\n    }\n\n    showLog(\'subset\', rCall);\n\n    d3.select("#innercarousel").append(\'div\').attr(\'class\', \'item active\').attr(\'id\', function () {\n        return "m".concat(myspace.toString());\n    }).append(\'svg\').attr(\'id\', \'whitespace\');\n    svg = d3.select("#whitespace");\n\n    d3.json(json.url, function (error, json) {\n        if (error) {\n            return console.warn(error);\n        }\n        var jsondata = getVariableData(json);\n\n        for (var key in jsondata) {\n            var myIndex = findNodeIndex(key);\n\n            allNodes[myIndex].plotx = undefined;\n            allNodes[myIndex].ploty = undefined;\n            allNodes[myIndex].plotvalues = undefined;\n            allNodes[myIndex].plottype = "";\n\n            jQuery.extend(true, allNodes[myIndex], jsondata[key]);\n            allNodes[myIndex].subsetplot = false;\n            allNodes[myIndex].subsetrange = ["", ""];\n            allNodes[myIndex].setxplot = false;\n            allNodes[myIndex].setxvals = ["", ""];\n\n            if (allNodes[myIndex].valid == 0) {\n                grayOuts.push(allNodes[myIndex].name);\n                allNodes[myIndex].grayout = true;\n            }\n        }\n        rePlot();\n        layout(layoutAdd);\n    });\n\n    varOut(grayOuts);\n}\n\n/**\n   removes all the children svgs inside subset and setx divs\n*/\nfunction rePlot() {\n    d3.select(\'#tab2\').selectAll(\'svg\').remove();\n    d3.select(\'#setx\').selectAll(\'svg\').remove();\n    allNodes.forEach(function (n) {\n        return n.setxplot = n.subsetplot = false;\n    });\n}\n\n// acts as if the user clicked in whitespace. useful when restart() is outside of scope\nvar fakeClick = exports.fakeClick = function fakeClick() {\n    var ws = "#whitespace".concat(myspace);\n    // d3 and programmatic events don\'t mesh well, here\'s a SO workaround that looks good but uses jquery...\n    jQuery.fn.d3Click = function () {\n        this.each(function (i, e) {\n            var evt = document.createEvent("MouseEvents");\n            evt.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            e.dispatchEvent(evt);\n        });\n    };\n    $(ws).d3Click();\n    d3.select(ws).classed(\'active\', false);\n};\n\n/**\n   EndSession(SessionContext) returns (Response) {}\n*/\nasync function endsession() {\n\n    var table = document.getElementById("setxRight").getElementsByTagName(\'table\')[0];\n    if (typeof table === \'undefined\') {\n        alert("No pipelines exist. Cannot mark problem as complete.");\n        return;\n    }\n\n    var tableposition = selectedPipeline[\'model\'] + 1; // no pipeline selected become NaN\n    if (isNaN(tableposition)) {\n        tableposition = 1;\n    }\n    var selected = table.rows[tableposition].cells[0].innerHTML; // was "none"; as default\n\n    // calling exportpipeline\n    var end = await exportpipeline(selected);\n\n    // makeRequest(D3M_SVC_URL + \'/endsession\', apiSession(zparams.zsessionid));\n    var res = await makeRequest(D3M_SVC_URL + \'/endsession\', apiSession(zparams.zsessionid));\n    var mystatus = res.status.code.toUpperCase();\n    if (mystatus == "OK") {\n        end_ta3_search(true, "Problem marked as complete.");\n        setModal("Your selected pipeline has been submitted.", "Task Complete", true, false, false, "location.reload()");\n    }\n}\n\n/**\n    rpc DeletePipelines(PipelineDeleteRequest) returns (PipelineListResult) {}\n    pipes is an array of pipeline IDs\n*/\nfunction deletepipelines(pipes) {\n    var res = makeRequest(D3M_SVC_URL + \'/DeletePipelines\', { context: apiSession(zparams.zsessionid), deletePipelineIds: pipes });\n    if (!res) {\n        return;\n    }\n}\n\n/**\n    rpc DeletePipelines(PipelineDeleteRequest) returns (PipelineListResult) {}\n    pipes is an array of pipeline IDs\n*/\nfunction cancelpipelines(pipes) {\n    var res = makeRequest(D3M_SVC_URL + \'/CancelPipelines\', { context: apiSession(zparams.zsessionid), cancelPipelineIds: pipes });\n    if (!res) {\n        return;\n    }\n}\n\n/**\n   rpc ListPipelines(PipelineListRequest) returns (PipelineListResult) {}\n   pipes is an array of pipeline IDs\n*/\nasync function listpipelines() {\n    var res = await makeRequest(D3M_SVC_URL + \'/listpipelines\', { context: apiSession(zparams.zsessionid) });\n    if (!res) {\n        return [];\n    }\n    var pipes = res.pipelineIds;\n    return pipes;\n}\n\n/**\n   rpc ExecutePipeline(PipelineExecuteRequest) returns (stream PipelineExecuteResult) {}\n*/\nasync function executepipeline() {\n    var context = apiSession(zparams.zsessionid);\n    var tablerow = byId(\'setxRight\').querySelector(\'tr.item-select\');\n    if (tablerow == null) {\n        alert("Please select a pipeline to execute on.");return;\n    }\n    var pipelineId = tablerow.firstChild.innerText;\n\n    zPop();\n    zparams.callHistory = callHistory;\n\n    var data = [];\n\n    //this will just set zparams.zsetx to the mean, which is default for setx plots\n    //note that if setxplot is modified, it will NOT == "" because zparams.zsetx is modified when the setx plot slider is moved for the first time\n    for (var i = 0; i < zparams.zvars.length; i++) {\n        var mydata = [];\n        mydata[0] = zparams.zvars[i];\n        var mymean = allNodes[findNodeIndex(zparams.zvars[i])].mean;\n        if (zparams.zsetx[i][0] == "") {\n            mydata[1] = mymean;\n        } else if (zparams.zsetx[i][0] != mymean) {\n            mydata[1] = zparams.zsetx[i][0];\n        }\n        if (zparams.zsetx[i][1] == "") {\n            mydata[2] = allNodes[findNodeIndex(zparams.zvars[i])].mean;\n        } else if (zparams.zsetx[i][1] != mymean) {\n            mydata[2] = zparams.zsetx[i][1];\n        }\n        data.push(mydata);\n    }\n\n    var temp = { context: context, pipelineId: pipelineId, data: data };\n    temp = JSON.stringify(temp);\n    console.log(temp);\n    var res = await makeRequest(D3M_SVC_URL + \'/ExecutePipeline\', { context: context, pipelineId: pipelineId, data: data });\n    // I think we want to do this here, but will wait for ISI image to test against\n    // if(res.progressInfo=="COMPLETED") {\n    res && addPredictions(res);\n    // }\n}\n\nfunction addPredictions(res) {\n    function tabulate(data, columns) {\n        var table = d3.select(\'#setxLeftBottomRightBottom\').append(\'table\');\n        var thead = table.append(\'thead\');\n        var tbody = table.append(\'tbody\');\n\n        // append the header row\n        thead.append(\'tr\').selectAll(\'th\').data(columns).enter().append(\'th\').text(function (column) {\n            return column;\n        });\n\n        // create a row for each object in the data\n        var rows = tbody.selectAll(\'tr\').data(data).enter().append(\'tr\');\n\n        // create a cell in each row for each column\n        var cells = rows.selectAll(\'td\').data(function (row) {\n            return columns.map(function (column) {\n                return { column: column, value: row[column] };\n            });\n        }).enter().append(\'td\').text(function (d) {\n            return d.value;\n        }).attr(\'id\', function (d, i) {\n            var rowname = this.parentElement.firstChild.innerText;\n            return rowname + d.column;\n        });\n\n        return table;\n    }\n\n    // this is what ISI should look like, and the test server eventually, so just remove the following line when it\'s up\n    res = res.grpcResp[0];\n\n    console.log(res);\n    var allPreds = res.resultData.data;\n    var predvals = [];\n\n    for (var i = 0; i < allPreds.length; i++) {\n        predvals.push(allPreds[i]["preds"]);\n    }\n\n    var mydata = [];\n    mydata.push({ " ": "Pred 1", "E(Y|X1)": predvals[0], "E(Y|X2)": predvals[1] });\n\n    // render the table(s)\n    tabulate(mydata, [\' \', \'E(Y|X1)\', \'E(Y|X2)\']); // 2 column table\n}\n\n/**\n   find something centerish to the vertices of a convex hull\n   (specifically, the center of the bounding box)\n*/\nfunction jamescentroid(coord) {\n    var minx = coord[0][0],\n        maxx = coord[0][0],\n        miny = coord[0][1],\n        maxy = coord[0][1];\n    for (var j = 1; j < coord.length; j++) {\n        if (coord[j][0] < minx) minx = coord[j][0];\n        if (coord[j][1] < miny) miny = coord[j][1];\n        if (coord[j][0] > maxx) maxx = coord[j][0];\n        if (coord[j][1] > maxy) maxy = coord[j][1];\n    };\n    return [(minx + maxx) / 2, (miny + maxy) / 2];\n};\n\n/**\n   Define each pebble radius.\n   Presently, most pebbles are scaled to radius set by global RADIUS.\n   Members of groups are scaled down if group gets large.\n*/\nfunction setPebbleRadius(d) {\n    if (d.group1 || d.group2) {\n        // if a member of a group, need to calculate radius size\n        var uppersize = 7;\n        var ng1 = d.group1 ? zparams.zgroup1.length : 1; // size of group1, if a member of group 1\n        var ng2 = d.group2 ? zparams.zgroup2.length : 1; // size of group2, if a member of group 2\n        var maxng = Math.max(ng1, ng2); // size of the largest group variable is member of\n        return maxng > uppersize ? RADIUS * Math.sqrt(uppersize / maxng) : RADIUS; // keep total area of pebbles bounded to pi * RADIUS^2 * uppersize, thus shrinking radius for pebbles in larger groups\n    } else {\n        return RADIUS; // nongroup members get the common global radius\n    }\n};\n\n/**\n   Define each pebble charge.\n*/\nfunction setPebbleCharge(d) {\n    if (d.group1 || d.group2) {\n        if (d.forefront) {\n            // pebbles packed in groups repel others on mouseover\n            return -1000;\n        }\n        var uppersize = 7;\n        var ng1 = d.group1 ? zparams.zgroup1.length : 1; // size of group1, if a member of group 1\n        var ng2 = d.group2 ? zparams.zgroup2.length : 1; // size of group2, if a member of group 2\n        var maxng = Math.max(ng1, ng2); // size of the largest group variable is member of\n        return maxng > uppersize ? -400 * (uppersize / maxng) : -400; // decrease charge as pebbles become smaller, so they can pack together\n    } else {\n        return -800;\n    }\n}\n\n/** needs doc */\nfunction resultsplotinit(pid) {\n    console.log(pid);\n    pid = allPipelineInfo[pid];\n    var mydv = allPipelineInfo.rookpipe.depvar[0]; // When there are multiple CreatePipelines calls, then this only has values from latest value\n    var dvvalues = allPipelineInfo.rookpipe.dvvalues; // When there are multiple CreatePipelines calls, then this only has values from latest value\n    // let predfile = pid.pipelineInfo.predictResultData.file_1;\n\n    if (pid.pipelineInfo.predictResultData.success == false) return;\n\n    var allPreds = pid.pipelineInfo.predictResultData.data;\n    console.log(Object.keys(allPreds[1]));\n    var predvals = [];\n\n    var mydvI = Object.keys(allPreds[1]).indexOf(mydv);\n    if (mydvI > -1) {\n        for (var i = 0; i < allPreds.length; i++) {\n            predvals.push(allPreds[i][mydv]);\n        }\n    } else if (Object.keys(allPreds[1]).indexOf("preds") > -1) {\n        for (var _i2 = 0; _i2 < allPreds.length; _i2++) {\n            predvals.push(allPreds[_i2]["preds"]);\n        }\n    } else {\n        alert("DV does not match. No Results window.");\n        return;\n    }\n\n    // only do this for classification tasks\n    if (d3mTaskType[d3mProblemDescription.taskType][1] == "CLASSIFICATION") {\n        genconfdata(dvvalues, predvals);\n    } else {\n        var xdata = "Actual";\n        var ydata = "Predicted";\n        bivariatePlot(dvvalues, predvals, xdata, ydata);\n    }\n\n    // add the list of predictors into setxLeftTopLeft\n    d3.select("#setxLeftTopLeft").selectAll("p").data(allPipelineInfo.rookpipe.predictors) // When there are multiple CreatePipelines calls, then this only has values from latest value\n    .enter().append("p").text(function (d) {\n        return d;\n    }).attr(\'id\', function (d) {\n        return "sx_" + d;\n    }).attr(\'class\', "item-default").on("click", function () {\n        if (this.className == "item-select") {\n            return;\n        } else {\n            d3.select("#setxLeftTopLeft").select("p.item-select").attr(\'class\', \'item-default\');\n            d3.select(this).attr(\'class\', "item-select");\n            singlePlot(this.id.slice(3)); // drops that sx_\n        }\n    });\n}\n\n/** needs doc */\nfunction genconfdata(dvvalues, predvals) {\n\n    // dvvalues are generally numeric\n    dvvalues = dvvalues.map(String);\n\n    // predvals are generally strings\n    predvals = predvals.map(String);\n\n    var mycounts = [];\n    var mypairs = [];\n\n    // combine actuals and predicted, and get all unique elements\n    var myuniques = dvvalues.concat(predvals);\n    myuniques = [].concat(_toConsumableArray(new Set(myuniques))); //equivalent to: myuniques = Array.from(new Set(myuniques));\n    //was:\n    //  function onlyUnique(value, index, self) {\n    //    return self.indexOf(value) === index;\n    //  }\n    //  myuniques = myuniques.filter(onlyUnique);\n    myuniques = myuniques.sort();\n\n    // create two arrays: mycounts initialized to 0, mypairs have elements set to all possible pairs of uniques\n    // looked into solutions other than nested fors, but Internet suggest performance is just fine this way\n    for (var i = 0; i < myuniques.length; i++) {\n        var tempcount = [];\n        var temppair = [];\n        for (var j = 0; j < myuniques.length; j++) {\n            mycounts.push(0);\n            mypairs.push(myuniques[i] + \',\' + myuniques[j]);\n        }\n    }\n\n    // line up actuals and predicted, and increment mycounts at index where mypair has a match for the \'actual,predicted\'\n    for (var _i3 = 0; _i3 < dvvalues.length; _i3++) {\n        var _temppair = dvvalues[_i3] + \',\' + predvals[_i3];\n        var myindex = mypairs.indexOf(_temppair);\n        mycounts[myindex] += 1;\n    }\n\n    var confdata = [],\n        size = myuniques.length;\n    // another loop... this builds the array of arrays from the flat array mycounts for input to confusionsmatrix function\n    while (mycounts.length > 0) {\n        confdata.push(mycounts.splice(0, size));\n    }confusionmatrix(confdata, myuniques);\n}\n\n/** needs doc */\nfunction confusionmatrix(matrixdata, classes) {\n\n    d3.select("#setxLeftPlot").html("");\n    d3.select("#setxLeftPlot").select("svg").remove();\n\n    // adapted from this block: https://bl.ocks.org/arpitnarechania/dbf03d8ef7fffa446379d59db6354bac\n    var mainwidth = byId(\'main\').clientWidth;\n    var mainheight = byId(\'main\').clientHeight;\n\n    var longest = classes.reduce(function (a, b) {\n        return a.length > b.length ? a : b;\n    });\n    //console.log(longest);\n    var leftmarginguess = Math.max(longest.length * 8, 25); // More correct answer is to make a span, put string inside span, then use jquery to get pixel width of span.\n\n\n    var condiv = document.createElement(\'div\');\n    condiv.id = "confusioncontainer";\n    condiv.style.display = "inline-block";\n    condiv.style.width = +(mainwidth * .385) + \'px\'; // Need to not be hard coded\n    condiv.style.marginLeft = \'20px\';\n    condiv.style.height = +mainheight + \'px\'; // Need to not be hard coded\n    condiv.style.float = "left";\n    byId(\'setxLeftPlot\').appendChild(condiv);\n\n    var legdiv = document.createElement(\'div\');\n    legdiv.id = "confusionlegend";\n    legdiv.style.width = +(mainwidth * .05) + \'px\'; // Need to not be hard coded\n    legdiv.style.marginLeft = \'5px\'; // Margin between confusion matrix container and legend container\n    legdiv.style.height = +mainheight + \'px\'; // Need to not be hard coded\n    legdiv.style.display = "inline-block";\n    byId(\'setxLeftPlot\').appendChild(legdiv);\n\n    var margin = { top: 30, right: 35, bottom: 0, left: leftmarginguess }; // Left margin needs not to be hardcoded, but responsive to maximum label length\n\n\n    function Matrix(options) {\n        var width = options.width,\n            height = options.height,\n            data = options.data,\n            container = options.container,\n            labelsData = options.labels,\n            startColor = options.start_color,\n            endColor = options.end_color,\n            xOffset = options.x_offset;\n\n        var widthLegend = options.widthLegend;\n\n        if (!data) {\n            throw new Error(\'Please pass data\');\n        }\n\n        if (!Array.isArray(data) || !data.length || !Array.isArray(data[0])) {\n            throw new Error(\'It should be a 2-D array\');\n        }\n\n        var maxValue = d3.max(data, function (layer) {\n            return d3.max(layer, function (d) {\n                return d;\n            });\n        });\n        var minValue = d3.min(data, function (layer) {\n            return d3.min(layer, function (d) {\n                return d;\n            });\n        });\n\n        var numrows = data.length;\n        var numcols = data[0].length;\n\n        var svg = d3.select(container).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n        var background = svg.append("rect").style("stroke", "black").style("stroke-width", "2px").attr("width", width).attr("height", height);\n\n        var x = d3.scale.ordinal().domain(d3.range(numcols)).rangeBands([0, width]);\n\n        var y = d3.scale.ordinal().domain(d3.range(numrows)).rangeBands([0, height]);\n\n        var colorMap = d3.scale.linear().domain([minValue, maxValue]).range([startColor, endColor]);\n\n        var row = svg.selectAll(".row").data(data).enter().append("g").attr("class", "row").attr("transform", function (d, i) {\n            return "translate(0," + y(i) + ")";\n        });\n\n        var cell = row.selectAll(".cell").data(function (d) {\n            return d;\n        }).enter().append("g").attr("class", "cell").attr("transform", function (d, i) {\n            return "translate(" + x(i) + ", 0)";\n        });\n\n        cell.append(\'rect\').attr("width", x.rangeBand()).attr("height", y.rangeBand()).style("stroke-width", 0);\n\n        if (numcols < 20) {\n            cell.append("text").attr("dy", ".32em").attr("x", x.rangeBand() / 2).attr("y", y.rangeBand() / 2).attr("text-anchor", "middle").style("fill", function (d, i) {\n                return d >= maxValue / 2 ? \'white\' : \'black\';\n            }).text(function (d, i) {\n                return d;\n            });\n        };\n\n        row.selectAll(".cell").data(function (d, i) {\n            return data[i];\n        }).style("fill", colorMap);\n\n        // this portion of the code isn\'t as robust to sizing. column labels not rendering in the right place\n        var labels = svg.append(\'g\').attr(\'class\', "labels");\n\n        var columnLabels = labels.selectAll(".column-label").data(labelsData).enter().append("g").attr("class", "column-label").attr("transform", function (d, i) {\n            // let temp = "translate(" + x(i) + "," + (height+20) + ")"; // this in particular looks to be the cause\n            //  console.log(temp);\n            return "translate(" + x(i) + "," + (height + xOffset) + ")";\n        });\n\n        columnLabels.append("line").style("stroke", "black").style("stroke-width", "1px").attr("x1", x.rangeBand() / 2).attr("x2", x.rangeBand() / 2).attr("y1", 5 - xOffset).attr("y2", -xOffset);\n\n        console.log(x.rangeBand);\n\n        columnLabels.append("text").attr("x", x.rangeBand() / 2).attr("y", -10)\n        //.attr("dy", "0.5em")\n        .attr("text-anchor", "start").attr("transform", "rotate(60," + x.rangeBand() / 2 + ",-10)").text(function (d, i) {\n            return d;\n        });\n\n        var rowLabels = labels.selectAll(".row-label").data(labelsData).enter().append("g").attr("class", "row-label").attr("transform", function (d, i) {\n            return "translate(" + 0 + "," + y(i) + ")";\n        });\n\n        rowLabels.append("line").style("stroke", "black").style("stroke-width", "1px").attr("x1", 0).attr("x2", -5).attr("y1", y.rangeBand() / 2).attr("y2", y.rangeBand() / 2);\n\n        rowLabels.append("text").attr("x", -8).attr("y", y.rangeBand() / 2).attr("dy", ".32em").attr("text-anchor", "end").text(function (d, i) {\n            return d;\n        });\n\n        var key = d3.select("#confusionlegend").append("svg").attr("width", widthLegend).attr("height", height + margin.top + margin.bottom);\n\n        var legend = key.append("defs").append("svg:linearGradient").attr("id", "gradient").attr("x1", "100%").attr("y1", "0%").attr("x2", "100%").attr("y2", "100%").attr("spreadMethod", "pad");\n\n        legend.append("stop").attr("offset", "0%").attr("stop-color", endColor).attr("stop-opacity", 1);\n\n        legend.append("stop").attr("offset", "100%").attr("stop-color", startColor).attr("stop-opacity", 1);\n\n        key.append("rect").attr("width", widthLegend / 2 - 10).attr("height", height).style("fill", "url(#gradient)").attr("transform", "translate(0," + margin.top + ")");\n\n        svg.append("text").attr("transform", "translate(" + width / 2 + " ," + (0 - 10) + ")").style("text-anchor", "middle").text("Predicted Class");\n\n        svg.append("text").attr("transform", "rotate(-90)").attr("y", width + 15).attr("x", 0 - height / 2)\n        //.attr("dy", "1em")\n        .style("text-anchor", "middle").text("Actual Class");\n\n        // this y is for the legend\n        y = d3.scale.linear().range([height, 0]).domain([minValue, maxValue]);\n\n        var yAxis = d3.svg.axis().scale(y).orient("right");\n\n        key.append("g").attr("class", "y axis").attr("transform", "translate(25," + margin.top + ")") // first number is separation between legend scale and legend key\n        .call(yAxis);\n    }\n\n    // The table generation function. Used for the table of performance measures, not the confusion matrix\n    function tabulate(data, columns) {\n        var table = d3.select("#setxLeftPlot").append("table").attr("style", "margin-left: " + margin.left + "px"),\n            thead = table.append("thead"),\n            tbody = table.append("tbody");\n\n        // append the header row\n        thead.append("tr").selectAll("th").data(columns).enter().append("th").text(function (column) {\n            return column;\n        });\n\n        // create a row for each object in the data\n        var rows = tbody.selectAll("tr").data(data).enter().append("tr");\n\n        // create a cell in each row for each column\n        var cells = rows.selectAll("td").data(function (row) {\n            return columns.map(function (column) {\n                return { column: column, value: row[column] };\n            });\n        }).enter().append("td").attr("style", "font-family: Courier") // sets the font style\n        .html(function (d) {\n            return d.value;\n        });\n\n        return table;\n    }\n\n    // this code is all for producing a table with performance measures\n    //var confusionMatrix = [[169, 10],[7, 46]];\n    var tp = matrixdata[0][0];\n    var fn = matrixdata[0][1];\n    var fp = matrixdata[1][0];\n    var tn = matrixdata[1][1];\n\n    var p = tp + fn;\n    var n = fp + tn;\n\n    var accuracy = (tp + tn) / (p + n);\n    var f1 = 2 * tp / (2 * tp + fp + fn);\n    var precision = tp / (tp + fp);\n    var recall = tp / (tp + fn);\n\n    accuracy = Math.round(accuracy * 100) / 100;\n    f1 = Math.round(f1 * 100) / 100;\n    precision = Math.round(precision * 100) / 100;\n    recall = Math.round(recall * 100) / 100;\n\n    var computedData = [];\n    computedData.push({ "F1": f1, "PRECISION": precision, "RECALL": recall, "ACCURACY": accuracy });\n\n    Matrix({\n        container: \'#confusioncontainer\',\n        data: matrixdata,\n        labels: classes,\n        start_color: \'#ffffff\',\n        end_color: \'#e67e22\',\n        width: mainwidth * .33 + 25 - leftmarginguess, // Width of confusion matrix table: Need to not be hard coded\n        height: mainheight * .6, // Need to not be hard coded\n        widthLegend: mainwidth * .04,\n        x_offset: 30\n    });\n\n    // not rendering this table for right now, left all the code in place though. maybe we use it eventually\n    // var table = tabulate(computedData, ["F1", "PRECISION","RECALL","ACCURACY"]);\n}\n\n/**\n   scatterplot function to go to plots.js to be reused\n*/\nfunction bivariatePlot(x_Axis, y_Axis, x_Axis_name, y_Axis_name) {\n    d3.select("#setxLeftPlot").html("");\n    d3.select("#setxLeftPlot").select("svg").remove();\n\n    x_Axis = x_Axis.map(Number);\n    y_Axis = y_Axis.map(Number);\n\n    console.log(x_Axis);\n    console.log(y_Axis);\n\n    var mainwidth = byId(\'main\').clientWidth;\n    var mainheight = byId(\'main\').clientHeight;\n\n    // scatter plot\n    var data_plot = [];\n    var nanCount = 0;\n    for (var i = 0; i < x_Axis.length; i++) {\n        if (isNaN(x_Axis[i]) || isNaN(y_Axis[i])) {\n            nanCount++;\n        } else {\n            var newNumber1 = x_Axis[i];\n            var newNumber2 = y_Axis[i];\n            data_plot.push({ xaxis: newNumber1, yaxis: newNumber2, score: Math.random() * 100 });\n        }\n    }\n\n    var margin = { top: 35, right: 35, bottom: 35, left: 35 },\n        width = mainwidth * .25 - margin.left - margin.right,\n        height = mainwidth * .25 - margin.top - margin.bottom;\n    var padding = 100;\n\n    var min_x = d3.min(data_plot, function (d, i) {\n        return data_plot[i].xaxis;\n    });\n    var max_x = d3.max(data_plot, function (d, i) {\n        return data_plot[i].xaxis;\n    });\n    var avg_x = (max_x - min_x) / 10;\n    var min_y = d3.min(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var max_y = d3.max(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var avg_y = (max_y - min_y) / 10;\n\n    var xScale = d3.scale.linear().domain([min_x - avg_x, max_x + avg_x]).range([0, width]);\n\n    var yScale = d3.scale.linear().domain([min_y - avg_y, max_y + avg_y]).range([height, 0]);\n\n    var xAxis = d3.svg.axis().scale(xScale).orient(\'bottom\').tickSize(-height);\n\n    var yAxis = d3.svg.axis().scale(yScale).orient(\'left\').ticks(5).tickSize(-width);\n\n    var zoom = d3.behavior.zoom().x(xScale).y(yScale).scaleExtent([1, 10]).on("zoom", zoomed);\n\n    var chart_scatter = d3.select(\'#setxLeftPlot\').append(\'svg:svg\').attr(\'width\', width + margin.right + margin.left).attr(\'height\', height + margin.top + margin.bottom);\n    // .call(zoom); dropping this for now, until the line zooms properly\n\n    var main1 = chart_scatter.append(\'g\').attr(\'transform\', \'translate(\' + margin.left + \',\' + margin.top + \')\').attr(\'width\', width + margin.right + margin.left).attr(\'height\', height + margin.top + margin.bottom).attr(\'class\', \'main\');\n\n    var gX = main1.append(\'g\').attr(\'transform\', \'translate(0,\' + height + \')\').attr(\'class\', \'x axis\').call(xAxis);\n\n    var gY = main1.append(\'g\').attr(\'transform\', \'translate(0,0)\').attr(\'class\', \'y axis\').call(yAxis);\n\n    var clip = main1.append("defs").append("svg:clipPath").attr("id", "clip").append("svg:rect").attr("id", "clip-rect").attr("x", "0").attr("y", "0").attr(\'width\', width).attr(\'height\', height);\n\n    main1.append("g").attr("clip-path", "url(#clip)").selectAll("circle").data(data_plot).enter().append("circle").attr("cx", function (d, i) {\n        return xScale(data_plot[i].xaxis);\n    }).attr("cy", function (d, i) {\n        return yScale(data_plot[i].yaxis);\n    }).attr("r", 2).style("fill", "#B71C1C");\n\n    chart_scatter.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + padding / 5 + "," + height / 2 + ")rotate(-90)") // text is drawn off the screen top left, move down and out and rotate\n    .text(y_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    chart_scatter.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + width / 2 + "," + (height + padding / 2) + ")") // centre below axis\n    .text(x_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    main1.append("line").attr("x1", xScale(min_x)).attr("y1", yScale(min_x)).attr("x2", xScale(max_x)).attr("y2", yScale(max_x)).attr("stroke-width", 2).attr("stroke", "black");\n\n    function zoomed() {\n        var panX = d3.event.translate[0];\n        var panY = d3.event.translate[1];\n        var scale = d3.event.scale;\n\n        panX = panX > 10 ? 10 : panX;\n        var maxX = -(scale - 1) * width - 10;\n        panX = panX < maxX ? maxX : panX;\n\n        panY = panY > 10 ? 10 : panY;\n        var maxY = -(scale - 1) * height - 10;\n        panY = panY < maxY ? maxY : panY;\n\n        zoom.translate([panX, panY]);\n\n        main1.select(".x.axis").call(xAxis);\n        main1.select(".y.axis").call(yAxis);\n        main1.selectAll("circle").attr("cx", function (d, i) {\n            console.log("circle x ", xScale(5));\n            return xScale(data_plot[i].xaxis);\n        }).attr("cy", function (d, i) {\n            return yScale(data_plot[i].yaxis);\n        }).attr("r", 2.5).style("fill", "#B71C1C");\n\n        // below doesn\'t work, so I\'m just dropping the zoom\n        main1.select("line").attr("x1", function (d, i) {\n            return xScale(min_x);\n        }).attr("y1", function (d, i) {\n            return xScale(min_x);\n        }).attr("x2", function (d, i) {\n            return xScale(max_x);\n        }).attr("y2", function (d, i) {\n            return yScale(max_x);\n        }).attr("stroke-width", 2).attr("stroke", "black");\n    }\n    //  d3.select("#NAcount").text("There are " + nanCount + " number of NA values in the relation.");\n}\n\n/** needs doc */\nfunction setxTable(features) {\n    function tabulate(data, columns) {\n        var table = d3.select(\'#setxLeftBottomLeft\').append(\'table\');\n        var thead = table.append(\'thead\');\n        var tbody = table.append(\'tbody\');\n\n        // append the header row\n        thead.append(\'tr\').selectAll(\'th\').data(columns).enter().append(\'th\').text(function (column) {\n            return column;\n        });\n\n        // create a row for each object in the data\n        var rows = tbody.selectAll(\'tr\').data(data).enter().append(\'tr\');\n\n        // create a cell in each row for each column\n        var cells = rows.selectAll(\'td\').data(function (row) {\n            return columns.map(function (column) {\n                return { column: column, value: row[column] };\n            });\n        }).enter().append(\'td\').text(function (d) {\n            return d.value;\n        }).attr(\'id\', function (d, i) {\n            var rowname = this.parentElement.firstChild.innerText;\n            return rowname + d.column;\n        });\n\n        return table;\n    }\n\n    var mydata = [];\n    for (var i = 0; i < features.length; i++) {\n        var myi = findNodeIndex(features[i]); //i+1;                                // This was set as (i+1), but should be allnodes position, not features position\n\n        if (allNodes[myi].valid == 0) {\n            var xval = 0;\n            var x1val = 0;\n            mydata.push({ "Variables": features[i], "From": xval, "To": x1val });\n            continue;\n        }\n\n        var mysvg = features[i] + "_setxLeft_" + myi;\n\n        try {\n            //console.log(mysvg);\n            //console.log(byId(mysvg).querySelector(\'.xval\'));\n            var _xval = byId(mysvg).querySelector(\'.xval\').innerHTML;\n            var _x1val = byId(mysvg).querySelector(\'.x1val\').innerHTML;\n            //console.log(xval);\n            //console.log(x1val);\n            _xval = _xval.split("x: ").pop();\n            _x1val = _x1val.split("x1: ").pop();\n            mydata.push({ "Variables": features[i], "From": _xval, "To": _x1val });\n        } catch (error) {\n            continue;\n        }\n    }\n\n    // render the table(s)\n    tabulate(mydata, [\'Variables\', \'From\', \'To\']); // 2 column table\n}\n\n/**\n  rpc ExportPipeline(PipelineExportRequest) returns (Response) {}\n*/\n\nasync function exportpipeline(pipelineId) {\n    var temp = { pipelineId: pipelineId, context: apiSession(zparams.zsessionid), pipelineExecUri: \'<<EXECUTABLE_URI>>\' };\n\n    var res = await makeRequest(D3M_SVC_URL + \'/exportpipeline\', { pipelineId: pipelineId, context: apiSession(zparams.zsessionid), pipelineExecUri: \'<<EXECUTABLE_URI>>\' });\n\n    // we need standardized status messages...\n    var mystatus = res.status;\n    if (typeof mystatus !== \'undefined\') {\n        if (mystatus.code == "FAILED_PRECONDITION") {\n            console.log("TA2 has not written the executable."); // was alert(), but testing on NIST infrastructure suggests these are getting written but triggering alert.\n        } else {\n            console.log(\'Executable for \' + pipelineId + \' has been written\');\n        }\n    }\n    return res;\n}\n\n/** needs doc */\nfunction deletepipeline() {\n    console.log("DELETE CALLED");\n}\n\n/**\n   D3M API HELPERS\n   because these get built in various places, pulling them out for easy manipulation\n*/\nfunction apiFeature(vars, uri) {\n    var out = [];\n    for (var i = 0; i < vars.length; i++) {\n        out.push({ featureId: vars[i], dataUri: uri });\n    }\n    return out;\n}\n\n/** needs doc */\nfunction apiFeatureShortPath(vars, uri) {\n    var out = [];\n    var shortUri = uri.substring(0, uri.lastIndexOf("/"));\n    for (var i = 0; i < vars.length; i++) {\n        out.push({ featureId: vars[i], dataUri: shortUri });\n    }\n    return out;\n}\n\n/**\n   silly but perhaps useful if in the future SessionContext requires more things (as suggest by core)\n*/\nfunction apiSession(context) {\n    return { session_id: context };\n}\n\n/**\n *  Send a status message to the TA3 console\n */\nfunction ta3_search_message(user_msg) {\n\n    var ta3_search_message = { \'message\': user_msg };\n\n    var end_search_url = \'ta3-search/send-reviewer-message\';\n\n    try {\n        var res = _mithril2.default.request(end_search_url, { method: \'POST\', data: ta3_search_message });\n        console.log(\'ta3_search_message succeeded:\' + res);\n    } catch (err) {\n        console.log(\'ta3_search_message failed: \' + err);\n    }\n}\n\nfunction test_msg_ta3_search() {}\n//end_ta3_search(true, \'it worked!\');\n//end_ta3_search(false, \'it failed!\');\n//ta3_search_message(\'just sending a message!\');\n\n\n/**\n *  End the TA3 search.  This sends a message\n *  to the ta3_search console as well as message\n *  for the console to exit with a:\n *  - return code 0 for success\n *  - return code -1 for failure\n *\n *  > is_success - boolean\n *  > user_msg - string sent to the console\n */\nfunction end_ta3_search(is_success, user_msg) {\n\n    var end_search_msg = { \'is_success\': is_success,\n        \'message\': user_msg };\n\n    var end_search_url = \'ta3-search/end-search\';\n\n    try {\n        var res = _mithril2.default.request(end_search_url, { method: \'POST\', data: end_search_msg });\n        console.log(\'end_ta3_search succeeded:\' + res);\n    } catch (err) {\n        console.log(\'end_ta3_search failed: \' + err);\n    }\n}\n\n/**\n *  record user metadata\n */\nvar recorder_cnt = 0;\nvar save_workspace_url = \'/workspaces/record-user-workspace\';\n\nfunction record_user_metadata() {\n\n    // turning off for now\n    return;\n\n    // (1) Set domain identifier: differs for D3M, Dataverse, etc\n    //\n    var domain_identifier = \'unknown!\';\n    if (IS_D3M_DOMAIN) {\n        // domain specific identifier\n        domain_identifier = domainIdentifier;\n    } /*else if (IS_DATAVERSE_DOMAIN){\n       domain_identifier = \'TODO: DV IDENTIFIER\';\n      }else if (IS_EVENTDATA_DOMAIN){\n       domain_identifier = \'TODO: EVENTDATA IDENTIFIER\';\n      }*/\n\n    if (zparams == null) {\n        console.log(\'No workspace recording. zparams not defined\');\n        return;\n    }\n    if (allNodes == null) {\n        console.log(\'No workspace recording. zparams not defined\');\n        return;\n    }\n\n    // (2) Format workspace data\n    //\n    var workspace_data = { \'app_domain\': APP_DOMAIN,\n        \'domain_identifier\': domain_identifier,\n        \'allnodes\': allNodes,\n        \'zparams\': zparams\n\n        //console.log(\'workspace_data: \' + workspace_data);\n\n        // (3) Save workspace data\n        //\n    };try {\n        var res = _mithril2.default.request(save_workspace_url, { method: \'POST\', data: workspace_data });\n        recorder_cnt++;\n        console.log(\'Session recorded: (cnt: \' + recorder_cnt + \') \' + res);\n    } catch (err) {\n        console.log(\'record_user_metadata failed: \' + err);\n    }\n}\n\nfunction showPredPlot(btn) {\n    if (document.getElementById("setxLeftGen").style.display == "none") return;\n    document.getElementById("setxLeftPlot").style.display = "block";\n    document.getElementById("setxLeftGen").style.display = "none";\n}\n\nfunction showGenPreds(btn) {\n    if (document.getElementById("setxLeftPlot").style.display == "none") return;\n    document.getElementById("setxLeftPlot").style.display = "none";\n    document.getElementById("setxLeftGen").style.display = "block";\n}\n\nfunction singlePlot(pred) {\n    d3.select(\'#setxLeftTopRight\').selectAll(\'svg\').remove();\n    var i = findNodeIndex(pred);\n    var node = allNodes[i];\n    node.setxplot = false;\n    node.subsetplot = false;\n    if (node.plottype === "continuous" & node.setxplot == false) {\n        node.setxplot = true;\n        (0, _plots.density)(node, div = "setxLeftTopRight", priv);\n    } else if (node.plottype === "bar" & node.setxplot == false) {\n        node.setxplot = true;\n        (0, _plots.bars)(node, div = "setxLeftTopRight", priv);\n    }\n}\n\nfunction discovery(preprocess_file) {\n\n    // console.log("entering disco");\n    var extract = preprocess_file.dataset.discovery;\n    // console.log(extract);\n    var disco = [];\n    var names = [];\n    var vars = Object.keys(preprocess);\n    for (var i = 0; i < extract.length; i++) {\n        names[i] = "Problem" + (i + 1);\n        var current_target = extract[i]["target"];\n        var j = findNodeIndex(current_target);\n        var node = allNodes[j];\n        var current_predictors = extract[i]["predictors"];\n        var current_task = node.plottype === "bar" ? \'classification\' : \'regression\';\n        var current_rating = 3;\n        var current_description = current_target + " is predicted by " + current_predictors.join(" and ");\n        var current_metric = node.plottype === "bar" ? \'f1Macro\' : \'meanSquaredError\';\n        var current_disco = { target: current_target, predictors: current_predictors, task: current_task, rating: current_rating, description: current_description, metric: current_metric };\n        //jQuery.extend(true, current_disco, names);\n        disco[i] = current_disco;\n    };\n    /* Problem Array of the Form:\n        [1: {target:"Home_runs",\n            predictors:["Walks","RBIs"],\n            task:"regression",\n            rating:5,\n            description: "Home_runs is predicted by Walks and RBIs",\n            metric: "meanSquaredError"\n        },2:{...}]\n    */\n    return disco;\n}\n\n// This stores discovery problems\nvar probtable = exports.probtable = [];\n\nvar selectedProblem = exports.selectedProblem = void 0;\nvar setSelectedProblem = exports.setSelectedProblem = function setSelectedProblem(problem) {\n    return exports.selectedProblem = selectedProblem = problem;\n};\n\nvar checkedDiscoveryProblems = exports.checkedDiscoveryProblems = new Set();\nvar setCheckedDiscoveryProblem = exports.setCheckedDiscoveryProblem = function setCheckedDiscoveryProblem(status, problem) {\n    if (problem !== undefined) status ? checkedDiscoveryProblems.add(problem) : checkedDiscoveryProblems.delete(problem);else exports.checkedDiscoveryProblems = checkedDiscoveryProblems = status ? new Set(probtable.map(function (problem) {\n        return problem[0];\n    })) : new Set();\n};\n\nasync function submitDiscProb() {\n    discoveryLadda.start();\n    for (var i = 0; i < disco.length; i++) {\n        if (!checkedDiscoveryProblems.has(i)) continue;\n        //createpipeline call\n        console.log(disco);\n        var aux = { "task": d3mTaskType[disco[i].task][1], "metrics": d3mMetrics[disco[i].metric][1], "description": disco[i].description };\n        console.log(aux);\n        // VJD: this is the code to ask TA2 for a single pipeline, to check viability. However, TA2s might not actually handle \'maxpipelines\', making this take a very long time to run. Bypassing this for now\n        //  let res = await makeRequest(D3M_SVC_URL + \'/CreatePipelines\', CreatePipelineData(disco[i].predictors, [disco[i].target], aux)); // creating a single pipeline for a discovered problem, to check viability\n        //  if(res) { // have to check if the response went through ok, this just checks if res exists\n        var res = await makeRequest(D3M_SVC_URL + \'/write-user-problem\', CreatePipelineData(disco[i].predictors, [disco[i].target], aux));\n        //  }\n    }\n\n    discoveryLadda.stop();\n    // change status of buttons for estimating problem and marking problem as finished\n    $("#btnDiscovery").removeClass("btn-success");\n    $("#btnDiscovery").addClass("btn-default");\n    $("#btnSubmitDisc").removeClass("btn-success");\n    $("#btnSubmitDisc").addClass("btn-default");\n    exports.task1_finished = task1_finished = true;\n    if (!task2_finished) {\n        $("#btnEstimate").removeClass("btn-default");\n        $("#btnEstimate").addClass("btn-success");\n    };\n    byId("btnVariables").click();\n}\n\nfunction saveDisc(btn) {\n    var table = document.getElementById("discoveryTable");\n    var newtext = document.getElementById("discoveryInput").value;\n    for (var i = 1, row; row = table.rows[i]; i++) {\n        //skipping the header\n        if (row.className == \'item-select\') {\n            disco[i - 1].description = newtext;\n        }\n    }\n}\n\n// function to call a modal window\n\n// text and header are text\n// show is boolean\n// btnText is the text to go inside the button (eg "Reset"), but if false then no button appears\n// func is the function to execute when button is clicked, as a string (eg "location.reload()")\nfunction setModal(text, header, show, btnText, close, func) {\n    if (text) exports.modalText = modalText = text;\n    if (header) exports.modalHeader = modalHeader = header;\n    if (btnText) {\n        exports.modalButton = modalButton = btnText;\n        exports.modalClose = modalClose = close;\n        exports.modalBtnDisplay = modalBtnDisplay = \'block\';\n    } else {\n        exports.modalBtnDisplay = modalBtnDisplay = \'none\';\n    };\n    if (func) exports.modalFunc = modalFunc = func;\n    _mithril2.default.redraw();\n    show ? $(\'#myModal\').modal({ show: show, backdrop: \'static\', keyboard: false }) : $(\'#myModal\').modal("hide");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();\n\nexports.density = density;\nexports.bars = bars;\nexports.barsSubset = barsSubset;\nexports.densityNode = densityNode;\nexports.barsNode = barsNode;\nvar d3Color = \'#1f77b4\'; // d3\'s default blue\nvar selVarColor = exports.selVarColor = \'#fa8072\'; // d3.rgb("salmon");\n\n// function to use d3 to graph density plots with preprocessed data\nfunction density(node, div, priv) {\n    div = { setxLeft: \'#setxLeft\', setxLeftTopRight: \'#setxLeftTopRight\', Summary: \'#tabSummary\' }[div];\n\n    if (!div) return alert("Error: incorrect div selected for plots: " + div);\n\n    var _ref = [node.plotx, node.ploty],\n        xVals = _ref[0],\n        yVals = _ref[1];\n\n    if (priv && node.plotCI) {\n        var _map = [\'upperBound\', \'lowerBound\'].map(function (bound) {\n            return xVals.map(function (x, i) {\n                return { x: +x, y: +node.plotCI[bound][i] };\n            });\n        }),\n            _map2 = _slicedToArray(_map, 2),\n            _upperError = _map2[0],\n            _lowerError = _map2[1];\n\n        console.log(\'upperError\\n\', _upperError);\n    }\n\n    var tempWidth = d3.select(div).style("width");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n\n    var tw = document.getElementById(\'main\').offsetWidth;\n\n    var tempHeight = d3.select(div).style("height");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 10\n    };\n\n    // Need to fix automatic width and height settings for leftpanel (#tabSubset, #tabSummary)\n    if (div == "#tabSummary") {\n        // width = 0.7 * (width - margin.left - margin.right),\n        // height = 0.3 * (height - margin.top - margin.bottom);\n        width = 242;\n        height = 250;\n    } else if (div == "#setxLeft" || div == "#setxLeftTopRight") {\n        width = tw * .185 - margin.left - margin.right; //rightpanel.expand is 40 percent, setxLeft to 50 percent, toggle bar is 16px, padding, it\'s all about .185\n        height = width * .6; //height to width is .6\n    } else {\n        width = 0.35 * (width - margin.left - margin.right), height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n    var invx = d3.scale.linear().range([d3.min(xVals), d3.max(xVals)]).domain([0, width]);\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n    var xAxis = d3.svg.axis().scale(x).ticks(5).orient("bottom");\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n    var brush = d3.svg.brush().x(x).extent(node.subsetrange).on("brush", brushed);\n    var brush2 = d3.svg.brush().x(x).on("brush", brushed2);\n    var area = d3.svg.area().interpolate("monotone").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n    var line = d3.svg.line().x(function (d) {\n        return x(d.x);\n    }).y(function (d) {\n        return y(d.y);\n    }).interpolate("monotone");\n\n    // cumbersome to treat "tabSummary" differently, but works for now\n    // tabSummary, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (div == "#tabSummary") {\n        var plotsvg = d3.select(div).selectAll("svg").remove();\n        plotsvg = d3.select(div).append("svg").attr("id", function () {\n            return node.name.toString().concat(div.substr(1));\n        }).style("width", 300) // set height to the height of #main.left\n        .style("height", 200).append("g").attr("transform", \'translate(\' + margin.left + \',\' + margin.top + \')\');\n    } else {\n        var plotsvg = d3.select(div).append("svg").attr("id", function () {\n            return node.name.toString().replace(/\\(|\\)/g, "").concat("_", div.substr(1), "_", node.id);\n        }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n        .style("height", height + margin.top + margin.bottom).append("g").attr("transform", \'translate(\' + margin.left + \',\' + margin.top + \')\');\n    };\n    plotsvg.append("path").datum(xVals.map(function (x, i) {\n        return { x: +x, y: +node.ploty[i] };\n    })).attr("class", "area").attr("d", area);\n\n    //add upper bound\n    priv && node.plotCI && plotsvg.append("path").attr("class", "upperError").datum(upperError).attr("d", area);\n\n    //add lower bound\n    priv && node.plotCI && plotsvg.append("path").attr("class", "lowerError").datum(lowerError).attr("d", area);\n\n    plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(node.name);\n\n    // add brush if subset\n    // this tab doesn\'t exist anymore - Shoeboxam\n    if (div == "#tabSubset") {\n        plotsvg.append("text").attr("id", "range").attr("x", 25).attr("y", height + 40).text(function () {\n            return "Range: ".concat(d3.min(xVals).toPrecision(4), " to ", d3.max(xVals).toPrecision(4));\n        });\n        plotsvg.append("g").attr("class", "x brush").call(brush).selectAll("rect").attr("height", height);\n    }\n\n    // add z lines and sliders setx\n    if (div == "#setxLeft" || div == "#setxLeftTopRight") {\n        plotsvg.append("text").attr("id", "range") // this is bad practice, id is not unique\n        .attr(\'class\', \'xval\').attr("x", 25).attr("y", height + 40).text(function () {\n            return "x: ".concat((+node.mean).toPrecision(4));\n        });\n\n        plotsvg.append("text").attr("id", "range2") // this is bad practice, id is not unique\n        .attr(\'class\', \'x1val\').attr("x", 25).attr("y", height + 50).text(function (_) {\n            var returnval = "x1: ".concat((+node.mean).toPrecision(4));\n            return returnval;\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate("linear");\n\n        var colSeq = ["#A2CD5A", "orange", "red"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (d3.min(xVals) - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (d3.max(xVals) - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height * .8 + ")").call(d3.svg.axis().scale(x).ticks(0).orient("bottom"));\n        var slider = plotsvg.append("g").attr("class", "slider").call(brush);\n        var handle = slider.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .7 + ")").attr("points", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[0] == \'\' ? x(node.mean) : x(node.setxvals[0]);\n            return xnm - s + "," + -s + " " + (xnm + s) + "," + -s + " " + xnm + "," + s * 1.3;\n        });\n        var slider2 = plotsvg.append("g").attr("class", "slider").call(brush2);\n        var handle2 = slider2.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .9 + ")").attr("points", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[1] == \'\' ? x(node.mean) : x(node.setxvals[1]);\n            return xnm - s + "," + s + " " + (xnm + s) + "," + s + " " + xnm + "," + -s * 1.3;\n        });\n    }\n\n    // brushing functions\n    function brushed() {\n        if (div == "#tabSummary") {\n            plotsvg.select("text#range").text(function () {\n                return brush.empty() ? "Range: ".concat(d3.min(xVals).toPrecision(4), " to ", d3.max(xVals).toPrecision(4)) : "Range: ".concat(brush.extent()[0].toPrecision(4), " to ", brush.extent()[1].toPrecision(4));\n            });\n            node.subsetrange = brush.extent()[0].toPrecision(4) != brush.extent()[1].toPrecision(4) ? [brush.extent()[0].toPrecision(4), brush.extent()[1].toPrecision(4)] : ["", ""];\n        } else if (div == "#setxLeft" || div == "#setxLeftTopRight") {\n            var value = brush.extent()[0];\n            var s = 6;\n            if (d3.event.sourceEvent) {\n                value = x.invert(d3.mouse(this)[0]);\n                brush.extent([value, value]);\n            }\n\n            // set x position of slider center\n            var xpos = x(value);\n            if (value > d3.max(xVals)) {\n                // dragged past max\n                xpos = x(d3.max(xVals));\n            } else if (value < d3.min(xVals)) {\n                // dragged past min\n                xpos = x(d3.min(xVals));\n            } else {\n                var m = +node.mean;\n                var sd = +node.sd;\n                var zScore = (value - m) / sd; // z-score\n                var zRound = Math.round(zScore); // nearest integer z-score\n                if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                    xpos = x(m + zRound * sd);\n            }\n\n            // create slider symbol and text\n            handle.attr("points", function (_) {\n                return xpos - s + "," + -s + " " + (xpos + s) + "," + -s + " " + xpos + "," + s * 1.3;\n            });\n            plotsvg.select("text#range").text(function (_) {\n                var returnval = "x: ".concat(invx(xpos).toPrecision(4));\n                var xval = invx(xpos).toPrecision(4);\n                var mycell = node.name + "From"; // hardcoded here\n                if (document.getElementById(mycell)) {\n                    document.getElementById(mycell).innerText = xval;\n                }\n                return returnval;\n            });\n            node.setxvals[0] = invx(xpos).toPrecision(4);\n        }\n    }\n\n    // certainly a more clever way to do this, but for now it\'s basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > d3.max(xVals)) {\n            // dragged past max\n            xpos = x(d3.max(xVals));\n        } else if (value < d3.min(xVals)) {\n            // dragged past min\n            xpos = x(d3.min(xVals));\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                xpos = x(m + zRound * sd);\n        }\n\n        // create slider symbol and text\n        handle2.attr("points", function (_) {\n            return xpos - s + "," + s + " " + (xpos + s) + "," + s + " " + xpos + "," + -s * 1.3;\n        });\n        plotsvg.select("text#range2").text(function (_) {\n            var returnval = "x1: ".concat(invx(xpos).toPrecision(4));\n            var x1val = invx(xpos).toPrecision(4);\n            var mycell = node.name + "To"; // hardcoded here\n            if (document.getElementById(mycell)) {\n                document.getElementById(mycell).innerText = x1val;\n            }\n            return returnval;\n        });\n        node.setxvals[1] = invx(xpos).toPrecision(4);\n    }\n}\n\nfunction bars(node, div, priv) {\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var ciUpperVals = new Array();\n    var ciLowerVals = new Array();\n    var ciSize;\n\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature == "nominal") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[xi] = node.plotValuesCI.lowerBound[keys[i]];\n                    ciUpperVals[xi] = node.plotValuesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[xi] - ciLowerVals[xi];\n            };\n\n            yValKey.push({\n                y: yVals[xi],\n                x: keys[i]\n            });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n        ciUpperVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n        ciLowerVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            // console.log("plotvalues in bars");\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[i] = node.plotvaluesCI.lowerBound[keys[i]];\n                    ciUpperVals[i] = node.plotvaluesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[i] - ciLowerVals[i];\n            }\n        }\n    }\n\n    if (yVals.length > 15 & node.numchar == "numeric" || yVals.length > 5 & node.numchar == "character") plotXaxis = false;\n    var maxY = d3.max(yVals); // in the future, set maxY to the value of the maximum confidence limit\n    if (priv && node.plotvaluesCI) maxY = d3.max(ciUpperVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var mydiv = void 0;\n    if (div == "setxLeft") mydiv = "#setxLeft";else if (div == "Summary") mydiv = "#tabSummary";else if (div == "setxLeftTopRight") mydiv = "#setxLeftTopRight";else return alert("Error: incorrect div selected for plots");\n\n    var tempWidth = d3.select(mydiv).style("width");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n    var tempHeight = d3.select(mydiv).style("height");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 10\n    };\n    var tw = document.getElementById(\'main\').offsetWidth;\n\n    // Need to fix automatic width and height settings for leftpanel (#tabSubset, #tabSummary)\n    if (mydiv == "#tabSummary") {\n        // width = 0.7 * (width - margin.left - margin.right);\n        // height = 0.3 * (height - margin.top - margin.bottom);\n        width = 242;\n        height = 250;\n    } else if (mydiv == "#setxLeft" || mydiv == "#setxLeftTopRight") {\n        //width = 200;\n        //height = 120;\n        width = tw * .185 - margin.left - margin.right; //rightpanel.expand is 40 percent, setxLeft to 50 percent, toggle bar is 16px, padding, it\'s all about .185\n        height = width * .6; //height to width is .6\n    } else {\n        width = 0.35 * (width - margin.left - margin.right);\n        height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    if (priv && node.stabilityBin) {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 1.5]).range([0, width]);\n    } else {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n    }\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient("bottom");\n\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n\n    var brush = d3.svg.brush().x(x).extent(function () {\n        return node.subsetrange.length == 1 ? [node.subsetrange[0], node.subsetrange[0]] : node.subsetrange;\n    }).on("brush", brushed);\n\n    var brush2 = d3.svg.brush().x(x).on("brush", brushed2);\n\n    // Create SVG element\n    // cumbersome to treat "tabSummary" differently, but works for now\n    // tabSummary, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (mydiv == "#tabSummary") {\n        var plotsvg = d3.select(mydiv).selectAll("svg").remove();\n\n        var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n            return node.name.toString().concat(mydiv.substr(1));\n        }).style("width", 300) //setting height to the height of #main.left\n        .style("height", 200).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n    } else {\n        var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n            var myname = node.name.toString();\n            myname = myname.replace(/\\(|\\)/g, "");\n            return myname.concat("_", mydiv.substr(1), "_", node.id);\n        }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n        .style("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n    };\n\n    var rectWidth = x(minX + 0.5 - 2 * barPadding); //the "width" is the coordinate of the end of the first bar\n\n    plotsvg.selectAll("rect").data(yVals).enter().append("rect").attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(maxY - d);\n    }).attr("width", rectWidth).attr("height", y).attr("fill", "#1f77b4");\n\n    // draw error bars, threshold line and extra bin\n    if (priv) {\n        if (yVals.length <= 20) {\n            plotsvg.selectAll("line").data(ciUpperVals).enter().append("line").style("stroke", "black").attr("x1", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr("y2", function (d) {\n                var y2 = y(maxY - d + ciSize);\n                return y2 >= y(maxY) ? y(maxY) : y2;\n            });\n\n            //draw top ticks on error bars\n            //need to fix the height of the graphs - the tops of error bars are getting cut off\n            plotsvg.selectAll(".topTick").data(ciUpperVals).enter().append("line").attr("class", "topTick").style("stroke", "black").attr("x1", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding); //make tick bigger to increase visibility\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth; //make tick bigger to increase visibility\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr("y2", function (d) {\n                return y(maxY - d);\n            });\n\n            // draw bottom ticks of error bars\n            plotsvg.selectAll(".bottomTick").data(ciLowerVals).enter().append("line").attr("class", "bottomTick").style("stroke", "black").attr("x1", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding);\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth;\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr("y2", function (d) {\n                return y(maxY - d);\n            });\n        } else {\n            plotsvg.selectAll(".denseError").data(yVals).enter().append("rect").attr("class", "denseError").attr("x", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding);\n            }).attr("y", function (d) {\n                return y(maxY - d) - .1 * y(d);\n            }).attr("width", rectWidth).attr("height", function (d) {\n                return y(maxY - d) + .1 * y(d) - (y(maxY - d) - .1 * y(d));\n            }).attr("fill", "silver");\n        }\n\n        //if statement for stability histograms\n        //extra stability bin\n        if (node.stabilityBin) {\n            plotsvg.append("rect").attr("x", x(maxX + 0.5 - barPadding)).attr("y", y(maxY) - node.stabilityBin).attr("width", rectWidth).attr("height", node.stabilityBin).attr("fill", "silver");\n        }\n\n        //threshold line\n        if (node.threshold) {\n            plotsvg.append("line").style("stroke", "black").attr("x1", x(minX - 0.5 + barPadding)).attr("y1", y(maxY) - node.threshold).attr("x2", function () {\n                console.log("stabilityBin");\n                console.log(node.stabilityBin);\n                if (node.stabilityBin) {\n                    return x(maxX + 0.5 - barPadding) + rectWidth;\n                } else {\n                    return x(maxX + 0.5 - barPadding);\n                }\n            }).attr("y2", y(maxY) - node.threshold);\n        }\n    }\n\n    if (plotXaxis) {\n        plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n    }\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(node.name);\n\n    if (mydiv == "#setxLeft" || mydiv == "#setxLeftTopRight") {\n        plotsvg.append("text").attr("id", "range") // bad practice, not unique\n        .attr(\'class\', \'xval\').attr("x", 25).attr("y", height + 40).text(function () {\n            if (node.nature === "nominal") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                var mycell = node.name + "From"; // hardcoded here\n                if (document.getElementById(mycell)) {\n                    document.getElementById(mycell).innerText = yValKey[t].x;\n                }\n                return "x: " + yValKey[t].x;\n            } else {\n                var _mycell = node.name + "From"; // hardcoded here\n                if (document.getElementById(_mycell)) {\n                    document.getElementById(_mycell).innerText = (+node.mean).toPrecision(4).toString();\n                }\n                return "x: ".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        plotsvg.append("text").attr("id", "range2") //bad practice, not unique\n        .attr(\'class\', \'x1val\').attr("x", 25).attr("y", height + 50).text(function () {\n            if (node.nature === "nominal") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                return "x1: " + yValKey[t].x;\n            } else {\n                return "x1: ".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate("linear");\n\n        var colSeq = ["#A2CD5A", "orange", "red"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (minX - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (maxX - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = d3.min(xVals); i <= d3.max(xVals); i++) {\n            lineData = [{\n                "x": x(i),\n                "y": height * .75\n            }, {\n                "x": x(i),\n                "y": height * .85\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", "black").attr("stroke-width", 1).attr("fill", "none");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height * .8 + ")").call(d3.svg.axis().scale(x).ticks(0).orient("bottom"));\n\n        var slider = plotsvg.append("g").attr("class", "slider").call(brush);\n        var slider2 = plotsvg.append("g").attr("class", "slider").call(brush2);\n\n        var points = function points(i) {\n            return function (d) {\n                var xnm = void 0,\n                    s = 6;\n                if (node.setxvals[i] == \'\') {\n                    // if nominal, use the median frequency as the position for the setx slider\n                    xnm = node.nature == \'nominal\' ? x(Math.round(xVals.length / 2) - 1) : x(node.mean);\n                } else {\n                    xnm = x(node.setxvals[i]);\n                };\n                return xnm - s + \',\' + -s + \' \' + (xnm + s) + \',\' + -s + \' \' + xnm + \',\' + s * 1.3;\n            };\n        };\n        var handle = slider.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .7 + ")").attr("points", points(0));\n        var handle2 = slider2.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .9 + ")").attr("points", points(1));\n    }\n\n    function twoSF(x) {\n        var tsf = d3.format(".2r"); // format to two significant figures after the decimal place\n        return tsf(x).replace(/0+$/, "").replace(/\\.$/, ""); // trim trailing zeros after a period, and any orphaned period\n    }\n\n    // brushing functions\n    function brushed() {\n        var value = brush.extent()[0];\n        var s = 6;\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle.attr("points", function (d) {\n            return xpos - s + "," + -s + " " + (xpos + s) + "," + -s + " " + xpos + "," + s * 1.3;\n        });\n        plotsvg.select("text#range").text(function () {\n            if (node.nature === "nominal") {\n                var mycell = node.name + "From"; // hardcoded here\n                if (document.getElementById(mycell)) {\n                    document.getElementById(mycell).innerText = yValKey[Math.round(invx(xpos))].x;\n                }\n                return "x: " + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                var _mycell2 = node.name + "From"; // hardcoded here\n                if (document.getElementById(_mycell2)) {\n                    document.getElementById(_mycell2).innerText = +invx(xpos).toPrecision(4).toString();\n                }\n                return "x: ".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[0] = +invx(xpos).toPrecision(4);\n    }\n\n    // certainly a more clever way to do this, but for now it\'s basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle2.attr("points", function (d) {\n            return xpos - s + "," + s + " " + (xpos + s) + "," + s + " " + xpos + "," + -s * 1.3;\n        });\n        plotsvg.select("text#range2").text(function () {\n            if (node.nature === "nominal") {\n                var mycell = node.name + "To"; // hardcoded here\n                if (document.getElementById(mycell)) {\n                    document.getElementById(mycell).innerText = yValKey[Math.round(invx(xpos))].x;\n                }\n                return "x1: " + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                var _mycell3 = node.name + "To"; // hardcoded here\n                if (document.getElementById(_mycell3)) {\n                    document.getElementById(_mycell3).innerText = +invx(xpos).toPrecision(4).toString();\n                }\n                return "x1: ".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[1] = +invx(xpos).toPrecision(4);\n    }\n}\n\n// draws barplots in subset tab\nfunction barsSubset(node) {\n    // if untouched, set node.subsetrange to an empty array, meaning all values selected by default\n    if (node.subsetrange[0] == "" & node.subsetrange[1] == "") {\n        node.subsetrange = [];\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Variable name\n    var myname = node.name.toString();\n    myname = myname.replace(/\\(|\\)/g, "");\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    var xi = 0;\n    for (var i = 0; i < keys.length; i++) {\n        if (node.plotvalues[keys[i]] == 0) continue;\n        yVals[xi] = node.plotvalues[keys[i]];\n        xVals[xi] = xi;\n        yValKey.push({\n            y: yVals[xi],\n            x: keys[i]\n        });\n        xi = xi + 1;\n    }\n    if (node.nature === "nominal") {\n        // if nominal, orders bars left to right, highest frequency to lowest\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    }\n\n    plotXaxis = false;\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n    var gname = ["subsetyes", "subsetno"];\n\n    var yVals2 = [];\n    var yVals1 = [];\n    for (i = 0; i < yVals.length; i++) {\n        yVals1.push({\n            y0: maxY - yVals[i],\n            y1: yVals[i],\n            col: d3Color\n        });\n        yVals2.push({\n            y0: 0,\n            y1: maxY - yVals[i],\n            col: "transparent"\n        });\n    }\n    var freqs = [yVals1, yVals2];\n\n    // y0 is the starting point\n    // y1 is the length of the bar\n\n    var mydiv = "#tabSubset";\n    var width = 200;\n    var height = 120;\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 50\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient("bottom");\n\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n\n    //Create SVG element\n    var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n        return myname.concat("_", mydiv.substr(1), "_", node.id);\n    }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n    .style("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    var freq = plotsvg.selectAll("g.freq").data(freqs).enter().append("g").attr("class", "freq").attr("name", function (d, i) {\n        return myname.concat(gname[i]);\n    });\n\n    var rect = freq.selectAll("rect").data(Object).enter().append("rect").attr("class", "bar").attr("name", function (d, i) {\n        return xVals[i];\n    }).attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(d.y0);\n    }).attr("width", x(minX + 0.5 - 2 * barPadding)) // the "width" is the coordinate of the end of the first bar\n    .attr("height", function (d) {\n        return y(d.y1);\n    }).style("fill", function (d, i) {\n        if (node.subsetrange.length > 0 & d.col === d3Color & $.inArray(xVals[i].toString(), node.subsetrange) > -1) {\n            return selVarColor;\n        } else {\n            return d.col;\n        }\n    }).on("click", function () {\n        var selectMe = this;\n        var selectName = this.getAttribute("name");\n        if (this.parentNode.getAttribute("name") == myname.concat("subsetno")) {\n            selectMe = $(\'[name="\' + myname.concat("subsetyes") + \'"]\').children(\'[name="\' + selectName + \'"]\')[0];\n        }\n        d3.select(selectMe).style("fill", function (d, i) {\n            var myCol = "";\n            if (this.style.fill === selVarColor) {\n                var myindex = node.subsetrange.indexOf(this.getAttribute("name"));\n                node.subsetrange.splice(myindex, 1);\n                myCol = d3Color;\n            } else {\n                node.subsetrange.push(this.getAttribute("name"));\n                myCol = selVarColor;\n            }\n            return myCol;\n        });\n        plotsvg.select("text#selectrange").text(function () {\n            if (node.subsetrange.length == 0) {\n                return "Selected: all values";\n            } else {\n                var a = node.subsetrange;\n                var selecteds = new Array();\n                a.forEach(function (val) {\n                    selecteds.push(yValKey[val].x);\n                });\n                return "Selected: " + selecteds;\n            }\n        });\n    }).on("mouseover", function () {\n        var i = this.getAttribute("name");\n        plotsvg.select("text#mymouseover").text(function () {\n            return yValKey[i].x + ": " + yValKey[i].y;\n        });\n    }).on("mouseout", function () {\n        var i = this.getAttribute("name");\n        plotsvg.select("text#mymouseover").text(function () {\n            return "Value: Frequency";\n        });\n    });\n\n    if (plotXaxis) {\n        plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n    } else {\n        plotsvg.append("text").attr("id", "mymouseover").attr("x", 25).attr("y", height + 20).text(function () {\n            return "Value: Frequency";\n        });\n    }\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(myname);\n\n    plotsvg.append("text").attr("id", "selectrange").attr("x", 25).attr("y", height + 40).text(function () {\n        if (node.subsetrange.length == 0) return "Selected: all values";\n        var selecteds = new Array();\n        node.subsetrange.forEach(function (val) {\n            return selecteds.push(yValKey[val].x);\n        });\n        return "Selected: " + selecteds;\n    });\n}\n\nfunction densityNode(node, obj) {\n    var myname = node.name.toString().concat("nodeplot");\n\n    if (typeof obj === "undefined") {\n        var obj = document.getElementById(node.name.toString() + "biggroup");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll("svg")[0].length > 0) d3.select(obj).selectAll("svg").remove();\n    }\n\n    var yVals = node.ploty;\n    var xVals = node.plotx;\n    // array of objects\n    var data2 = node.plotx.map(function (x, i) {\n        return { x: +x, y: +node.ploty[i] };\n    });\n\n    var width = 60; // hardcoded, should be set automatically\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n\n    var area = d3.svg.area().interpolate("monotone").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n\n    var plotsvg = d3.select(obj).insert("svg", ":first-child").attr("x", -40) // NOTE: Not sure exactly why these numbers work, but these hardcoded values seem to position the plot inside g correctly.  this shouldn\'t be hardcoded in the future\n    .attr("y", -45).attr("id", function () {\n        return myname;\n    }).style("width", width).style("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    plotsvg.append("path").datum(data2).attr("class", "area").attr("d", area);\n}\n\nfunction barsNode(node, obj) {\n    var myname = node.name.toString().concat("nodeplot");\n\n    if (typeof obj === "undefined") {\n        var obj = document.getElementById(node.name.toString() + "biggroup");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll("svg")[0].length > 0) {\n            d3.select(obj).selectAll("svg").remove();\n        }\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature === "nominal") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            yValKey.push({ y: yVals[xi], x: keys[i] });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n        }\n    }\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var width = 60;\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    //Create SVG element\n    var plotsvg = d3.select(obj).insert("svg", ":first-child").attr("x", -40).attr("y", -45).attr("id", function () {\n        return myname;\n    }).style("width", width) // set height to the height of #main.left\n    .style("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    plotsvg.selectAll("rect").data(yVals).enter().append("rect").attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(maxY - d);\n    }).attr("width", x(minX + 0.5 - 2 * barPadding)) // the "width" is the coordinate of the end of the first bar\n    .attr("height", y).attr("fill", "#1f77b4");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.searchIndex = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(3);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar searchIndex = exports.searchIndex = void 0;\n\nvar search = function search(val) {\n    var all = app.allNodes;\n    if (val === '') {\n        exports.searchIndex = searchIndex = null;\n        return app.valueKey = all.map(function (n) {\n            return n.name;\n        });\n    }\n\n    var matches = [],\n        others = [],\n        match = function match(n, key) {\n        return n[key].toLowerCase().includes(val.toLowerCase());\n    };\n\n    all.forEach(function (n) {\n        return match(n, 'name') || match(n, 'labl') ? matches.push(n) : others.push(n);\n    });\n    exports.searchIndex = searchIndex = matches.length;\n    app.valueKey = matches.concat(others).map(function (n) {\n        return n.name;\n    });\n};\n\nvar Search = function () {\n    function Search() {\n        _classCallCheck(this, Search);\n    }\n\n    _createClass(Search, [{\n        key: 'view',\n        value: function view(vnode) {\n            vnode.attrs.oninput = _mithril2.default.withAttr('value', search);\n            return (0, _mithril2.default)('input#searchvar.form-control[style=margin-bottom: 5px; width: 100%]', vnode.attrs);\n        }\n    }]);\n\n    return Search;\n}();\n\nexports.default = Search;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1NlYXJjaC5qcz8xMzc4Il0sIm5hbWVzIjpbImFwcCIsInNlYXJjaEluZGV4Iiwic2VhcmNoIiwiYWxsIiwiYWxsTm9kZXMiLCJ2YWwiLCJ2YWx1ZUtleSIsIm1hcCIsIm4iLCJuYW1lIiwibWF0Y2hlcyIsIm90aGVycyIsIm1hdGNoIiwia2V5IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImZvckVhY2giLCJwdXNoIiwibGVuZ3RoIiwiY29uY2F0IiwiU2VhcmNoIiwidm5vZGUiLCJhdHRycyIsIm9uaW5wdXQiLCJ3aXRoQXR0ciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7SUFBWUEsRzs7QUFDWjs7Ozs7Ozs7QUFFTyxJQUFJQywwQ0FBSjs7QUFFUCxJQUFJQyxTQUFTLFNBQVRBLE1BQVMsTUFBTztBQUNoQixRQUFJQyxNQUFNSCxJQUFJSSxRQUFkO0FBQ0EsUUFBSUMsUUFBUSxFQUFaLEVBQWdCO0FBQ1osZ0JBTEdKLFdBS0gsaUJBQWMsSUFBZDtBQUNBLGVBQU9ELElBQUlNLFFBQUosR0FBZUgsSUFBSUksR0FBSixDQUFRO0FBQUEsbUJBQUtDLEVBQUVDLElBQVA7QUFBQSxTQUFSLENBQXRCO0FBQ0g7O0FBTGUsUUFNWEMsT0FOVyxHQU1nQixFQU5oQjtBQUFBLFFBTUZDLE1BTkUsR0FNb0IsRUFOcEI7QUFBQSxRQU1NQyxLQU5OLEdBTXdCLFNBQWxCQSxLQUFrQixDQUFDSixDQUFELEVBQUlLLEdBQUo7QUFBQSxlQUFZTCxFQUFFSyxHQUFGLEVBQU9DLFdBQVAsR0FBcUJDLFFBQXJCLENBQThCVixJQUFJUyxXQUFKLEVBQTlCLENBQVo7QUFBQSxLQU54Qjs7QUFPaEJYLFFBQUlhLE9BQUosQ0FBWTtBQUFBLGVBQUtKLE1BQU1KLENBQU4sRUFBUyxNQUFULEtBQW9CSSxNQUFNSixDQUFOLEVBQVMsTUFBVCxDQUFwQixHQUF1Q0UsUUFBUU8sSUFBUixDQUFhVCxDQUFiLENBQXZDLEdBQXlERyxPQUFPTSxJQUFQLENBQVlULENBQVosQ0FBOUQ7QUFBQSxLQUFaO0FBQ0EsWUFWT1AsV0FVUCxpQkFBY1MsUUFBUVEsTUFBdEI7QUFDQWxCLFFBQUlNLFFBQUosR0FBZUksUUFDVlMsTUFEVSxDQUNIUixNQURHLEVBRVZKLEdBRlUsQ0FFTjtBQUFBLGVBQUtDLEVBQUVDLElBQVA7QUFBQSxLQUZNLENBQWY7QUFHSCxDQVpEOztJQWNNVyxNOzs7Ozs7OzZCQUNHQyxLLEVBQU87QUFDUkEsa0JBQU1DLEtBQU4sQ0FBWUMsT0FBWixHQUFzQixrQkFBRUMsUUFBRixDQUFXLE9BQVgsRUFBb0J0QixNQUFwQixDQUF0QjtBQUNBLG1CQUFPLHVCQUFFLHFFQUFGLEVBQXlFbUIsTUFBTUMsS0FBL0UsQ0FBUDtBQUNIOzs7Ozs7a0JBR1VGLE0iLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4vYXBwJztcbmltcG9ydCB7c2VsVmFyQ29sb3J9IGZyb20gJy4uL3Bsb3RzJztcblxuZXhwb3J0IGxldCBzZWFyY2hJbmRleDtcblxubGV0IHNlYXJjaCA9IHZhbCA9PiB7XG4gICAgbGV0IGFsbCA9IGFwcC5hbGxOb2RlcztcbiAgICBpZiAodmFsID09PSAnJykge1xuICAgICAgICBzZWFyY2hJbmRleCA9IG51bGw7XG4gICAgICAgIHJldHVybiBhcHAudmFsdWVLZXkgPSBhbGwubWFwKG4gPT4gbi5uYW1lKTtcbiAgICB9XG4gICAgbGV0IFttYXRjaGVzLCBvdGhlcnMsIG1hdGNoXSA9IFtbXSwgW10sIChuLCBrZXkpID0+IG5ba2V5XS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHZhbC50b0xvd2VyQ2FzZSgpKV07XG4gICAgYWxsLmZvckVhY2gobiA9PiBtYXRjaChuLCAnbmFtZScpIHx8IG1hdGNoKG4sICdsYWJsJykgPyBtYXRjaGVzLnB1c2gobikgOiBvdGhlcnMucHVzaChuKSk7XG4gICAgc2VhcmNoSW5kZXggPSBtYXRjaGVzLmxlbmd0aDtcbiAgICBhcHAudmFsdWVLZXkgPSBtYXRjaGVzXG4gICAgICAgIC5jb25jYXQob3RoZXJzKVxuICAgICAgICAubWFwKG4gPT4gbi5uYW1lKTtcbn07XG5cbmNsYXNzIFNlYXJjaCB7XG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICB2bm9kZS5hdHRycy5vbmlucHV0ID0gbS53aXRoQXR0cigndmFsdWUnLCBzZWFyY2gpO1xuICAgICAgICByZXR1cm4gbSgnaW5wdXQjc2VhcmNodmFyLmZvcm0tY29udHJvbFtzdHlsZT1tYXJnaW4tYm90dG9tOiA1cHg7IHdpZHRoOiAxMDAlXScsIHZub2RlLmF0dHJzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvU2VhcmNoLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.when = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar when = exports.when = function when(side, val) {\n    var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'block';\n    var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none';\n\n    return app[side + 'tab'] === val ? y : n;\n};\n\nvar PanelButton = function () {\n    function PanelButton() {\n        _classCallCheck(this, PanelButton);\n    }\n\n    _createClass(PanelButton, [{\n        key: 'view',\n        value: function view(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                id = _vnode$attrs.id,\n                id2 = _vnode$attrs.id2,\n                classes = _vnode$attrs.classes,\n                onclick = _vnode$attrs.onclick,\n                style = _vnode$attrs.style,\n                title = _vnode$attrs.title,\n                is_explore_mode = _vnode$attrs.is_explore_mode;\n\n            var left = id2 ? true : false;\n            id2 = id2 || id;\n            var disabled = is_explore_mode && !app.explored;\n            return (0, _mithril2.default)('button#' + id + '.btn.' + (classes || when(left ? 'left' : 'right', id2, 'active', disabled ? 'btn.disabled' : 'btn-default')) + '[type=button]', {\n                onclick: onclick || function (_) {\n                    return left ? app.probDiscView(id2) : disabled || app.tabRight(id2);\n                },\n                style: style,\n                title: title }, vnode.children);\n        }\n    }]);\n\n    return PanelButton;\n}();\n\nexports.default = PanelButton;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1BhbmVsQnV0dG9uLmpzP2M4NTciXSwibmFtZXMiOlsiYXBwIiwid2hlbiIsInNpZGUiLCJ2YWwiLCJ5IiwibiIsIlBhbmVsQnV0dG9uIiwidm5vZGUiLCJhdHRycyIsImlkIiwiaWQyIiwiY2xhc3NlcyIsIm9uY2xpY2siLCJzdHlsZSIsInRpdGxlIiwiaXNfZXhwbG9yZV9tb2RlIiwibGVmdCIsImRpc2FibGVkIiwiZXhwbG9yZWQiLCJwcm9iRGlzY1ZpZXciLCJ0YWJSaWdodCIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQUVBOztJQUFZQSxHOzs7Ozs7OztBQUVMLElBQUlDLHNCQUFPLFNBQVBBLElBQU8sQ0FBU0MsSUFBVCxFQUFlQyxHQUFmLEVBQXlDO0FBQUEsUUFBckJDLENBQXFCLHVFQUFuQixPQUFtQjtBQUFBLFFBQVZDLENBQVUsdUVBQVIsTUFBUTs7QUFDdkQsV0FBT0wsSUFBSUUsT0FBTyxLQUFYLE1BQXNCQyxHQUF0QixHQUE0QkMsQ0FBNUIsR0FBZ0NDLENBQXZDO0FBQ0gsQ0FGTTs7SUFJREMsVzs7Ozs7Ozs2QkFDR0MsSyxFQUFPO0FBQUEsK0JBQ3lEQSxNQUFNQyxLQUQvRDtBQUFBLGdCQUNIQyxFQURHLGdCQUNIQSxFQURHO0FBQUEsZ0JBQ0NDLEdBREQsZ0JBQ0NBLEdBREQ7QUFBQSxnQkFDTUMsT0FETixnQkFDTUEsT0FETjtBQUFBLGdCQUNlQyxPQURmLGdCQUNlQSxPQURmO0FBQUEsZ0JBQ3dCQyxLQUR4QixnQkFDd0JBLEtBRHhCO0FBQUEsZ0JBQytCQyxLQUQvQixnQkFDK0JBLEtBRC9CO0FBQUEsZ0JBQ3NDQyxlQUR0QyxnQkFDc0NBLGVBRHRDOztBQUVSLGdCQUFJQyxPQUFPTixNQUFNLElBQU4sR0FBYSxLQUF4QjtBQUNBQSxrQkFBTUEsT0FBT0QsRUFBYjtBQUNBLGdCQUFJUSxXQUFXRixtQkFBbUIsQ0FBQ2YsSUFBSWtCLFFBQXZDO0FBQ0EsbUJBQU8sbUNBQ09ULEVBRFAsY0FDaUJFLFdBQVdWLEtBQUtlLE9BQU8sTUFBUCxHQUFnQixPQUFyQixFQUE4Qk4sR0FBOUIsRUFBbUMsUUFBbkMsRUFBNkNPLFdBQVcsY0FBWCxHQUE0QixhQUF6RSxDQUQ1QixxQkFDb0k7QUFDdklMLHlCQUFTQSxXQUFZO0FBQUEsMkJBQUtJLE9BQU9oQixJQUFJbUIsWUFBSixDQUFpQlQsR0FBakIsQ0FBUCxHQUErQk8sWUFBWWpCLElBQUlvQixRQUFKLENBQWFWLEdBQWIsQ0FBaEQ7QUFBQSxpQkFEa0g7QUFFdklHLHVCQUFPQSxLQUZnSTtBQUd2SUMsdUJBQU9BLEtBSGdJLEVBRHBJLEVBS0hQLE1BQU1jLFFBTEgsQ0FBUDtBQU1IOzs7Ozs7a0JBR1VmLFciLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4vYXBwJztcblxuZXhwb3J0IGxldCB3aGVuID0gZnVuY3Rpb24oc2lkZSwgdmFsLCB5PSdibG9jaycsIG49J25vbmUnKSB7XG4gICAgcmV0dXJuIGFwcFtzaWRlICsgJ3RhYiddID09PSB2YWwgPyB5IDogbjtcbn07XG5cbmNsYXNzIFBhbmVsQnV0dG9uIHtcbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7aWQsIGlkMiwgY2xhc3Nlcywgb25jbGljaywgc3R5bGUsIHRpdGxlLCBpc19leHBsb3JlX21vZGV9ID0gdm5vZGUuYXR0cnM7XG4gICAgICAgIGxldCBsZWZ0ID0gaWQyID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICBpZDIgPSBpZDIgfHwgaWQ7XG4gICAgICAgIGxldCBkaXNhYmxlZCA9IGlzX2V4cGxvcmVfbW9kZSAmJiAhYXBwLmV4cGxvcmVkO1xuICAgICAgICByZXR1cm4gbShcbiAgICAgICAgICAgIGBidXR0b24jJHtpZH0uYnRuLiR7Y2xhc3NlcyB8fCB3aGVuKGxlZnQgPyAnbGVmdCcgOiAncmlnaHQnLCBpZDIsICdhY3RpdmUnLCBkaXNhYmxlZCA/ICdidG4uZGlzYWJsZWQnIDogJ2J0bi1kZWZhdWx0Jyl9W3R5cGU9YnV0dG9uXWAsIHtcbiAgICAgICAgICAgIG9uY2xpY2s6IG9uY2xpY2sgfHwgKF8gPT4gbGVmdCA/IGFwcC5wcm9iRGlzY1ZpZXcoaWQyKSA6IGRpc2FibGVkIHx8IGFwcC50YWJSaWdodChpZDIpKSxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZX0sXG4gICAgICAgICAgICB2bm9kZS5jaGlsZHJlbik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYW5lbEJ1dHRvbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvUGFuZWxCdXR0b24uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(3);\n\nvar plots = _interopRequireWildcard(_plots);\n\nvar _Search = __webpack_require__(4);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PanelList = function () {\n    function PanelList() {\n        _classCallCheck(this, PanelList);\n    }\n\n    _createClass(PanelList, [{\n        key: 'view',\n        value: function view(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                items = _vnode$attrs.items,\n                content = _vnode$attrs.content,\n                title = _vnode$attrs.title,\n                probDesc = _vnode$attrs.probDesc,\n                onclick = _vnode$attrs.onclick;\n\n            return (0, _mithril2.default)('#varList[style=display: block]', items.map(function (v, i) {\n                return (0, _mithril2.default)('p#' + v.replace(/\\W/g, '_'), {\n                    class: probDesc ? app.d3mProblemDescription[probDesc] === v ? 'item-select' : app.locktoggle ? 'item-default item-lineout' : 'item-default' : '',\n                    style: {\n                        'background-color': probDesc ? '' : app.zparams.zdv.includes(v) ? app.hexToRgba(app.dvColor) : app.zparams.znom.includes(v) ? app.hexToRgba(app.nomColor) : app.nodes.map(function (n) {\n                            return n.name;\n                        }).includes(v) ? app.hexToRgba(plots.selVarColor) : app.varColor,\n                        'border-color': '#000000',\n                        'border-style': !probDesc && _Search.searchIndex && i < _Search.searchIndex ? 'solid' : 'none',\n                        'text-align': 'center'\n                    },\n                    onclick: onclick || probDesc || app.clickVar,\n                    onmouseover: function onmouseover() {\n                        $(this).popover('toggle');\n                        if (probDesc) return;\n                        $(\"body div.popover\").addClass(\"variables\");\n                        $(\"body div.popover div.popover-content\").addClass(\"form-horizontal\");\n                    },\n                    onmouseout: \"$(this).popover('toggle');\",\n                    'data-container': 'body',\n                    'data-content': content ? content(v) : app.popoverContent(app.findNodeIndex(v, true)),\n                    'data-html': 'true',\n                    'data-original-title': title + ' for <b>' + v,\n                    'data-placement': probDesc ? 'top' : 'right',\n                    'data-toggle': 'popover',\n                    'data-trigger': 'hover' }, v);\n            }));\n        }\n    }]);\n\n    return PanelList;\n}();\n\nexports.default = PanelList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1BhbmVsTGlzdC5qcz9mNjE3Il0sIm5hbWVzIjpbImFwcCIsInBsb3RzIiwiUGFuZWxMaXN0Iiwidm5vZGUiLCJhdHRycyIsIml0ZW1zIiwiY29udGVudCIsInRpdGxlIiwicHJvYkRlc2MiLCJvbmNsaWNrIiwibWFwIiwidiIsImkiLCJyZXBsYWNlIiwiY2xhc3MiLCJkM21Qcm9ibGVtRGVzY3JpcHRpb24iLCJsb2NrdG9nZ2xlIiwic3R5bGUiLCJ6cGFyYW1zIiwiemR2IiwiaW5jbHVkZXMiLCJoZXhUb1JnYmEiLCJkdkNvbG9yIiwiem5vbSIsIm5vbUNvbG9yIiwibm9kZXMiLCJuIiwibmFtZSIsInNlbFZhckNvbG9yIiwidmFyQ29sb3IiLCJjbGlja1ZhciIsIm9ubW91c2VvdmVyIiwiJCIsInBvcG92ZXIiLCJhZGRDbGFzcyIsIm9ubW91c2VvdXQiLCJwb3BvdmVyQ29udGVudCIsImZpbmROb2RlSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7SUFBWUEsRzs7QUFDWjs7SUFBWUMsSzs7QUFFWjs7Ozs7Ozs7SUFFTUMsUzs7Ozs7Ozs2QkFDR0MsSyxFQUFPO0FBQUEsK0JBQ3lDQSxNQUFNQyxLQUQvQztBQUFBLGdCQUNIQyxLQURHLGdCQUNIQSxLQURHO0FBQUEsZ0JBQ0lDLE9BREosZ0JBQ0lBLE9BREo7QUFBQSxnQkFDYUMsS0FEYixnQkFDYUEsS0FEYjtBQUFBLGdCQUNvQkMsUUFEcEIsZ0JBQ29CQSxRQURwQjtBQUFBLGdCQUM4QkMsT0FEOUIsZ0JBQzhCQSxPQUQ5Qjs7QUFFUixtQkFBTyx1QkFDSCxnQ0FERyxFQUVISixNQUFNSyxHQUFOLENBQVUsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsdUJBQ0EsOEJBQU9ELEVBQUVFLE9BQUYsQ0FBVSxLQUFWLEVBQWlCLEdBQWpCLENBQVAsRUFBZ0M7QUFDNUJDLDJCQUFPTixXQUNGUixJQUFJZSxxQkFBSixDQUEwQlAsUUFBMUIsTUFBd0NHLENBQXhDLEdBQTRDLGFBQTVDLEdBQ0FYLElBQUlnQixVQUFKLEdBQWlCLDJCQUFqQixHQUNBLGNBSEUsR0FHZ0IsRUFKSztBQUs1QkMsMkJBQU87QUFDSCw0Q0FBb0JULFdBQVcsRUFBWCxHQUNoQlIsSUFBSWtCLE9BQUosQ0FBWUMsR0FBWixDQUFnQkMsUUFBaEIsQ0FBeUJULENBQXpCLElBQThCWCxJQUFJcUIsU0FBSixDQUFjckIsSUFBSXNCLE9BQWxCLENBQTlCLEdBQ0F0QixJQUFJa0IsT0FBSixDQUFZSyxJQUFaLENBQWlCSCxRQUFqQixDQUEwQlQsQ0FBMUIsSUFBK0JYLElBQUlxQixTQUFKLENBQWNyQixJQUFJd0IsUUFBbEIsQ0FBL0IsR0FDQXhCLElBQUl5QixLQUFKLENBQVVmLEdBQVYsQ0FBYztBQUFBLG1DQUFLZ0IsRUFBRUMsSUFBUDtBQUFBLHlCQUFkLEVBQTJCUCxRQUEzQixDQUFvQ1QsQ0FBcEMsSUFBeUNYLElBQUlxQixTQUFKLENBQWNwQixNQUFNMkIsV0FBcEIsQ0FBekMsR0FDQTVCLElBQUk2QixRQUxMO0FBTUgsd0NBQWdCLFNBTmI7QUFPSCx3Q0FBZ0IsQ0FBQ3JCLFFBQUQsMkJBQTRCSSx1QkFBNUIsR0FBOEMsT0FBOUMsR0FBd0QsTUFQckU7QUFRSCxzQ0FBYztBQVJYLHFCQUxxQjtBQWU1QkgsNkJBQVNBLFdBQVdELFFBQVgsSUFBdUJSLElBQUk4QixRQWZSO0FBZ0I1QkMsaUNBQWEsdUJBQVc7QUFDcEJDLDBCQUFFLElBQUYsRUFBUUMsT0FBUixDQUFnQixRQUFoQjtBQUNBLDRCQUFJekIsUUFBSixFQUFjO0FBQ2R3QiwwQkFBRSxrQkFBRixFQUNLRSxRQURMLENBQ2MsV0FEZDtBQUVBRiwwQkFBRSxzQ0FBRixFQUNLRSxRQURMLENBQ2MsaUJBRGQ7QUFFSCxxQkF2QjJCO0FBd0I1QkMsZ0NBQVksNEJBeEJnQjtBQXlCNUIsc0NBQWtCLE1BekJVO0FBMEI1QixvQ0FBZ0I3QixVQUFVQSxRQUFRSyxDQUFSLENBQVYsR0FBdUJYLElBQUlvQyxjQUFKLENBQW1CcEMsSUFBSXFDLGFBQUosQ0FBa0IxQixDQUFsQixFQUFxQixJQUFyQixDQUFuQixDQTFCWDtBQTJCNUIsaUNBQWEsTUEzQmU7QUE0QjVCLDJDQUF1QkosUUFBUSxVQUFSLEdBQXFCSSxDQTVCaEI7QUE2QjVCLHNDQUFrQkgsV0FBVyxLQUFYLEdBQW1CLE9BN0JUO0FBOEI1QixtQ0FBZSxTQTlCYTtBQStCNUIsb0NBQWdCLE9BL0JZLEVBQWhDLEVBZ0NFRyxDQWhDRixDQURBO0FBQUEsYUFBVixDQUZHLENBQVA7QUFvQ0g7Ozs7OztrQkFHVVQsUyIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCAqIGFzIGFwcCBmcm9tICcuLi9hcHAnO1xuaW1wb3J0ICogYXMgcGxvdHMgZnJvbSAnLi4vcGxvdHMnO1xuXG5pbXBvcnQge3NlYXJjaEluZGV4fSBmcm9tICcuL1NlYXJjaCc7XG5cbmNsYXNzIFBhbmVsTGlzdCB7XG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICBsZXQge2l0ZW1zLCBjb250ZW50LCB0aXRsZSwgcHJvYkRlc2MsIG9uY2xpY2t9ID0gdm5vZGUuYXR0cnM7XG4gICAgICAgIHJldHVybiBtKFxuICAgICAgICAgICAgJyN2YXJMaXN0W3N0eWxlPWRpc3BsYXk6IGJsb2NrXScsXG4gICAgICAgICAgICBpdGVtcy5tYXAoKHYsIGkpID0+XG4gICAgICAgICAgICAgICAgICAgICAgbShgcCMke3YucmVwbGFjZSgvXFxXL2csICdfJyl9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogcHJvYkRlc2MgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFwcC5kM21Qcm9ibGVtRGVzY3JpcHRpb25bcHJvYkRlc2NdID09PSB2ID8gJ2l0ZW0tc2VsZWN0JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmxvY2t0b2dnbGUgPyAnaXRlbS1kZWZhdWx0IGl0ZW0tbGluZW91dCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpdGVtLWRlZmF1bHQnKSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBwcm9iRGVzYyA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAuenBhcmFtcy56ZHYuaW5jbHVkZXModikgPyBhcHAuaGV4VG9SZ2JhKGFwcC5kdkNvbG9yKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnpwYXJhbXMuem5vbS5pbmNsdWRlcyh2KSA/IGFwcC5oZXhUb1JnYmEoYXBwLm5vbUNvbG9yKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm5vZGVzLm1hcChuID0+IG4ubmFtZSkuaW5jbHVkZXModikgPyBhcHAuaGV4VG9SZ2JhKHBsb3RzLnNlbFZhckNvbG9yKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLnZhckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlci1jb2xvcic6ICcjMDAwMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXItc3R5bGUnOiAhcHJvYkRlc2MgJiYgc2VhcmNoSW5kZXggJiYgaSA8IHNlYXJjaEluZGV4ID8gJ3NvbGlkJyA6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWFsaWduJzogJ2NlbnRlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogb25jbGljayB8fCBwcm9iRGVzYyB8fCBhcHAuY2xpY2tWYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9ubW91c2VvdmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucG9wb3ZlcigndG9nZ2xlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvYkRlc2MpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5IGRpdi5wb3BvdmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwidmFyaWFibGVzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcImJvZHkgZGl2LnBvcG92ZXIgZGl2LnBvcG92ZXItY29udGVudFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImZvcm0taG9yaXpvbnRhbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25tb3VzZW91dDogXCIkKHRoaXMpLnBvcG92ZXIoJ3RvZ2dsZScpO1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YS1jb250YWluZXInOiAnYm9keScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLWNvbnRlbnQnOiBjb250ZW50ID8gY29udGVudCh2KSA6IGFwcC5wb3BvdmVyQ29udGVudChhcHAuZmluZE5vZGVJbmRleCh2LCB0cnVlKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLWh0bWwnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLW9yaWdpbmFsLXRpdGxlJzogdGl0bGUgKyAnIGZvciA8Yj4nICsgdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtcGxhY2VtZW50JzogcHJvYkRlc2MgPyAndG9wJyA6ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXRvZ2dsZSc6ICdwb3BvdmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdHJpZ2dlcic6ICdob3Zlcid9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdikpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhbmVsTGlzdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvUGFuZWxMaXN0LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Interface specification\n//\n// ```\n// m(ButtonRadio, {\n//     sections: [\n//             {\n//                 value: 'Button 1',\n//                 title: 'Hover text',\n//                 attrsInterface: {optional object of attributes}\n//             },\n//             ...\n//         ],\n//     defaultSection: string (optional),\n//     activeSection: string (optional),\n//     onclick: (value) => console.log(value + \" was clicked.\")\n//     attrsAll: {optional object of attributes to apply to the bar}\n//     attrsButtons: {optional object of attributes to apply to all buttons}\n//     selectWidth: 20 (optional int),\n//     hoverBonus: 10 (optional int)\n//     })\n// ```\n\n// The selectWidth option forces the selected button to be n percent wide.\n// The other buttons on the bar compensate.\n// If not included, then every button has even spacing.\n\n// The hoverBonus option makes the hovered button n percent larger when hovered.\n// Both hoverBonus and selectWidth may be used together. On both, don't pass a string%, pass the numeric.\n\n// defaultSection sets which element is selected on page load\n// activeSelection forces the selected element. This is for convenience when external events change the selected button\n\nvar ButtonRadio = function () {\n    function ButtonRadio() {\n        _classCallCheck(this, ButtonRadio);\n    }\n\n    _createClass(ButtonRadio, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                activeSection = _vnode$attrs.activeSection,\n                defaultSection = _vnode$attrs.defaultSection,\n                sections = _vnode$attrs.sections;\n            // Attempt to set active on initial load based on options\n\n            this.active = activeSection || defaultSection || sections.length !== 0 ? sections[0].value : undefined;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var _vnode$attrs2 = vnode.attrs,\n                id = _vnode$attrs2.id,\n                sections = _vnode$attrs2.sections,\n                _onclick = _vnode$attrs2.onclick,\n                selectWidth = _vnode$attrs2.selectWidth,\n                hoverBonus = _vnode$attrs2.hoverBonus,\n                attrsAll = _vnode$attrs2.attrsAll,\n                attrsButtons = _vnode$attrs2.attrsButtons,\n                activeSection = _vnode$attrs2.activeSection;\n\n            // Sorry about the complexity here. Got stuck with a lot of cases\n\n            var getWidth = function getWidth(value) {\n                // Evenly spaced\n                if (selectWidth === undefined && (hoverBonus === undefined || _this.hovered === undefined)) {\n                    return 100. / sections.length + '%';\n                }\n\n                // Fixed width of selected button\n                if (selectWidth !== undefined && (hoverBonus === undefined || _this.hovered === undefined)) {\n                    if (_this.active === value) return selectWidth + '%';\n                    return 'calc(' + 100. / (sections.length - 1) + '% - ' + selectWidth / (sections.length - 1) + '%)';\n                }\n\n                // Hovering is turned on and a button is hovered\n                if (selectWidth === undefined && hoverBonus !== undefined && _this.hovered !== undefined) {\n                    if (_this.hovered === value) return 100. / sections.length + hoverBonus + '%';\n                    return 100. / sections.length - hoverBonus / (sections.length - 1) + '%';\n                }\n\n                // Fixed width of selected button and button resize on hover\n                if (selectWidth !== undefined && hoverBonus !== undefined && _this.hovered !== undefined) {\n                    if (_this.active === value) return selectWidth + '%';\n                    if (_this.hovered === _this.active) return 'calc(' + 100. / (sections.length - 1) + '% - ' + selectWidth / (sections.length - 1) + '%)';\n                    if (_this.hovered === value) return 'calc(' + (100. / (sections.length - 1) + hoverBonus) + '% - ' + selectWidth / (sections.length - 1) + '%)';\n                    return 'calc(' + (100. - (100. / (sections.length - 1) + hoverBonus)) / (sections.length - 2) + '% - ' + selectWidth / (sections.length - 1) + '%)';\n                }\n            };\n\n            this.active = activeSection || this.active;\n\n            // Button bar\n            return (0, _mithril2.default)('div#' + id + '.btn-group[data-toggle=buttons]', (0, _common.mergeAttributes)({ style: { 'width': '100%' } }, attrsAll), sections.map(function (section) {\n                return (\n                    // Individual buttons\n                    (0, _mithril2.default)('#' + (section.id || 'btn' + section.value) + '.btn.btn-default\\n                    ' + (section.value.toLowerCase() === (activeSection || _this.active).toLowerCase() ? '.active' : ''), (0, _common.mergeAttributes)({\n                        onmouseover: function onmouseover() {\n                            return _this.hovered = section.value;\n                        },\n                        onmouseout: function onmouseout() {\n                            return _this.hovered = undefined;\n                        },\n                        style: { width: getWidth(section.value) },\n                        onclick: function onclick() {\n                            _this.active = section.value;\n                            _onclick(section.value);\n                        }\n                    }, attrsButtons, section.attrsInterface), [(0, _mithril2.default)('input#' + id + section.value, { 'name': id, 'title': section.title, 'type': 'radio' }), section.value])\n                );\n            }));\n        }\n    }]);\n\n    return ButtonRadio;\n}();\n\nexports.default = ButtonRadio;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){eval('/**! hopscotch - v0.3.1\n*\n* Copyright 2017 LinkedIn Corp. All rights reserved.\n*\n* Licensed under the Apache License, Version 2.0 (the "License");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an "AS IS" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n!function(a,b){ true?module.exports=b():"function"==typeof define&&define.amd?define(b):a.hopscotch=b()}(this,function(){"use strict";var a,b,c,d,e,f,g,h,i,j,k,l,m,n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},o="bubble_default",p=window.Sizzle||null,q="undefined",r=!1,s=("undefined"==typeof jQuery?"undefined":n(jQuery))!==q,t=!1,u=!1,v=/^[a-zA-Z]+[a-zA-Z0-9_-]*$/,w={left:"right",right:"left"};try{n(window.sessionStorage)!==q&&(t=!0,sessionStorage.setItem("hopscotch.test.storage","ok"),sessionStorage.removeItem("hopscotch.test.storage"),u=!0)}catch(x){}l={smoothScroll:!0,scrollDuration:1e3,scrollTopMargin:200,showCloseButton:!0,showPrevButton:!1,showNextButton:!0,bubbleWidth:280,bubblePadding:15,arrowWidth:20,skipIfNoElement:!0,isRtl:!1,cookieName:"hopscotch.tour.state"},Array.isArray||(Array.isArray=function(a){return"[object Array]"===Object.prototype.toString.call(a)}),k=function(){r&&m.startTour()},h={addClass:function(a,b){var c,d,e,f;if(a.className){for(d=b.split(/\\s+/),c=" "+a.className+" ",e=0,f=d.length;f>e;++e)c.indexOf(" "+d[e]+" ")<0&&(c+=d[e]+" ");a.className=c.replace(/^\\s+|\\s+$/g,"")}else a.className=b},removeClass:function(a,b){var c,d,e,f;for(d=b.split(/\\s+/),c=" "+a.className+" ",e=0,f=d.length;f>e;++e)c=c.replace(" "+d[e]+" "," ");a.className=c.replace(/^\\s+|\\s+$/g,"")},hasClass:function(a,b){var c;return a.className?(c=" "+a.className+" ",-1!==c.indexOf(" "+b+" ")):!1},getPixelValue:function(a){var b="undefined"==typeof a?"undefined":n(a);return"number"===b?a:"string"===b?parseInt(a,10):0},valOrDefault:function(a,b){return("undefined"==typeof a?"undefined":n(a))!==q?a:b},invokeCallbackArrayHelper:function(a){var b;return Array.isArray(a)&&(b=j[a[0]],"function"==typeof b)?b.apply(this,a.slice(1)):void 0},invokeCallbackArray:function(a){var b,c;if(Array.isArray(a)){if("string"==typeof a[0])return h.invokeCallbackArrayHelper(a);for(b=0,c=a.length;c>b;++b)h.invokeCallback(a[b])}},invokeCallback:function(a){return"function"==typeof a?a():"string"==typeof a&&j[a]?j[a]():h.invokeCallbackArray(a)},invokeEventCallbacks:function(a,b){var c,d,e=i[a];if(b)return this.invokeCallback(b);for(c=0,d=e.length;d>c;++c)this.invokeCallback(e[c].cb)},getScrollTop:function(){var a;return a=n(window.pageYOffset)!==q?window.pageYOffset:document.documentElement.scrollTop},getScrollLeft:function(){var a;return a=n(window.pageXOffset)!==q?window.pageXOffset:document.documentElement.scrollLeft},getWindowHeight:function(){return window.innerHeight||document.documentElement.clientHeight},addEvtListener:function(a,b,c){return a?a.addEventListener?a.addEventListener(b,c,!1):a.attachEvent("on"+b,c):void 0},removeEvtListener:function(a,b,c){return a?a.removeEventListener?a.removeEventListener(b,c,!1):a.detachEvent("on"+b,c):void 0},documentIsReady:function(){return"complete"===document.readyState},evtPreventDefault:function(a){a.preventDefault?a.preventDefault():event&&(event.returnValue=!1)},extend:function(a,b){var c;for(c in b)b.hasOwnProperty(c)&&(a[c]=b[c])},getStepTargetHelper:function(a){var b=document.getElementById(a);if(b)return b;if(s)return b=jQuery(a),b.length?b[0]:null;if(p)return b=new p(a),b.length?b[0]:null;if(document.querySelector)try{return document.querySelector(a)}catch(c){}return/^#[a-zA-Z][\\w-_:.]*$/.test(a)?document.getElementById(a.substring(1)):null},getStepTarget:function(a){var b;if(!a||!a.target)return null;if("string"==typeof a.target)return h.getStepTargetHelper(a.target);if(Array.isArray(a.target)){var c,d;for(c=0,d=a.target.length;d>c;c++)if("string"==typeof a.target[c]&&(b=h.getStepTargetHelper(a.target[c])))return b;return null}return a.target},getI18NString:function(a){return e[a]||d[a]},setState:function(a,b,c){var d,e="";if(t&&u)try{sessionStorage.setItem(a,b)}catch(f){u=!1,this.setState(a,b,c)}else t&&sessionStorage.removeItem(a),c&&(d=new Date,d.setTime(d.getTime()+24*c*60*60*1e3),e="; expires="+d.toGMTString()),document.cookie=a+"="+b+e+"; path=/"},getState:function(a){var b,c,d,e=a+"=",f=document.cookie.split(";");if(t&&(d=sessionStorage.getItem(a)))return d;for(b=0;b<f.length;b++){for(c=f[b];" "===c.charAt(0);)c=c.substring(1,c.length);if(0===c.indexOf(e)){d=c.substring(e.length,c.length);break}}return d},clearState:function(a){t?sessionStorage.removeItem(a):this.setState(a,"",-1)},normalizePlacement:function(a){!a.placement&&a.orientation&&(a.placement=a.orientation)},flipPlacement:function(a){if(a.isRtl&&!a._isFlipped){var b,c,d=["orientation","placement"];a.xOffset&&(a.xOffset=-1*this.getPixelValue(a.xOffset));for(c in d)b=d[c],a.hasOwnProperty(b)&&w.hasOwnProperty(a[b])&&(a[b]=w[a[b]]);a._isFlipped=!0}}},h.addEvtListener(window,"load",k),i={next:[],prev:[],start:[],end:[],show:[],error:[],close:[]},j={},d={stepNums:null,nextBtn:"Next",prevBtn:"Back",doneBtn:"Done",skipBtn:"Skip",closeTooltip:"Close"},e={},b=function(a){this.init(a)},b.prototype={isShowing:!1,currStep:void 0,setPosition:function(a){var b,c,d,e,f,g,i,j=h.getStepTarget(a),k=this.element,l=this.arrowEl,m=a.isRtl?"right":"left";if(h.flipPlacement(a),h.normalizePlacement(a),c=k.offsetWidth,b=k.offsetHeight,h.removeClass(k,"fade-in-down fade-in-up fade-in-left fade-in-right"),d=j.getBoundingClientRect(),i=a.isRtl?d.right-c:d.left,"top"===a.placement)e=d.top-b-this.opt.arrowWidth,f=i;else if("bottom"===a.placement)e=d.bottom+this.opt.arrowWidth,f=i;else if("left"===a.placement)e=d.top,f=d.left-c-this.opt.arrowWidth;else{if("right"!==a.placement)throw new Error("Bubble placement failed because step.placement is invalid or undefined!");e=d.top,f=d.right+this.opt.arrowWidth}g="center"!==a.arrowOffset?h.getPixelValue(a.arrowOffset):a.arrowOffset,g?"top"===a.placement||"bottom"===a.placement?(l.style.top="","center"===g?l.style[m]=Math.floor(c/2-l.offsetWidth/2)+"px":l.style[m]=g+"px"):("left"===a.placement||"right"===a.placement)&&(l.style[m]="","center"===g?l.style.top=Math.floor(b/2-l.offsetHeight/2)+"px":l.style.top=g+"px"):(l.style.top="",l.style[m]=""),"center"===a.xOffset?f=d.left+j.offsetWidth/2-c/2:f+=h.getPixelValue(a.xOffset),"center"===a.yOffset?e=d.top+j.offsetHeight/2-b/2:e+=h.getPixelValue(a.yOffset),a.fixedElement||(e+=h.getScrollTop(),f+=h.getScrollLeft()),k.style.position=a.fixedElement?"fixed":"absolute",k.style.top=e+"px",k.style.left=f+"px"},render:function(a,b,c){var d,e,g,i,j,k,l,n,p,q,r=this.element;if(a?this.currStep=a:this.currStep&&(a=this.currStep),this.opt.isTourBubble?(i=m.getCurrTour(),i&&(e=i.customData,d=i.customRenderer,a.isRtl=a.hasOwnProperty("isRtl")?a.isRtl:i.hasOwnProperty("isRtl")?i.isRtl:this.opt.isRtl,g=i.unsafe,Array.isArray(i.steps)&&(j=i.steps.length,k=this._getStepI18nNum(this._getStepNum(j-1)),n=this._getStepNum(b)===this._getStepNum(j-1)))):(e=a.customData,d=a.customRenderer,g=a.unsafe,a.isRtl=a.hasOwnProperty("isRtl")?a.isRtl:this.opt.isRtl),l=n?h.getI18NString("doneBtn"):a.showSkip?h.getI18NString("skipBtn"):h.getI18NString("nextBtn"),h.flipPlacement(a),h.normalizePlacement(a),this.placement=a.placement,q={i18n:{prevBtn:h.getI18NString("prevBtn"),nextBtn:l,closeTooltip:h.getI18NString("closeTooltip"),stepNum:this._getStepI18nNum(this._getStepNum(b)),numSteps:k},buttons:{showPrev:h.valOrDefault(a.showPrevButton,this.opt.showPrevButton)&&this._getStepNum(b)>0,showNext:h.valOrDefault(a.showNextButton,this.opt.showNextButton),showCTA:h.valOrDefault(a.showCTAButton&&a.ctaLabel,!1),ctaLabel:a.ctaLabel,showClose:h.valOrDefault(this.opt.showCloseButton,!0)},step:{num:b,isLast:h.valOrDefault(n,!1),title:a.title||"",content:a.content||"",isRtl:a.isRtl,placement:a.placement,padding:h.valOrDefault(a.padding,this.opt.bubblePadding),width:h.getPixelValue(a.width)||this.opt.bubbleWidth,customData:a.customData||{}},tour:{isTour:this.opt.isTourBubble,numSteps:j,unsafe:h.valOrDefault(g,!1),customData:e||{}}},"function"==typeof d)r.innerHTML=d(q);else if("string"==typeof d){if(!m.templates||"function"!=typeof m.templates[d])throw new Error(\'Bubble rendering failed - template "\'+d+\'" is not a function.\');r.innerHTML=m.templates[d](q)}else if(f)r.innerHTML=f(q);else{if(!m.templates||"function"!=typeof m.templates[o])throw new Error(\'Bubble rendering failed - template "\'+o+\'" is not a function.\');r.innerHTML=m.templates[o](q)}var s,t=r.children,u=t.length;for(p=0;u>p;p++)s=t[p],h.hasClass(s,"hopscotch-arrow")&&(this.arrowEl=s);return r.style.zIndex="number"==typeof a.zindex?a.zindex:"",this._setArrow(a.placement),this.hide(!1),this.setPosition(a),c&&c(!a.fixedElement),this},_getStepNum:function(a){var b,c,d=0,e=m.getSkippedStepsIndexes(),f=e.length;for(c=0;f>c;c++)b=e[c],a>b&&d++;return a-d},_getStepI18nNum:function(a){var b=h.getI18NString("stepNums");return b&&a<b.length?a=b[a]:a+=1,a},_setArrow:function(a){h.removeClass(this.arrowEl,"down up right left"),"top"===a?h.addClass(this.arrowEl,"down"):"bottom"===a?h.addClass(this.arrowEl,"up"):"left"===a?h.addClass(this.arrowEl,"right"):"right"===a&&h.addClass(this.arrowEl,"left")},_getArrowDirection:function(){return"top"===this.placement?"down":"bottom"===this.placement?"up":"left"===this.placement?"right":"right"===this.placement?"left":void 0},show:function(){var a=this,b="fade-in-"+this._getArrowDirection(),c=1e3;return h.removeClass(this.element,"hide"),h.addClass(this.element,b),setTimeout(function(){h.removeClass(a.element,"invisible")},50),setTimeout(function(){h.removeClass(a.element,b)},c),this.isShowing=!0,this},hide:function(a){var b=this.element;return a=h.valOrDefault(a,!0),b.style.top="",b.style.left="",a?(h.addClass(b,"hide"),h.removeClass(b,"invisible")):(h.removeClass(b,"hide"),h.addClass(b,"invisible")),h.removeClass(b,"animate fade-in-up fade-in-down fade-in-right fade-in-left"),this.isShowing=!1,this},destroy:function(){var a=this.element;a&&a.parentNode.removeChild(a),h.removeEvtListener(a,"click",this.clickCb)},_handleBubbleClick:function(a){function b(c){return c===a.currentTarget?null:h.hasClass(c,"hopscotch-cta")?"cta":h.hasClass(c,"hopscotch-next")?"next":h.hasClass(c,"hopscotch-prev")?"prev":h.hasClass(c,"hopscotch-close")?"close":b(c.parentElement)}var c;a=a||window.event;var d=a.target||a.srcElement;if(c=b(d),"cta"===c)this.opt.isTourBubble||m.getCalloutManager().removeCallout(this.currStep.id),this.currStep.onCTA&&h.invokeCallback(this.currStep.onCTA);else if("next"===c)m.nextStep(!0);else if("prev"===c)m.prevStep(!0);else if("close"===c){if(this.opt.isTourBubble){var e=m.getCurrStepNum(),f=m.getCurrTour(),g=e===f.steps.length-1;h.invokeEventCallbacks("close"),m.endTour(!0,g)}else this.opt.onClose&&h.invokeCallback(this.opt.onClose),this.opt.id&&!this.opt.isTourBubble?m.getCalloutManager().removeCallout(this.opt.id):this.destroy();h.evtPreventDefault(a)}},init:function(a){var b,c,d,e,f=document.createElement("div"),g=this,i=!1;this.element=f,e={showPrevButton:l.showPrevButton,showNextButton:l.showNextButton,bubbleWidth:l.bubbleWidth,bubblePadding:l.bubblePadding,arrowWidth:l.arrowWidth,isRtl:l.isRtl,showNumber:!0,isTourBubble:!0},a=("undefined"==typeof a?"undefined":n(a))===q?{}:a,h.extend(e,a),this.opt=e,f.className="hopscotch-bubble animated",e.isTourBubble?(d=m.getCurrTour(),d&&h.addClass(f,"tour-"+d.id)):h.addClass(f,"hopscotch-callout no-number"),b=function(){!i&&g.isShowing&&(i=!0,setTimeout(function(){g.setPosition(g.currStep),i=!1},100))},h.addEvtListener(window,"resize",b),this.clickCb=function(a){g._handleBubbleClick(a)},h.addEvtListener(f,"click",this.clickCb),this.hide(),h.documentIsReady()?document.body.appendChild(f):(document.addEventListener?(c=function(){document.removeEventListener("DOMContentLoaded",c),window.removeEventListener("load",c),document.body.appendChild(f)},document.addEventListener("DOMContentLoaded",c,!1)):(c=function(){"complete"===document.readyState&&(document.detachEvent("onreadystatechange",c),window.detachEvent("onload",c),document.body.appendChild(f))},document.attachEvent("onreadystatechange",c)),h.addEvtListener(window,"load",c))}},c=function(){var a={},c={};this.createCallout=function(d){var e;if(!d.id)throw new Error("Must specify a callout id.");if(!v.test(d.id))throw new Error("Callout ID is using an invalid format. Use alphanumeric, underscores, and/or hyphens only. First character must be a letter.");if(a[d.id])throw new Error("Callout by that id already exists. Please choose a unique id.");if(!h.getStepTarget(d))throw new Error("Must specify existing target element via \'target\' option.");return d.showNextButton=d.showPrevButton=!1,d.isTourBubble=!1,e=new b(d),a[d.id]=e,c[d.id]=d,e.render(d,null,function(){e.show(),d.onShow&&h.invokeCallback(d.onShow)}),e},this.getCallout=function(b){return a[b]},this.removeAllCallouts=function(){var b;for(b in a)a.hasOwnProperty(b)&&this.removeCallout(b)},this.removeCallout=function(b){var d=a[b];a[b]=null,c[b]=null,d&&d.destroy()},this.refreshCalloutPositions=function(){var b,d,e;for(b in a)a.hasOwnProperty(b)&&c.hasOwnProperty(b)&&(d=a[b],e=c[b],d&&e&&d.setPosition(e))}},a=function(a){var d,k,p,t,u,w,x,y,z=this,A={},B=[],C=function(a){return d&&d.element&&d.element.parentNode||(d=new b(p)),a&&h.extend(d.opt,{bubblePadding:E("bubblePadding"),bubbleWidth:E("bubbleWidth"),showNextButton:E("showNextButton"),showPrevButton:E("showPrevButton"),showCloseButton:E("showCloseButton"),arrowWidth:E("arrowWidth"),isRtl:E("isRtl")}),d},D=function(){d&&(d.destroy(),d=null)},E=function(a){return"undefined"==typeof p?l[a]:h.valOrDefault(p[a],l[a])},F=function(){var a;return a=!t||0>u||u>=t.steps.length?null:t.steps[u]},G=function(){z.nextStep()},H=function(a){var b,c,d,e,f,g,i=C(),j=i.element,k=h.getPixelValue(j.style.top),l=k+h.getPixelValue(j.offsetHeight),m=h.getStepTarget(F()),o=m.getBoundingClientRect(),p=o.top+h.getScrollTop(),r=o.bottom+h.getScrollTop(),t=p>k?k:p,u=l>r?l:r,v=h.getScrollTop(),w=v+h.getWindowHeight(),x=t-E("scrollTopMargin");t>=v&&(t<=v+E("scrollTopMargin")||w>=u)?a&&a():E("smoothScroll")?("undefined"==typeof YAHOO?"undefined":n(YAHOO))!==q&&n(YAHOO.env)!==q&&n(YAHOO.env.ua)!==q&&n(YAHOO.util)!==q&&n(YAHOO.util.Scroll)!==q?(b=YAHOO.env.ua.webkit?document.body:document.documentElement,d=YAHOO.util.Easing?YAHOO.util.Easing.easeOut:void 0,c=new YAHOO.util.Scroll(b,{scroll:{to:[0,x]}},E("scrollDuration")/1e3,d),c.onComplete.subscribe(a),c.animate()):s?jQuery("body, html").animate({scrollTop:x},E("scrollDuration"),a):(0>x&&(x=0),e=v>t?-1:1,f=Math.abs(v-x)/(E("scrollDuration")/10),(g=function(){var b=h.getScrollTop(),c=b+e*f;return e>0&&c>=x||0>e&&x>=c?(c=x,a&&a(),void window.scrollTo(0,c)):(window.scrollTo(0,c),h.getScrollTop()===b?void(a&&a()):void setTimeout(g,10))})()):(window.scrollTo(0,x),a&&a())},I=function P(a,b){var c,d,e;u+a>=0&&u+a<t.steps.length?(u+=a,d=F(),e=function(){c=h.getStepTarget(d),c?(A[u]&&delete A[u],b(u)):(A[u]=!0,h.invokeEventCallbacks("error"),P(a,b))},d.delay?setTimeout(e,d.delay):e()):b(-1)},J=function(a,b){var c,d,e,f,g=C(),i=this;if(g.hide(),a=h.valOrDefault(a,!0),c=F(),c.nextOnTargetClick&&h.removeEvtListener(h.getStepTarget(c),"click",G),d=c,e=b>0?d.multipage:u>0&&t.steps[u-1].multipage,f=function(c){var f;if(-1===c)return this.endTour(!0);if(a&&(f=b>0?h.invokeEventCallbacks("next",d.onNext):h.invokeEventCallbacks("prev",d.onPrev)),c===u){if(e)return void N();f=h.valOrDefault(f,!0),f?this.showStep(c):this.endTour(!1)}},!e&&E("skipIfNoElement"))I(b,function(a){f.call(i,a)});else if(u+b>=0&&u+b<t.steps.length){if(u+=b,c=F(),!h.getStepTarget(c)&&!e)return h.invokeEventCallbacks("error"),this.endTour(!0,!1);f.call(this,u)}else if(u+b===t.steps.length)return this.endTour();return this},K=function(a){var b,c,d,e={};for(b in a)a.hasOwnProperty(b)&&"id"!==b&&"steps"!==b&&(e[b]=a[b]);return y.call(this,e,!0),c=h.getState(E("cookieName")),c&&(d=c.split(":"),w=d[0],x=d[1],d.length>2&&(B=d[2].split(",")),x=parseInt(x,10)),this},L=function(a,b,c){var d,e;if(u=a||0,A=b||{},d=F(),e=h.getStepTarget(d))return void c(u);if(!e){if(h.invokeEventCallbacks("error"),A[u]=!0,E("skipIfNoElement"))return void I(1,c);u=-1,c(u)}},M=function(a){function b(){d.show(),h.invokeEventCallbacks("show",c.onShow)}var c=t.steps[a],d=C(),e=h.getStepTarget(c);u!==a&&F().nextOnTargetClick&&h.removeEvtListener(h.getStepTarget(F()),"click",G),u=a,d.hide(!1),d.render(c,a,function(a){a?H(b):b(),c.nextOnTargetClick&&h.addEvtListener(e,"click",G)}),N()},N=function(){var a=t.id+":"+u,b=m.getSkippedStepsIndexes();b&&b.length>0&&(a+=":"+b.join(",")),h.setState(E("cookieName"),a,1)},O=function(a){a&&this.configure(a)};this.getCalloutManager=function(){return("undefined"==typeof k?"undefined":n(k))===q&&(k=new c),k},this.startTour=function(a,b){var c,d,e={},f=this;if(!t){if(!a)throw new Error("Tour data is required for startTour.");if(!a.id||!v.test(a.id))throw new Error("Tour ID is using an invalid format. Use alphanumeric, underscores, and/or hyphens only. First character must be a letter.");t=a,K.call(this,a)}if(("undefined"==typeof b?"undefined":n(b))!==q){if(b>=t.steps.length)throw new Error("Specified step number out of bounds.");d=b}if(!h.documentIsReady())return r=!0,this;if("undefined"==typeof d&&t.id===w&&("undefined"==typeof x?"undefined":n(x))!==q){if(d=x,B.length>0)for(var g=0,i=B.length;i>g;g++)e[B[g]]=!0}else d||(d=0);return L(d,e,function(a){var b=-1!==a&&h.getStepTarget(t.steps[a]);return b?(h.invokeEventCallbacks("start"),c=C(),c.hide(!1),f.isActive=!0,void(h.getStepTarget(F())?f.showStep(a):(h.invokeEventCallbacks("error"),E("skipIfNoElement")&&f.nextStep(!1)))):void f.endTour(!1,!1)}),this},this.showStep=function(a){var b=t.steps[a],c=u;return h.getStepTarget(b)?(b.delay?setTimeout(function(){M(a)},b.delay):M(a),this):(u=a,h.invokeEventCallbacks("error"),void(u=c))},this.prevStep=function(a){return J.call(this,a,-1),this},this.nextStep=function(a){return J.call(this,a,1),this},this.endTour=function(a,b){var c,d=C();return a=h.valOrDefault(a,!0),b=h.valOrDefault(b,!0),t&&(c=F(),c&&c.nextOnTargetClick&&h.removeEvtListener(h.getStepTarget(c),"click",G)),u=0,x=void 0,d.hide(),a&&h.clearState(E("cookieName")),this.isActive&&(this.isActive=!1,t&&b&&h.invokeEventCallbacks("end")),this.removeCallbacks(null,!0),this.resetDefaultOptions(),D(),t=null,this},this.getCurrTour=function(){return t},this.getCurrTarget=function(){return h.getStepTarget(F())},this.getCurrStepNum=function(){return u},this.getSkippedStepsIndexes=function(){var a,b=[];for(a in A)b.push(a);return b},this.refreshBubblePosition=function(){var a=F();return a&&C().setPosition(a),this.getCalloutManager().refreshCalloutPositions(),this},this.listen=function(a,b,c){return a&&i[a].push({cb:b,fromTour:c}),this},this.unlisten=function(a,b){var c,d,e=i[a];for(c=0,d=e.length;d>c;++c)e[c].cb===b&&e.splice(c,1);return this},this.removeCallbacks=function(a,b){var c,d,e,f;for(f in i)if(!a||a===f)if(b)for(c=i[f],d=0,e=c.length;e>d;++d)c[d].fromTour&&(c.splice(d--,1),--e);else i[f]=[];return this},this.registerHelper=function(a,b){"string"==typeof a&&"function"==typeof b&&(j[a]=b)},this.unregisterHelper=function(a){j[a]=null},this.invokeHelper=function(a){var b,c,d=[];for(b=1,c=arguments.length;c>b;++b)d.push(arguments[b]);j[a]&&j[a].call(null,d)},this.setCookieName=function(a){return p.cookieName=a,this},this.resetDefaultOptions=function(){return p={},this},this.resetDefaultI18N=function(){return e={},this},this.getState=function(){return h.getState(E("cookieName"))},y=function(a,b){var c,d,f,g,i=["next","prev","start","end","show","error","close"];for(p||this.resetDefaultOptions(),h.extend(p,a),a&&h.extend(e,a.i18n),f=0,g=i.length;g>f;++f)d="on"+i[f].charAt(0).toUpperCase()+i[f].substring(1),a[d]&&this.listen(i[f],a[d],b);return c=C(!0),this},this.configure=function(a){return y.call(this,a,!1)},this.setRenderer=function(a){var b="undefined"==typeof a?"undefined":n(a);return"string"===b?(o=a,f=void 0):"function"===b&&(f=a),this},this.setEscaper=function(a){return"function"==typeof a&&(g=a),this},O.call(this,a)},m=new a,function(){var a={};a.escape=function(a){return g?g(a):null==a?"":(""+a).replace(new RegExp("[&<>\\"\']","g"),function(a){return"&"==a?"&amp;":"<"==a?"&lt;":">"==a?"&gt;":\'"\'==a?"&quot;":"\'"==a?"&#x27;":void 0})},this.templates=this.templates||{},this.templates.bubble_default=function(b){function c(b,c){return c?a.escape(b):b}var d,e="";a.escape,Array.prototype.join;e+="\\n";var f=b.i18n,g=b.buttons,h=b.step,i=b.tour;return e+=\'\\n<div class="hopscotch-bubble-container" style="width: \'+(null==(d=h.width)?"":d)+"px; padding: "+(null==(d=h.padding)?"":d)+\'px;">\\n  \',i.isTour&&(e+=\'<span class="hopscotch-bubble-number">\'+(null==(d=f.stepNum)?"":d)+"</span>"),e+=\'\\n  <div class="hopscotch-bubble-content">\\n    \',""!==h.title&&(e+=\'<h3 class="hopscotch-title">\'+(null==(d=c(h.title,i.unsafe))?"":d)+"</h3>"),e+="\\n    ",""!==h.content&&(e+=\'<div class="hopscotch-content">\'+(null==(d=c(h.content,i.unsafe))?"":d)+"</div>"),e+=\'\\n  </div>\\n  <div class="hopscotch-actions">\\n    \',g.showPrev&&(e+=\'<button class="hopscotch-nav-button prev hopscotch-prev">\'+(null==(d=f.prevBtn)?"":d)+"</button>"),e+="\\n    ",g.showCTA&&(e+=\'<button class="hopscotch-nav-button next hopscotch-cta">\'+(null==(d=g.ctaLabel)?"":d)+"</button>"),e+="\\n    ",g.showNext&&(e+=\'<button class="hopscotch-nav-button next hopscotch-next">\'+(null==(d=f.nextBtn)?"":d)+"</button>"),e+="\\n  </div>\\n  ",g.showClose&&(e+=\'<button class="hopscotch-bubble-close hopscotch-close">\'+(null==(d=f.closeTooltip)?"":d)+"</button>"),e+=\'\\n</div>\\n<div class="hopscotch-bubble-arrow-container hopscotch-arrow">\\n  <div class="hopscotch-bubble-arrow-border"></div>\\n  <div class="hopscotch-bubble-arrow"></div>\\n</div>\\n\'}}.call(m);var y=m;return y});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\nexports.exploreVar = undefined;\nexports.get_width = get_width;\nexports.linechart = linechart;\nexports.explore = explore;\nexports.callTreeApp = callTreeApp;\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(3);\n\nvar plots = _interopRequireWildcard(_plots);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar $private = false;\n\nfunction heatmap(x_Axis_name, y_Axis_name) {\n    document.getElementById(\'heatchart\').style.display = "block";\n    d3.select("#heatchart").select("svg").remove();\n    $(\'#heatchart\').html("");\n\n    var margin_heat = { top: 30, right: 10, bottom: 60, left: 60 },\n        width_heat = 500 - margin_heat.left - margin_heat.right,\n        height_heat = 300 - margin_heat.top - margin_heat.bottom;\n    var padding = 100;\n\n    var min_x = d3.min(data_plot, function (d, i) {\n        return data_plot[i].xaxis;\n    });\n    var max_x = d3.max(data_plot, function (d, i) {\n        return data_plot[i].xaxis;\n    });\n    var avg_x = (max_x - min_x) / 100;\n    var min_y = d3.min(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var max_y = d3.max(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var avg_y = (max_y - min_y) / 100;\n\n    var x = d3.scale.linear().domain([min_x - avg_x, max_x + avg_x]).range([0, width_heat]);\n\n    var y = d3.scale.linear().domain([min_y - avg_y, max_y + avg_y]).range([height_heat, 0]);\n\n    var z = d3.scale.linear().range(["#EF9A9A", "#EF5350"]);\n\n    // This could be inferred from the data if it weren\'t sparse.\n    var xStep = avg_x + 0.1,\n        yStep = avg_y + 0.2;\n    var svg_heat = d3.select("#heatchart").append("svg").attr("width", width_heat + margin_heat.left + margin_heat.right).attr("height", height_heat + margin_heat.top + margin_heat.bottom).append("g").attr("transform", "translate(" + margin_heat.left + "," + margin_heat.top + ")").style("background-color", "#FFEBEE");\n\n    // Compute the scale domains.\n    x.domain(d3.extent(data_plot, function (d, i) {\n        return data_plot[i].xaxis;\n    }));\n    y.domain(d3.extent(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    }));\n    z.domain([0, d3.max(data_plot, function (d, i) {\n        return data_plot[i].score;\n    })]);\n\n    // Extend the x- and y-domain to fit the last bucket.\n    // For example, the y-bucket 3200 corresponds to values [3200, 3300].\n    x.domain([x.domain()[0], +x.domain()[1] + xStep]);\n    y.domain([y.domain()[0], y.domain()[1] + yStep]);\n\n    // Display the tiles for each non-zero bucket.\n    // See http://bl.ocks.org/3074470 for an alternative implementation.\n    svg_heat.selectAll(".tile").data(data_plot).enter().append("rect").attr("class", "tile").attr("x", function (d, i) {\n        return x(data_plot[i].xaxis);\n    }).attr("y", function (d, i) {\n        return y(data_plot[i].yaxis + yStep);\n    }).attr("width", 15).attr("height", 15).attr("dx", ".35em").attr("dy", ".35em").style("fill", function (d, i) {\n        return z(data_plot[i].score);\n    });\n\n    svg_heat.append("text").attr("class", "label").attr("x", width_heat + 20).attr("y", 10).attr("dy", ".35em").text("Count");\n\n    // Add an x-axis with label.\n    svg_heat.append("g").attr("class", "x axis").attr("transform", "translate(0," + height_heat + ")").call(d3.svg.axis().scale(x).ticks(5).tickSize(-height_heat).orient("bottom")).append("text").attr("class", "label").attr("x", width_heat).attr("y", -6).attr("text-anchor", "end").text("");\n\n    // Add a y-axis with label.\n    svg_heat.append("g").attr("class", "y axis").call(d3.svg.axis().scale(y).tickSize(-width_heat).orient("left")).append("text").attr("class", "label").attr("y", 6).attr("dy", ".71em").attr("text-anchor", "end").attr("transform", "rotate(-90)").text("");\n\n    svg_heat.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(-40," + height_heat / 2 + ")rotate(-90)") // text is drawn off the screen top left, move down and out and rotate\n    .text(y_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    svg_heat.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + width_heat / 2 + "," + (height_heat + padding / 4) + ")") // centre below axis\n    .text(x_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n}\n\nvar heatxaxis = void 0,\n    heatyaxis = void 0;\nvar data_plot = [];\n\nfunction bivariatePlot(x_Axis, y_Axis, x_Axis_name, y_Axis_name) {\n    heatxaxis = x_Axis_name;\n    heatyaxis = y_Axis_name;\n    app.byId(\'scatterplot\').style.display = \'block\';\n    d3.select("#scatterplot").html("");\n    d3.select("#scatterplot").select("svg").remove();\n\n    // scatter plot\n    data_plot = [];\n    var nanCount = 0;\n    for (var i = 0; i < 1000; i++) {\n        if (isNaN(x_Axis[i]) || isNaN(y_Axis[i])) {\n            nanCount++;\n        } else {\n            var newNumber1 = x_Axis[i];\n            var newNumber2 = y_Axis[i];\n            data_plot.push({ xaxis: newNumber1, yaxis: newNumber2, score: Math.random() * 100 });\n        }\n    }\n\n    // D3 line charts need sorted data\n    data_plot.sort(function (a, b) {\n        return a.xaxis - b.xaxis;\n    });\n\n    var margin = { top: 20, right: 15, bottom: 40, left: 60 },\n        width = 500 - margin.left - margin.right,\n        height = 280 - margin.top - margin.bottom,\n        padding = 100;\n\n    var min_x = d3.min(data_plot, function (_, i) {\n        return data_plot[i].xaxis;\n    });\n    var max_x = d3.max(data_plot, function (_, i) {\n        return data_plot[i].xaxis;\n    });\n    var avg_x = (max_x - min_x) / 10;\n    var min_y = d3.min(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var max_y = d3.max(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var avg_y = (max_y - min_y) / 10;\n\n    var xScale = d3.scale.linear().domain([min_x - avg_x, max_x + avg_x]).range([0, width]);\n\n    var yScale = d3.scale.linear().domain([min_y - avg_y, max_y + avg_y]).range([height, 0]);\n\n    var xAxis = d3.svg.axis().scale(xScale).orient(\'bottom\').tickSize(-height);\n\n    var yAxis = d3.svg.axis().scale(yScale).orient(\'left\').ticks(5).tickSize(-width);\n\n    var zoom = d3.behavior.zoom().x(xScale).y(yScale).scaleExtent([1, 10]).on("zoom", zoomed);\n\n    var chart_scatter = d3.select(\'#scatterplot\').append(\'svg:svg\').attr(\'width\', width + margin.right + margin.left).attr(\'height\', height + margin.top + margin.bottom).call(zoom);\n\n    var main1 = chart_scatter.append(\'g\').attr(\'transform\', \'translate(\' + margin.left + \',\' + margin.top + \')\').attr(\'width\', width + margin.right + margin.left).attr(\'height\', height + margin.top + margin.bottom).attr(\'class\', \'main\');\n\n    main1.append(\'g\').attr(\'transform\', \'translate(0,\' + height + \')\').attr(\'class\', \'x axis\').call(xAxis);\n\n    main1.append(\'g\').attr(\'transform\', \'translate(0,0)\').attr(\'class\', \'y axis\').call(yAxis);\n\n    var clip = main1.append("defs").append("svg:clipPath").attr("id", "clip").append("svg:rect").attr("id", "clip-rect").attr("x", "0").attr("y", "0").attr(\'width\', width).attr(\'height\', height);\n\n    main1.append("g").attr("clip-path", "url(#clip)").selectAll("circle").data(data_plot).enter().append("circle").attr("cx", function (_, i) {\n        return xScale(data_plot[i].xaxis);\n    }).attr("cy", function (_, i) {\n        return yScale(data_plot[i].yaxis);\n    }).attr("r", 2).style("fill", "#B71C1C");\n    chart_scatter.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + padding / 5 + "," + height / 2 + ")rotate(-90)") // text is drawn off the screen top left, move down and out and rotate\n    .text(y_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    chart_scatter.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + width / 2 + "," + (height + padding / 2) + ")") // centre below axis\n    .text(x_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    function zoomed() {\n        var panX = d3.event.translate[0];\n        var panY = d3.event.translate[1];\n        var scale = d3.event.scale;\n\n        panX = panX > 10 ? 10 : panX;\n        var maxX = -(scale - 1) * width - 10;\n        panX = panX < maxX ? maxX : panX;\n\n        panY = panY > 10 ? 10 : panY;\n        var maxY = -(scale - 1) * height - 10;\n        panY = panY < maxY ? maxY : panY;\n\n        zoom.translate([panX, panY]);\n\n        main1.select(".x.axis").call(xAxis);\n        main1.select(".y.axis").call(yAxis);\n        main1.selectAll("circle").attr("cx", function (_, i) {\n            return xScale(data_plot[i].xaxis);\n        }).attr("cy", function (_, i) {\n            return yScale(data_plot[i].yaxis);\n        }).attr("r", 2.5).style("fill", "#B71C1C");\n    }\n\n    d3.select(\'#NAcount\').style(\'display\', \'block\');\n    d3.select("#NAcount").text("There are " + nanCount + " number of NA values in the relation.");\n}\n\nvar plotnamea = void 0,\n    plotnameb = void 0,\n    varn1 = void 0,\n    varn2 = void 0,\n    varsize1 = void 0,\n    varsize2 = void 0;\n\nvar continuous_n = 0;\nvar bar_n = 0;\n\nfunction get_width(id) {\n    return 50 * (id === \'plotA\' ? continuous_n : bar_n);\n}\n\nfunction crossTabPlots(PlotNameA, PlotNameB, json_obj) {\n    continuous_n = 0;\n    bar_n = 0;\n    plotnamea = PlotNameA;\n    plotnameb = PlotNameB;\n    $("#input1").attr("placeholder", PlotNameA).blur();\n    $("#input2").attr("placeholder", PlotNameB).blur();\n    var plot_a = \'#plotA\',\n        plot_b = \'#plotB\';\n\n\n    var margin_cross = { top: 30, right: 35, bottom: 40, left: 40 },\n        width_cross = 300 - margin_cross.left - margin_cross.right,\n        height_cross = 160 - margin_cross.top - margin_cross.bottom;\n    var padding_cross = 100;\n\n    d3.select("#input1").on("mouseover", function () {\n        d3.select("#tooltipPlotA").style("visibility", "visible").style("opacity", "1").text(PlotNameA);\n    }).on("mouseout", function () {\n        d3.select("#tooltipPlotA").style("visibility", "hidden").style("opacity", "0");\n    });\n    d3.select("#input2").on("mouseover", function () {\n        d3.select("#tooltipPlotB").style("visibility", "visible").style("opacity", "1").text(PlotNameB);\n    }).on("mouseout", function () {\n        d3.select("#tooltipPlotB").style("visibility", "hidden").style("opacity", "0");\n    });\n\n    var plot_nodes = app.nodes.slice();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = plot_nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var node = _step.value;\n\n            if (node.name === PlotNameA) {\n                if (node.plottype === "continuous") {\n                    continuous_n++;\n                    density_cross(node);\n                } else if (node.plottype === "bar") {\n                    bar_n++;\n                    bar_cross(node);\n                }\n            } else if (node.name === PlotNameB) {\n                if (node.plottype === "continuous") {\n                    continuous_n++;\n                    density_cross(node);\n                } else if (node.plottype === "bar") {\n                    bar_n++;\n                    bar_cross(node);\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var plotA_size = void 0,\n        plotB_size = void 0,\n        plotA_sizem = void 0,\n        plotB_sizem = void 0;\n    var varn1 = void 0,\n        varn2 = void 0,\n        varsize1 = void 0,\n        varsize2 = void 0;\n    $("#Equidistance1").click(function () {\n        varn1 = "equidistance";\n        plotA_size = parseInt(d3.select("#input1")[0][0].value);\n        varsize1 = plotA_size;\n        equidistance(PlotNameA, plotA_size);\n        document.getElementById("plotA_status").innerHTML = PlotNameA + \' : \' + varn1 + \' distribution with \' + varsize1 + \' divisions\';\n    });\n    $("#Equimass1").click(function () {\n        plotA_sizem = parseInt(d3.select("#input1")[0][0].value);\n        varsize1 = plotA_sizem;\n        equimass(PlotNameA, plotA_sizem);\n        varn1 = "equimass";\n        document.getElementById("plotA_status").innerHTML = PlotNameA + \' : \' + varn1 + \' distribution with \' + varsize1 + \' divisions\';\n    });\n    $("#Equidistance2").click(function () {\n        varn2 = "equidistance";\n        plotB_size = parseInt(d3.select("#input2")[0][0].value);\n        equidistance(PlotNameB, plotB_size);\n        varsize2 = plotB_size;\n        document.getElementById("plotB_status").innerHTML = PlotNameB + \' : \' + varn2 + \' distribution with \' + varsize2 + \' divisions\';\n    });\n    $("#Equimass2").click(function () {\n        varn2 = "equimass";\n        plotB_sizem = parseInt(d3.select("#input2")[0][0].value);\n        equimass(PlotNameB, plotB_sizem);\n        varsize2 = plotB_sizem;\n        document.getElementById("plotB_status").innerHTML = PlotNameB + \' : \' + varn2 + \' distribution with \' + varsize2 + \' divisions\';\n    });\n\n    // this is the function to add  the density plot if any\n    function density_cross(density_env, a, method_name) {\n        // setup the x_cord according to the size given by user\n        var yVals = density_env.ploty;\n        var xVals = density_env.plotx;\n\n        // an array of objects\n        var data2 = [];\n        for (var i = 0; i < density_env.plotx.length; i++) {\n            data2.push({ x: density_env.plotx[i], y: density_env.ploty[i] });\n        }\n        data2.forEach(function (d) {\n            d.x = +d.x;\n            d.y = +d.y;\n        });\n\n        var min_x = d3.min(data2, function (d, i) {\n            return data2[i].x;\n        });\n        var max_x = d3.max(data2, function (d, i) {\n            return data2[i].x;\n        });\n        var avg_x = (max_x - min_x) / 10;\n        var min_y = d3.min(data2, function (d, i) {\n            return data2[i].y;\n        });\n        var max_y = d3.max(data2, function (d, i) {\n            return data2[i].y;\n        });\n        var avg_y = (max_y - min_y) / 10;\n        var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width_cross]);\n        var invx = d3.scale.linear().range([d3.min(data2.map(function (d) {\n            return d.x;\n        })), d3.max(data2.map(function (d) {\n            return d.x;\n        }))]).domain([0, width_cross]);\n        var y = d3.scale.linear().domain([d3.min(data2.map(function (d) {\n            return d.y;\n        })), d3.max(data2.map(function (d) {\n            return d.y;\n        }))]).range([height_cross, 0]);\n        var xAxis = d3.svg.axis().scale(x).ticks(5).orient("bottom");\n        var yAxis = d3.svg.axis().scale(y).orient("left");\n        var area = d3.svg.area().interpolate("monotone").x(function (d) {\n            return x(d.x);\n        }).y0(height_cross - avg_y).y1(function (d) {\n            return y(d.y);\n        });\n        var line = d3.svg.line().x(function (d) {\n            return x(d.x);\n        }).y(function (d) {\n            return y(d.y);\n        }).interpolate("monotone");\n\n        var plotsvg = d3.select(plot_a).append("svg").attr("id", "plotsvg_id").style("width", width_cross + margin_cross.left + margin_cross.right) //setting height to the height of #main.left\n        .style("height", height_cross + margin_cross.top + margin_cross.bottom).style("margin-left", "20px").append("g").attr("transform", "translate(0," + margin_cross.top + ")");\n        plotsvg.append("path").attr("id", "path1").datum(data2).attr("class", "area").attr("d", area);\n        plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height_cross + ")").call(xAxis);\n        plotsvg.append("text").attr("x", width_cross / 2).attr("y", margin_cross.top + padding_cross - 10).attr("text-anchor", "middle").text(density_env.name).style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n        if (isNaN(a) || a === 0) {\n            var upper_limit = d3.max(xVals);\n            var lower_limit = d3.min(xVals);\n            var z = 10;\n            var diff = upper_limit - lower_limit;\n            var buffer = diff / z;\n            var x_cord = [];\n            var push_data = lower_limit;\n            for (var i = 0; i < z - 1; i++) {\n                push_data = push_data + buffer;\n                x_cord.push(push_data);\n                plotsvg.append("line").attr("id", "line1").attr("x1", x(x_cord[i])).attr("x2", x(x_cord[i])).attr("y1", y(d3.min(yVals))).attr("y2", y(d3.max(yVals))).style("stroke", "#0D47A1").style("stroke-dasharray", "3");\n            }\n        } else {\n            if (method_name === "equidistance") {\n                var upper_limit = d3.max(xVals);\n                var lower_limit = d3.min(xVals);\n                var diff = upper_limit - lower_limit;\n                var buffer = diff / a;\n                var x_cord = [];\n                var push_data = lower_limit;\n                for (var i = 0; i < a - 1; i++) {\n                    push_data = push_data + buffer;\n                    x_cord.push(push_data);\n                    plotsvg.append("line").attr("id", "line1").attr("x1", x(x_cord[i])).attr("x2", x(x_cord[i])).attr("y1", y(d3.min(yVals))).attr("y2", y(d3.max(yVals))).style("stroke", "#0D47A1").style("stroke-dasharray", "4");\n                }\n            } else if (method_name === "equimass") {\n                // here we use the data from equimassCalculation to draw lines\n                var temp = [];\n                temp = equimassCalculation(density_env, a);\n                for (var i = 1; i < a; i++) {\n                    plotsvg.append("line").attr("id", "line1").attr("x1", x(temp[i])).attr("x2", x(temp[i])).attr("y1", y(d3.min(yVals))).attr("y2", y(d3.max(yVals))).style("stroke", "#0D47A1").style("stroke-dasharray", "4");\n                }\n            }\n        }\n    }\n\n    // this is the function to add the bar plot if any\n    function bar_cross(bar_env, a, method_name) {\n        var barPadding = .015; // Space between bars\n        var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n        var plotXaxis = true;\n\n        // Data\n        var keys = Object.keys(bar_env.plotvalues);\n        var yVals = new Array();\n        var ciUpperVals = new Array();\n        var ciLowerVals = new Array();\n        var ciSize;\n\n        var xVals = new Array();\n        var yValKey = new Array();\n\n        if (bar_env.nature === "nominal") {\n            var xi = 0;\n            for (var i = 0; i < keys.length; i++) {\n                if (bar_env.plotvalues[keys[i]] == 0) {\n                    continue;\n                }\n                yVals[xi] = bar_env.plotvalues[keys[i]];\n                xVals[xi] = xi;\n                if ($private) {\n                    if (bar_env.plotvaluesCI) {\n                        ciLowerVals[xi] = bar_env.plotValuesCI.lowerBound[keys[i]];\n                        ciUpperVals[xi] = bar_env.plotValuesCI.upperBound[keys[i]];\n                    }\n                    ciSize = ciUpperVals[xi] - ciLowerVals[xi];\n                }\n                yValKey.push({ y: yVals[xi], x: keys[i] });\n                xi = xi + 1;\n            }\n            yValKey.sort(function (a, b) {\n                return b.y - a.y;\n            }); // array of objects, each object has y, the same as yVals, and x, the category\n            yVals.sort(function (a, b) {\n                return b - a;\n            }); // array of y values, the height of the bars\n            ciUpperVals.sort(function (a, b) {\n                return b.y - a.y;\n            }); // ?\n            ciLowerVals.sort(function (a, b) {\n                return b.y - a.y;\n            }); // ?\n        } else {\n            for (var i = 0; i < keys.length; i++) {\n                yVals[i] = bar_env.plotvalues[keys[i]];\n                xVals[i] = Number(keys[i]);\n                if ($private) {\n                    if (bar_env.plotvaluesCI) {\n                        ciLowerVals[i] = bar_env.plotvaluesCI.lowerBound[keys[i]];\n                        ciUpperVals[i] = bar_env.plotvaluesCI.upperBound[keys[i]];\n                    }\n                    ciSize = ciUpperVals[i] - ciLowerVals[i];\n                }\n            }\n        }\n\n        if (yVals.length > 15 & bar_env.numchar === "numeric" | yVals.length > 5 & bar_env.numchar === "character") {\n            plotXaxis = false;\n        }\n        var minY = d3.min(yVals);\n        var maxY = d3.max(yVals); // in the future, set maxY to the value of the maximum confidence limit\n        var minX = d3.min(xVals);\n        var maxX = d3.max(xVals);\n        var x_1 = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width_cross]);\n\n        var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width_cross]);\n\n        var y_1 = d3.scale.linear()\n        // .domain([0, maxY])\n        .domain([0, maxY]).range([0, height_cross]);\n\n        var xAxis = d3.svg.axis().scale(x_1).ticks(yVals.length).orient("bottom");\n\n        var yAxis = d3.svg.axis().scale(y_1).orient("left");\n\n        var plotsvg1 = d3.select(plot_b).append("svg").attr("id", "plotsvg1_id").style("width", width_cross + margin_cross.left + margin_cross.right) //setting height to the height of #main.left\n        .style("height", height_cross + margin_cross.top + margin_cross.bottom).style("margin-left", "20px").append("g").attr("transform", "translate(0," + margin_cross.top + ")");\n\n        var rectWidth = x_1(minX + 0.5 - 2 * barPadding); //the "width" is the coordinate of the end of the first bar\n        plotsvg1.selectAll("rect").data(yVals).enter().append("rect").attr("id", "path2").attr("x", function (d, i) {\n            return x_1(xVals[i] - 0.5 + barPadding);\n        }).attr("y", function (d) {\n            return y_1(maxY - d);\n        }).attr("width", rectWidth).attr("height", function (d) {\n            return y_1(d);\n        }).attr("fill", "#fa8072");\n\n        if (plotXaxis) {\n            plotsvg1.append("g").attr("class", "x axis").attr("transform", "translate(0," + height_cross + ")").call(xAxis);\n        }\n\n        plotsvg1.append("text").attr("x", width_cross / 2).attr("y", margin_cross.top + padding_cross - 10).attr("text-anchor", "middle").text(bar_env.name).style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n        if (isNaN(a) || a === 0) {\n            x_cord2 = equimass_bar(bar_env, keys.length);\n            for (var i = 0; i < keys.length - 1; i++) {\n                plotsvg1.append("line").attr("id", "line2").attr("x1", x_1(x_cord2[i])).attr("x2", x_1(x_cord2[i])).attr("y1", y_1(0)).attr("y2", y_1(maxY)).style("stroke", "#212121").style("stroke-dasharray", "4");\n            }\n        } else {\n            if (method_name === "equidistance") {\n                var upper_limit1 = maxX;\n                var lower_limit1 = minX;\n                var diff1 = upper_limit1 - lower_limit1;\n                var buffer1 = diff1 / a;\n                var x_cord1 = [];\n                var push_data1 = lower_limit1;\n                for (var i = 0; i < a - 1; i++) {\n                    push_data1 = push_data1 + buffer1;\n                    x_cord1.push(push_data1);\n                    plotsvg1.append("line").attr("id", "line2").attr("x1", x_1(x_cord1[i])).attr("x2", x_1(x_cord1[i])).attr("y1", y_1(0)).attr("y2", y_1(maxY)).style("stroke", "#0D47A1").style("stroke-dasharray", "4");\n                }\n            } else if (method_name === "equimass") {\n                var x_cord2 = [];\n                x_cord2 = equimass_bar(bar_env, a);\n                for (var i = 0; i < a - 1; i++) {\n                    plotsvg1.append("line").attr("id", "line2").attr("x1", x_1(x_cord2[i])).attr("x2", x_1(x_cord2[i])).attr("y1", y_1(0)).attr("y2", y_1(maxY)).style("stroke", "#0D47A1").style("stroke-dasharray", "4");\n                }\n            }\n        }\n    }\n\n    function equidistance(A, a) {\n        var method_name = "equidistance";\n        // json object to be sent to r server\n        var obj = new Object();\n        obj.plotNameA = A;\n        obj.equidistance = a;\n        var string = JSON.stringify(obj);\n        for (var i = 0; i < plot_nodes.length; i++) {\n            if (plot_nodes[i].name === A) {\n                if (plot_nodes[i].plottype === "continuous") {\n                    $("#plotsvg_id").remove();\n                    density_cross(plot_nodes[i], a, method_name);\n                } else if (plot_nodes[i].plottype === "bar") {\n                    $("#plotsvg1_id").remove();\n                    bar_cross(plot_nodes[i], a, method_name);\n                }\n            } else {\n                console.log("not found");\n            }\n        }\n    }\n    function equimass(A, a) {\n        //equimass function to call the plot function\n        var method_name = "equimass";\n        var obj = new Object();\n        obj.plotNameA = A;\n        obj.equidistance = a;\n        var string = JSON.stringify(obj);\n        for (var i = 0; i < plot_nodes.length; i++) {\n            if (plot_nodes[i].name === A) {\n                if (plot_nodes[i].plottype === "continuous") {\n                    $("#plotsvg_id").remove();\n                    density_cross(plot_nodes[i], a, method_name);\n                } else if (plot_nodes[i].plottype === "bar") {\n                    $("#plotsvg1_id").remove();\n                    bar_cross(plot_nodes[i], a, method_name);\n                }\n            } else {\n                console.log("not found");\n            }\n        }\n    }\n\n    function equimassCalculation(plot_ev, n) {\n        // here we find the coordinates using CDF values\n        //var n =v-1;\n        var arr_y = [];\n        var arr_x = [];\n\n        arr_y = plot_ev.cdfploty; // cdfploty data stored\n        arr_x = plot_ev.cdfplotx; // cdfplotx data stored\n\n        var Upper_limitY = d3.max(arr_y);\n        var Lower_limitY = d3.min(arr_y);\n        var diffy = Upper_limitY - Lower_limitY;\n        var e = diffy / n; // e is the variable to store the average distance between the points in the cdfy in order to divide the cdfy\n\n        var arr_c = []; //array to store the cdfy divided coordinates data\n        var push_data = arr_y[0];\n        for (var i = 0; i < n; i++) {\n            push_data = push_data + e;\n            arr_c.push(push_data);\n        }\n\n        var temp_cdfx = [];\n        var temp = [];\n        var store = [];\n\n        for (var i = 0; i < n; i++) //to get through each arr_c\n        {\n            for (var j = 0; j < 50; j++) // to compare with cdfy or arr_y\n            {\n                if (arr_c[i] === arr_y[j]) {\n                    store.push({ val: i, coor1: j, coor2: j, diff1: 0.34, diff2: 0 }); // for testing purpose\n                }\n            }\n        }\n        for (var i = 0; i < n; i++) {\n            var diff_val1, diff_val2; // here the diff is not actual difference, it is the fraction of the distance from the two points\n            var x1, x2, x3, x4;\n            for (var j = 0; j < 50; j++) {\n                if (arr_y[j] < arr_c[i] && arr_c[i] < arr_y[j + 1]) {\n                    x1 = arr_c[i];\n                    x2 = arr_c[i] - arr_y[j];\n                    x3 = arr_y[j + 1] - arr_c[i];\n                    x4 = arr_y[j + 1] - arr_y[j];\n                    diff_val1 = x2 / x4;\n                    diff_val2 = x3 / x4;\n                    store.push({ val: i, coor1: j, coor2: j + 1, diff1: diff_val1, diff2: diff_val2 });\n                }\n            }\n        }\n\n        for (var i = 0; i < n; i++) {\n            var y1, y2, y3, diffy1, diffy2;\n            y1 = store[i].val;\n            y2 = store[i].coor1;\n            y3 = store[i].coor2;\n            diffy1 = store[i].diff1;\n            diffy2 = store[i].diff2;\n            var x_coor1 = arr_x[y2];\n            var x_coor2 = arr_x[y3];\n            var x_diff = x_coor2 - x_coor1;\n            var distance1 = x_diff * diffy1;\n            var val_x = x_coor1 + distance1;\n            temp.push(val_x);\n        }\n        return temp;\n    }\n\n    function equimass_bar(plot_ev, n) {\n        var keys = Object.keys(plot_ev.plotvalues);\n        var k = keys.length;\n        var temp = [];\n        var count = 0;\n\n        if (k < n) {\n            alert("error enter vaild size");\n        } else {\n            while (k > 0) {\n                temp.push({ pos: count, val: k });\n                count++;\n                k--;\n                if (count >= n) {\n                    count = 0;\n                }\n            }\n\n            var temp2 = new Array(n);\n            for (var i = 0; i < temp2.length; i++) {\n                temp2[i] = 0;\n            }\n            for (var i = 0; i < keys.length; i++) {\n                keys[i] = (keys[i] + 5) / 10; // to get the increase in the actual values by 0.5 according to the xaxis in plot\n            }\n            for (var i = 0; i < n; i++) {\n                for (var j = 0; j < temp.length; j++) {\n                    if (temp[j].pos === i) {\n                        temp2[i] = temp2[i] + 1;\n                    }\n                }\n            }\n\n            var j = 0,\n                k = 0;\n            var temp_final = new Array(n);\n            for (var i = 0; i < keys.length; i++) {\n                temp2[j] = temp2[j] - 1;\n                if (temp2[j] === 0) {\n                    j++;\n                    temp_final[k] = keys[i];\n                    k++;\n                }\n            }\n            return temp_final;\n        }\n    }\n}\n\nfunction linechart(x_Axis_name, y_Axis_name) {\n    document.getElementById(\'linechart\').style.display = "block";\n    d3.select("#lineChart").select("svg").remove();\n    $(\'#linechart\').html("");\n    var padding = 10;\n    var w_linechart = 480;\n    var h_linechart = 300;\n    var margin_linechart = { top: 20, right: 80, bottom: 30, left: 50 };\n    var width_linechart = w_linechart - margin_linechart.left - margin_linechart.right;\n    var height_linechart = h_linechart - margin_linechart.top - margin_linechart.bottom;\n\n    var svg = d3.select("#linechart").append("svg").attr("id", "chart").attr("width", w_linechart).attr("height", h_linechart);\n    var chart = svg.append("g").classed("display", true).attr("transform", "translate(" + margin_linechart.left + "," + margin_linechart.top + ")");\n    var x = d3.scale.linear().domain(d3.extent(data_plot, function (d) {\n        return d.xaxis;\n    })).range([0, width_linechart]);\n    var y = d3.scale.linear().domain([d3.min(data_plot, function (d) {\n        return d.yaxis;\n    }), d3.max(data_plot, function (d) {\n        return d.yaxis;\n    })]).range([height_linechart, 0]);\n    var xAxis = d3.svg.axis().scale(x).orient("bottom").ticks(5);\n    var yAxis = d3.svg.axis().scale(y).orient("left").ticks(5);\n    var line = d3.svg.line().x(function (d) {\n        return x(d.xaxis);\n    }).y(function (d) {\n        return y(d.yaxis);\n    });\n\n    function plot(params) {\n        this.append("g").classed("x axis", true).attr("transform", "translate(0," + height_linechart + ")").call(params.axis.x);\n        this.append("g").classed("y axis", true).attr("transform", "translate(0,0)").call(params.axis.y);\n        //enter()\n        this.selectAll(".trendline").data([params.data]).enter().append("path").classed("trendline", true);\n        this.selectAll(".point").data(params.data).enter().append("circle").classed("point", true).attr("r", 2);\n        //update\n        this.selectAll(".trendline").attr("d", function (d) {\n            return line(d);\n        });\n        this.selectAll(".point").attr("cx", function (d) {\n            var date = d.xaxis;\n            return x(date);\n        }).attr("cy", function (d) {\n            return y(d.yaxis);\n        }).style("color", "#EF5350");\n        //exit()\n        this.selectAll(".trendline").data([params.data]).exit().remove();\n        this.selectAll(".point").data(params.data).exit().remove();\n    }\n\n    var temp = d3.select("#main.left").style("width");\n    var width = temp.substring(0, temp.length - 2);\n    var height = $(window).height() - 120;\n    svg.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + padding + "," + height / 3 + ")rotate(-90)") // text is drawn off the screen top left, move down and out and rotate\n    .text(y_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n    svg.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + width / 5 + "," + (height - padding - 128) + ")") // centre below axis\n    .text(x_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    plot.call(chart, {\n        data: data_plot,\n        axis: {\n            x: xAxis,\n            y: yAxis\n        }\n    });\n}\n\nfunction viz(m, json_vizexplore, model_name_set) {\n    d3.select("#plotA").html("");\n    d3.select("#plotB").html("");\n    d3.select("#tabular_1").style("display", "block");\n    d3.select("#tabular_2").style("display", "block");\n\n    var get_data = model_name_set.split("-");\n    var model_name1 = get_data[0] + "-" + get_data[1];\n    var model_name2 = get_data[1] + "-" + get_data[0];\n    var mym = +m.substr(5, 5) - 1;\n\n    function removeKids(parent) {\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild);\n        }\n    }\n\n    var json = json_vizexplore;\n    // pipe in figures to right panel\n    var filelist = new Array();\n\n    // image added to the div\n    var x_axis = [];\n    var y_axis = [];\n    for (var i in json.plotdata) {\n        for (var j in json.plotdata[i].varname) {\n            if (json.plotdata[i].varname[j] === get_data[0]) {\n                for (var k in json.plotdata[i].data) {\n                    x_axis[k] = json.plotdata[i].data[k];\n                }\n            }\n            if (json.plotdata[i].varname[j] === get_data[1]) {\n                for (var k in json.plotdata[i].data) {\n                    y_axis[k] = json.plotdata[i].data[k];\n                }\n            }\n        }\n    }\n\n    bivariatePlot(x_axis, y_axis, get_data[0], get_data[1]);\n\n    $(\'#scatterplot_img\').on(\'click\', function () {\n        $("#scatterplot_img").fadeOut("fast").fadeIn().fadeTo("fast", 1.0);\n    });\n    $(\'#heatmap_img\').on(\'click\', function () {\n        $("#heatmap_img").fadeOut("fast").fadeIn().fadeTo("fast", 1.0);\n    });\n    $(\'#linechart_img\').on(\'click\', function () {\n        $("#linechart_img").fadeOut("fast").fadeIn().fadeTo("fast", 1.0);\n    });\n    $(\'#scatterplot_img\').click(function () {\n        document.getElementById(\'heatchart\').style.display = "none";\n        document.getElementById(\'linechart\').style.display = "none";\n        bivariatePlot(x_axis, y_axis, get_data[0], get_data[1]);\n    });\n    $(\'#heatmap_img\').click(function () {\n        document.getElementById(\'scatterplot\').style.display = "none";\n        document.getElementById(\'linechart\').style.display = "none";\n        heatmap(get_data[0], get_data[1]);\n    });\n    $(\'#linechart_img\').click(function () {\n        document.getElementById(\'heatchart\').style.display = "none";\n        document.getElementById(\'scatterplot\').style.display = "none";\n        linechart(get_data[0], get_data[1]);\n    });\n\n    var empty = [];\n    crossTabPlots(get_data[0], get_data[1], empty);\n\n    var cork = [];\n    var corp = [];\n    var cors = [];\n    var var1 = [];\n    var var2 = [];\n    var table_obj = [];\n    var colnames = [];\n    var colvar = [];\n    var table_data = [];\n    var rowvar = [];\n    var rownames = [];\n    function crossTab_Table(json) {\n        table_data = [];\n        table_obj = [];\n        var push = function push(i, key) {\n            return json.tabular[i][key].map(function (v) {\n                return v;\n            });\n        };\n        // data for statistics\n        for (var i in json.tabular) {\n            if (i == model_name1 || i == model_name2) {\n                colnames = push(i, \'colnames\');\n                rownames = push(i, \'rownames\');\n                rowvar = push(i, \'rowvar\');\n                colvar = push(i, \'colvar\');\n            }\n        }\n        for (var i in json.tabular) {\n            if (i == model_name1 || i == model_name2) {\n                for (var n in json.tabular[i].data) {\n                    table_data[n] = [];\n                    for (var a = 0; a < colnames.length; a++) {\n                        table_data[n].push(json.tabular[i].data[n][a]);\n                    }\n                }\n            }\n        }\n        for (var p = 0; p < rownames.length; p++) {\n            for (var l = 0; l < colnames.length; l++) {\n                table_obj.push({ rowname: rownames[p], colname: colnames[l], value: table_data[p][l] });\n            }\n        }\n        d3table1(table_obj);\n    }\n\n    // for the statistics\n    for (var key in json.statistical) {\n        if (key == model_name1 || key == model_name2) {\n            for (var a in json.statistical[key].cork) {\n                cork.push(json.statistical[key].cork[a]);\n            }\n        }\n    }\n    for (var key1 in json.statistical) {\n        if (key1 == model_name1 || key1 == model_name2) {\n            for (var b in json.statistical[key1].corp) {\n                corp.push(json.statistical[key1].corp[b]);\n            }\n        }\n    }\n    for (var key in json.statistical) {\n        if (key == model_name1 || key == model_name2) {\n            for (var c in json.statistical[key].cors) {\n                cors.push(json.statistical[key].cors[c]);\n            }\n        }\n    }\n    for (var key in json.statistical) {\n        if (key == model_name1 || key == model_name2) {\n            for (var d in json.statistical[key].var1) {\n                var1.push(json.statistical[key].var1[d]);\n            }\n        }\n    }\n    for (var key4 in json.statistical) {\n        if (key == model_name1 || key == model_name2) {\n            for (var e in json.statistical[key].var2) {\n                var2.push(json.statistical[key].var2[e]);\n            }\n        }\n    }\n    for (var i = 0; i < app.zparams.zvars.length; i++) {\n        var resultsArray = [];\n    }\n    for (var key in json.tabular) {\n        if (key == "colnames") {\n            console.log("colnames found");\n            continue;\n        }\n        var obj = json.tabular[key];\n        resultsArray.push(obj);\n    }\n\n    function d3table1(data) {\n        var width = 120,\n            // width of svg\n        height = 160,\n            // height of svg\n        padding = 22; // space around the chart, not including labels\n\n        d3.select("#tabular_2").html("").append("h5").text("CROSS-TABS ").style("color", "#424242");\n\n        var sv = d3.select("#tabular_2").append("svg").attr("width", "100%").attr("height", "100%").style("overflow", "visible");\n        var fo = sv.append(\'foreignObject\').attr("width", "100%").attr("height", "100%").style("padding", 10).attr("overflow", "visible");\n        var table = fo.append("xhtml:table").attr("class", "table").style("border-collapse", " collapse"),\n            th = table.append("tr").style("border", 1).text("_").style("color", "#fff");\n        for (var i = 0; i < colnames.length; i++) {\n            th.append("td").style("border-bottom", 1).style("text-align", "center").style("background-color", plots.selVarColor).append("b").text(colnames[i]);\n        }\n        for (var k = 0; k < rownames.length; k++) {\n            var pos = 0;\n            var tr = table.append("tr").style("margin-left", 20).style("background-color", "#BDBDBD").style("border", 1).style("text-align", "center").text(rownames[k]);\n            for (var m = 0; m < colnames.length; m++) {\n                for (var z = 0; z < data.length; z++) {\n                    if (rownames[k] === data[z].rowname && colnames[m] === data[z].colname) {\n                        tr.append("td").style("border", 1).style("text-align", "center").style("position", "relative").style("background-color", app.varColor).text(data[z].value);\n                    }\n                }\n            }\n        }\n    }\n\n    crossTab_Table(json);\n\n    var plotAval = varsize1,\n        plotBval = varsize2;\n    if (isNaN(plotAval)) plotAval = 10;\n    if (isNaN(plotBval)) plotBval = 10;\n    var crosstabs = {\n        var1: {\n            name: plotnamea,\n            value: plotAval,\n            buttonType: varn1\n        },\n        var2: {\n            name: plotnameb,\n            value: plotBval,\n            buttonType: varn2\n        }\n    };\n\n    function removeData(key) {\n        for (var key1 in app.zparams) {\n            if (app.zparams.hasOwnProperty(key1) && key === key1 && app.zparams[key1.length] > 0) app.zparams[key1] = [];\n        }\n    }\n\n    var zbreaks = [];\n    var zbreaks_tabular = [];\n    $(\'#SelectionData1\').click(function () {\n        d3.select("#tabular_2").html("");\n        removeData(\'zcrosstab\');\n        app.zparams.zcrosstab.push(crosstabs);\n        explore_crosstab(json);\n        app.estimateLadda.stop();\n        app.explored = true;\n        zbreaks.push(crosstabs);\n        zbreaks_tabular.push(json.tabular);\n        d3.select(\'#breakspace\').append("span").text(\'\\xA0 \\xA0 \\xA0 \\xA0   \').style("margin-top", 0).style("white-space", "pre").style("display", "inline-block").style("float", "left").append("span").append("button") // top stack for results\n        .attr("class", "btn btn-default btn-xs").attr("id", zbreaks.length).text("break " + (zbreaks.length + 1)).on("click", function () {\n            d3.select("#tabular_2").html("");\n            removeData();\n            var id = this.id - 1;\n            app.zparams.zcrosstab.push(zbreaks[id]);\n            explore_crosstab(zbreaks_tabular[id]);\n\n            var inputvalue1, inputvalue2;\n            inputvalue1 = zbreaks[id].var1.value;\n            inputvalue2 = zbreaks[id].var2.value;\n            document.getElementById("input1").value = inputvalue1;\n            document.getElementById("input2").value = inputvalue2;\n\n            var json_obj = zbreaks[id];\n            var varn1, varn2, varsize1, varsize2;\n            if (json_obj.length === 0) {\n                console.log("break not called");\n            } else {\n                varn1 = json_obj.var1.buttonType;\n                varn2 = json_obj.var2.buttonType;\n                varsize1 = json_obj.var1.value;\n                varsize2 = json_obj.var2.value;\n                if (varn1 === "equidistance") {\n                    crossTabPlots.equidistance(get_data[0], varsize1);\n                } else if (varn1 === "equimass") {\n                    crossTabPlots.equimass(get_data[0], varsize1);\n                }\n                if (varn2 === "equidistance") {\n                    crossTabPlots.equidistance(get_data[1], varsize2);\n                } else if (varn2 === "equimass") {\n                    crossTabPlots.equimass(get_data[1], varsize2);\n                }\n            }\n        });\n    });\n\n    async function explore_crosstab(btn) {\n        if (app.downloadIncomplete()) {\n            return;\n        }\n        app.zPop();\n\n        app.estimateLadda.start();\n        // write links to file & run R CMD\n        app.zparams.callHistory = app.callHistory;\n        var json = await app.makeRequest(ROOK_SVC_URL + \'exploreapp\', app.zparams);\n        app.estimateLadda.start();\n        app.explored = false;\n        d3.json("static/result.json", function (err, json) {\n            if (err) {\n                return console.warn(err);\n            }\n            crossTab_Table(json);\n            app.estimateLadda.stop();\n            app.explored = true;\n        });\n    }\n\n    // data for the statistical div\n    var string1 = cork.toString();\n    var string3 = string1.substring(string1.indexOf(":"), string1.length);\n    var string2 = string1.substring(0, string1.indexOf("c"));\n    var string4 = corp.toString();\n    var string6 = string4.substring(string4.indexOf(":"), string4.length);\n    var string5 = string4.substring(0, string4.indexOf("c"));\n    var string7 = cors.toString();\n    var string9 = string7.substring(string7.indexOf(":"), string7.length);\n    var string8 = string7.substring(0, string7.indexOf("c"));\n    var statistical_data = [{ correlation: string2, value: string3 }, { correlation: string5, value: string6 }, { correlation: string8, value: string9 }];\n\n    function d3table(data) {\n        d3.select("#resultsView_statistics").html("").style("background-color", "#fff").append("h5").text("CORRELATION STATISTICS ").style("color", "#424242");\n        var table = d3.select("#resultsView_statistics").append("table").attr("class", "table").style("border-collapse", " collapse"),\n            th = table.append("tr").style("border", 1);\n        for (var i in Object.keys(data[0])) {\n            th.append("td").style("border-bottom", 1).style("text-align", "left").style("background-color", plots.selVarColor).append("b").text(Object.keys(data[0])[i]);\n        }\n        for (var row in data) {\n            var tr = table.append("tr").style("margin-left", 40).style("border", 1).style("text-align", "left");\n            for (var td in data[row]) {\n                tr.append("td").style("border", 1).style("text-align", "left").style("position", "relative").style("background-color", app.varColor).text(data[row][td]);\n            }\n        }\n    }\n    d3table(statistical_data);\n}\n\nfunction model_selection(model_selection_name, count_value, json) {\n\n    if (count_value % 2 == 0 && count_value != 0) {\n        d3.select("#modelView").append("span").text(\'\\xA0 \\xA0 \\xA0 \\xA0   \\xA0 \').style("margin-top", 0).style("white-space", "pre").style("display", "inline-block").style("float", "left").append("span").text("|").style("margin-top", 0).style("white-space", "pre").style("display", "inline-block").style("float", "left").append("span").text(\'\\xA0 \\xA0 \\xA0 \\xA0   \\xA0 \').style("margin-top", 0).style("white-space", "pre").style("display", "inline-block").style("float", "left");\n    }\n    d3.select("#modelView").append("span").text(\' \\xA0\').style("margin-top", 0).style("float", "left").style("display", "inline-block").style("white-space", "pre").style("overflow-y", "hidden").style("overflow-x", "auto").append("button") // top stack for results\n    //      .append("xhtml:button")\n    .attr("class", "btn btn-outline-success").style("padding", "4px").attr("id", model_selection_name).text(model_selection_name).style(\'background-color\', function () {\n        var color1 = "#FFD54F";\n        return count == count1 ? plots.selVarColor : color1;\n    }).style("display", "inline-block").style("white-space", "pre").style("margin-top", 0).style("float", "left").on("click", function () {\n        var a = this.style.backgroundColor.replace(/\\s*/g, "");\n        var b = app.hexToRgba(plots.selVarColor).replace(/\\s*/g, "");\n        if (a.substr(0, 17) === b.substr(0, 17)) {\n            return; //escapes the function early if the displayed model is clicked\n        }\n        viz(this.id, json, model_selection_name);\n        d3.select("#modelView").selectAll("button").style(\'background-color\', "#FFD54F");\n        d3.select(this).style(\'background-color\', plots.selVarColor);\n        _mithril2.default.redraw();\n    });\n}\n\nfunction showLog() {\n    if (app.logArray.length > 0) {\n        app.byId(\'logdiv\').setAttribute("style", "display:block");\n        d3.select("#collapseLog div.panel-body").selectAll("p").data(app.logArray).enter().append("p").text(function (d) {\n            return d;\n        });\n        return;\n    }\n    app.byId(\'logdiv\').setAttribute("style", "display:none");\n}\n\nvar count = 0;\nvar count1 = 0;\n\n/**\n   called by clicking \'Explore\' in explore mode\n*/\nasync function explore() {\n    if (app.downloadIncomplete()) {\n        return;\n    }\n\n    app.zPop();\n    console.log(\'zpop:\', app.zparams);\n\n    // write links to file & run R CMD\n    app.zparams.callHistory = app.callHistory;\n    app.estimateLadda.start(); // start spinner\n    var json = await app.makeRequest(ROOK_SVC_URL + \'exploreapp\', app.zparams);\n    app.estimateLadda.stop();\n    if (!json) {\n        return;\n    }\n\n    app.allResults.push(json);\n    app.explored = true;\n    app.univariate_finished = false;\n\n    d3.select("#modelView").html(\'\');\n    d3.select("#resultsView_statistics").html(\'\');\n\n    d3.select("#modelView").style(\'background-color\', app.hexToRgba(app.varColor)).style("overflow-y", "hidden").style("overflow-x", "auto").append("span").style("white-space", "pre").style("margin-top", 0).style("float", "left").style("position", "relative").style("color", "#757575").text("MODEL SELECTION :  ");\n\n    count = 0;\n    count1 = 0;\n    var model_name = void 0;\n    for (var img in json.images) {\n        if (count === 0) {\n            model_name = img;\n        }\n        model_selection(img, count, json); // for entering all the variables\n        count++;\n    }\n    count1 = count - 1;\n    app.modelCount++;\n\n    var rCall = [];\n    rCall[0] = json.call;\n    app.logArray.push("explore: ".concat(rCall[0]));\n    showLog();\n    viz(model_name, json, model_name);\n    _mithril2.default.redraw();\n}\n\nvar exploreVar = exports.exploreVar = \'\';\nasync function callTreeApp(node_var, app) {\n    exports.exploreVar = exploreVar = node_var;\n    app.zPop();\n    app.zparams.callHistory = app.callHistory;\n\n    app.estimateLadda.start();\n    var res = await app.makeRequest(ROOK_SVC_URL + \'treeapp\', { zparams: app.zparams, dv: node_var });\n    app.estimateLadda.stop();\n    if (res) {\n        app.explored = false;\n        app.univariate_finished = true;\n        _mithril2.default.redraw();\n        univariatePart(res, node_var);\n    }\n}\n\n// Kripanshu : Function to create D3 Tree using the JSON result from call Tree app\nfunction univariatePart(json, var_name) {\n    app.setRightTabExplore(\'Univariate\');\n    document.getElementById("decisionTree").innerHTML = "";\n    d3.select("#decisionTree").style("display", "block").append("p").style("margin-top", "1px").text(var_name);\n\n    // request for r code using nodevar\n    //code for the  decision tree map\n\n    var m = [15, 100, 15, 100],\n        w = 700 - m[1] - m[3],\n        h = 500 - m[0] - m[2],\n        i = 0,\n        rect_width = 60,\n        rect_height = 20,\n        max_link_width = 20,\n        min_link_width = 1.5,\n        char_to_pxl = 6,\n        root;\n\n    var tree = d3.layout.tree().size([h, w]);\n\n    var diagonal = d3.svg.diagonal().projection(function (d) {\n        return [d.x, d.y];\n    });\n\n    // set height of SVG via height of tree, 200px per layer\n    var getHeight = function getHeight(json_data) {\n        return json_data.children ? Math.max.apply(Math, _toConsumableArray(json_data.children.map(function (v) {\n            return getHeight(v);\n        }))) + 1 : 0;\n    };\n\n    var vis = d3.select("#decisionTree").append("svg:svg").attr("width", w + m[1] + m[3]).attr("height", getHeight(json) * 200 + 20).style(\'height\', \'auto\').append("svg:g").attr("transform", "translate(" + m[3] + "," + m[0] + ")");\n\n    // global scale for link width\n    var link_stoke_scale = d3.scale.linear();\n\n    var color_map = d3.scale.category10();\n\n    // stroke style of link - either color or function\n    var stroke_callback = "#ccc";\n    load_dataset(json);\n\n    function load_dataset(json_data) {\n\n        console.log("our data for decision tree", json_data);\n        root = json_data;\n        root.x0 = 0;\n        root.y0 = 0;\n\n        var n_samples = root.samples;\n        var n_labels = root.value.length;\n\n        if (n_labels >= 2) {\n            stroke_callback = mix_colors;\n        } else if (n_labels === 1) {\n            stroke_callback = mean_interpolation(root);\n        }\n\n        link_stoke_scale = d3.scale.linear().domain([0, n_samples]).range([min_link_width, max_link_width]);\n\n        function toggleAll(d) {\n            if (d && d.children) {\n                d.children.forEach(toggleAll);\n                toggle(d);\n            }\n        }\n\n        // Initialize the display to show a few nodes.\n        root.children.forEach(toggleAll);\n\n        update(root);\n    }\n\n    function update(source) {\n        var duration = d3.event && d3.event.altKey ? 5000 : 500;\n\n        // Compute the new tree layout.\n        var nodes = tree.nodes(root).reverse();\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function (d) {\n            d.y = d.depth * 180;\n        });\n\n        // Update the nodes…\n        var node = vis.selectAll("g.node").data(nodes, function (d) {\n            return d.id || (d.id = ++i);\n        });\n\n        // Enter any new nodes at the parent\'s previous position.\n        var nodeEnter = node.enter().append("svg:g").attr("class", "node").attr("transform", function (d) {\n            return "translate(" + source.x0 + "," + source.y0 + ")";\n        }).on("click", function (d) {\n            toggle(d);\n            update(d);\n        });\n\n        nodeEnter.append("svg:rect").attr("x", function (d) {\n            var label = node_label(d);\n            var text_len = label.length * char_to_pxl;\n            var width = d3.max([rect_width, text_len]);\n            return -width / 2;\n        }).attr("width", 1e-6).attr("height", 1e-6).attr("rx", function (d) {\n            return d.type === "split" ? 2 : 0;\n        }).attr("ry", function (d) {\n            return d.type === "split" ? 2 : 0;\n        }).style("stroke", function (d) {\n            return d.type === "split" ? "steelblue" : "olivedrab";\n        }).style("fill", function (d) {\n            return d._children ? "lightsteelblue" : "#fff";\n        });\n\n        nodeEnter.append("svg:text").attr("dy", "12px").attr("text-anchor", "middle").text(node_label).style("fill-opacity", 1e-6);\n\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration).attr("transform", function (d) {\n            return "translate(" + d.x + "," + d.y + ")";\n        });\n\n        nodeUpdate.select("rect").attr("width", function (d) {\n            var label = node_label(d);\n            var text_len = label.length * char_to_pxl;\n            var width = d3.max([rect_width, text_len]);\n            return width;\n        }).attr("height", rect_height).style("fill", function (d) {\n            return d._children ? "lightsteelblue" : "#fff";\n        });\n\n        nodeUpdate.select("text").style("fill-opacity", 1);\n\n        // Transition exiting nodes to the parent\'s new position.\n        var nodeExit = node.exit().transition().duration(duration).attr("transform", function (d) {\n            return "translate(" + source.x + "," + source.y + ")";\n        }).remove();\n\n        nodeExit.select("rect").attr("width", 1e-6).attr("height", 1e-6);\n\n        nodeExit.select("text").style("fill-opacity", 1e-6);\n\n        // Update the links\n        var link = vis.selectAll("path.link").data(tree.links(nodes), function (d) {\n            return d.target.id;\n        });\n\n        // Enter any new links at the parent\'s previous position.\n        link.enter().insert("svg:path", "g").attr("class", "link").attr("d", function (d) {\n            var o = {\n                x: source.x0,\n                y: source.y0\n            };\n            return diagonal({\n                source: o,\n                target: o\n            });\n        }).transition().duration(duration).attr("d", diagonal).style("stroke-width", function (d) {\n            return link_stoke_scale(d.target.samples);\n        }).style("stroke", stroke_callback);\n\n        // Transition links to their new position.\n        link.transition().duration(duration).attr("d", diagonal).style("stroke-width", function (d) {\n            return link_stoke_scale(d.target.samples);\n        }).style("stroke", stroke_callback);\n\n        // Transition exiting nodes to the parent\'s new position.\n        link.exit().transition().duration(duration).attr("d", function (d) {\n            var o = {\n                x: source.x,\n                y: source.y\n            };\n            return diagonal({\n                source: o,\n                target: o\n            });\n        }).remove();\n\n        // Stash the old positions for transition.\n        nodes.forEach(function (d) {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n    }\n\n    // Toggle children.\n    function toggle(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    }\n\n    // Node labels\n    function node_label(d) {\n        if (d.type === "leaf") {\n            // leaf\n            var formatter = d3.format(".2f");\n            var vals = [];\n            d.value.forEach(function (v) {\n                vals.push(formatter(v));\n            });\n            return "[" + vals.join(", ") + "]";\n        } else {\n            // split node\n            return d.label;\n        }\n    }\n\n    /**\n     * Mixes colors according to the relative frequency of classes.\n     */\n    function mix_colors(d) {\n        var value = d.target.value;\n        var sum = d3.sum(value);\n        var col = d3.rgb(0, 0, 0);\n        value.forEach(function (val, i) {\n            var label_color = d3.rgb(color_map(i));\n            var mix_coef = val / sum;\n            col.r += mix_coef * label_color.r;\n            col.g += mix_coef * label_color.g;\n            col.b += mix_coef * label_color.b;\n        });\n        return col;\n    }\n\n    /**\n     * A linear interpolator for value[0].\n     *\n     * Useful for link coloring in regression trees.\n     */\n    function mean_interpolation(root) {\n\n        var max = 1e-9,\n            min = 1e9;\n\n        function recurse(node) {\n            if (node.value[0] > max) {\n                max = node.value[0];\n            }\n\n            if (node.value[0] < min) {\n                min = node.value[0];\n            }\n\n            if (node.children) {\n                node.children.forEach(recurse);\n            }\n        }\n\n        recurse(root);\n\n        var scale = d3.scale.linear().domain([min, max]).range(["#2166AC", "#B2182B"]);\n\n        function interpolator(d) {\n            return scale(d.target.value[0]);\n        }\n\n        return interpolator;\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.init = init;\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(3);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar force = void 0;\nvar nodes = [];\nvar links = [];\nvar circle = void 0,\n    path = void 0;\n\n// mouse event vars\nvar selected_node = null,\n    selected_link = null,\n    mousedown_link = null,\n    mousedown_node = null,\n    mouseup_node = null;\n\nfunction resetMouseVars() {\n    mousedown_node = null;\n    mouseup_node = null;\n    mousedown_link = null;\n}\n\n// update force layout (called automatically each iteration)\nfunction tick() {\n    // draw directed edges with proper padding from node centers\n    path.attr('d', function (d) {\n        var deltaX = d.target.x - d.source.x,\n            deltaY = d.target.y - d.source.y,\n            dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n            normX = deltaX / dist,\n            normY = deltaY / dist,\n            sourcePadding = d.left ? RADIUS + 5 : RADIUS,\n            targetPadding = d.right ? RADIUS + 5 : RADIUS,\n            sourceX = d.source.x + sourcePadding * normX,\n            sourceY = d.source.y + sourcePadding * normY,\n            targetX = d.target.x - targetPadding * normX,\n            targetY = d.target.y - targetPadding * normY;\n        return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;\n    });\n\n    circle.attr('transform', function (d) {\n        return 'translate(' + d.x + ',' + d.y + ')';\n    });\n    circle.selectAll('circle') // shrink/expand pebbles that join/leave groups\n    .transition().duration(100).attr('r', function (d) {\n        return (0, _app.setPebbleRadius)(d);\n    });\n}\n\nfunction mousemove(d) {\n    if (!mousedown_node) return;\n    // update drag line\n    drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);\n}\n\nfunction mouseup(d) {\n    if (mousedown_node) {\n        drag_line.classed('hidden', true).style('marker-end', '');\n    }\n    // because :active only works in WebKit?\n    svg.classed('active', false);\n    // clear mouse event vars\n    resetMouseVars();\n}\n\n// update graph (called when needed)\nfunction restart(line, line2, visbackground, vis2background, vis, vis2, drag_line) {\n    var forcetoggle = app.forcetoggle,\n        setPebbleCharge = app.setPebbleCharge,\n        k = app.k,\n        zparams = app.zparams,\n        arc3 = app.arc3,\n        dvColor = app.dvColor,\n        arc4 = app.arc4,\n        nomColor = app.nomColor,\n        arc1 = app.arc1,\n        gr1Color = app.gr1Color,\n        arcInd1 = app.arcInd1,\n        arcInd2 = app.arcInd2,\n        gr2Color = app.gr2Color,\n        record_user_metadata = app.record_user_metadata;\n\n    // nodes.index is floating and depends on updates to nodes. a variables index changes when new variables are added.\n\n    circle.call(force.drag);\n    if (forcetoggle[0] == \"true\") {\n        force.gravity(0.1);\n        force.charge(setPebbleCharge);\n        force.start();\n        force.linkStrength(1);\n        k = 4; // strength parameter for group attraction/repulsion\n        if (zparams.zgroup1.length > 0 & zparams.zgroup2.length > 0) {\n            // scale down by number of active groups\n            k = 2.5;\n        }\n    } else {\n        force.gravity(0);\n        force.charge(0);\n        force.linkStrength(0);\n        k = 0;\n    }\n    force.resume();\n\n    // path (link) group\n    path = path.data(links);\n\n    // update existing links\n    // VJD: dashed links between pebbles are \"selected\". this is disabled for now\n    path.classed('selected', function (x) {\n        return null;\n    }).style('marker-start', function (x) {\n        return '';\n    }).style('marker-end', function (x) {\n        return '';\n    });\n\n    // add new links\n    path.enter().append('svg:path').attr('class', 'link').classed('selected', function (x) {\n        return null;\n    }).style('marker-start', function (x) {\n        return '';\n    }).style('marker-end', function (x) {\n        return '';\n    }).on('mousedown', function (d) {\n        // do we ever need to select a link? make it delete..\n        var obj = JSON.stringify(d);\n        for (var j = 0; j < links.length; j++) {\n            if (obj === JSON.stringify(links[j])) {\n                del(links, j);\n            }\n        }\n    });\n\n    // remove old links\n    path.exit().remove();\n\n    // circle (node) group\n    circle = circle.data(nodes, function (x) {\n        return x.id;\n    });\n\n    // update existing nodes (reflexive & selected visual states)\n    // d3.rgb is the function adjusting the color here\n    circle.selectAll('circle').classed('reflexive', function (x) {\n        return x.reflexive;\n    }).style('fill', function (x) {\n        return d3.rgb(x.nodeCol);\n    }).style('stroke', function (x) {\n        return d3.rgb(x.strokeColor);\n    }).style('stroke-width', function (x) {\n        return x.strokeWidth;\n    });\n\n    // add new nodes\n    var g = circle.enter().append('svg:g').attr('id', function (x) {\n        return x.name + 'biggroup';\n    });\n\n    // add plot\n    g.each(function (d) {\n        d3.select(this);\n        if (d.plottype == 'continuous') (0, _plots.densityNode)(d, this);else if (d.plottype == 'bar') (0, _plots.barsNode)(d, this);\n    });\n\n    var append = function append(str, attr) {\n        return function (x) {\n            return str + x[attr || 'id'];\n        };\n    };\n\n    g.append(\"path\").attr(\"id\", append('dvArc')).attr(\"d\", arc3).style(\"fill\", dvColor).attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n        fillThis(this, .3, 0, 100);\n        fill(d, 'dvText', .9, 0, 100);\n    }).on('mouseout', function (d) {\n        fillThis(this, 0, 100, 500);\n        fill(d, 'dvText', 0, 100, 500);\n    }).on('click', function (d) {\n        setColors(d, dvColor);\n        legend(dvColor);\n        //restart();\n        d.group1 = d.group2 = false;\n    });\n\n    g.append(\"text\").attr(\"id\", append('dvText')).attr(\"x\", 6).attr(\"dy\", 11.5).attr(\"fill-opacity\", 0).append(\"textPath\").attr(\"xlink:href\", append('#dvArc')).text(\"Dep Var\");\n\n    g.append(\"path\").attr(\"id\", append('nomArc')).attr(\"d\", arc4).style(\"fill\", nomColor).attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n        if (d.defaultNumchar == \"character\") return;\n        fillThis(this, .3, 0, 100);\n        fill(d, \"nomText\", .9, 0, 100);\n    }).on('mouseout', function (d) {\n        if (d.defaultNumchar == \"character\") return;\n        fillThis(this, 0, 100, 500);\n        fill(d, \"nomText\", 0, 100, 500);\n    }).on('click', function (d) {\n        if (d.defaultNumchar == \"character\") return;\n        setColors(d, nomColor);\n        legend(nomColor);\n        //restart();\n    });\n\n    g.append(\"text\").attr(\"id\", append(\"nomText\")).attr(\"x\", 6).attr(\"dy\", 11.5).attr(\"fill-opacity\", 0).append(\"textPath\").attr(\"xlink:href\", append(\"#nomArc\")).text(\"Nominal\");\n\n    g.append(\"path\").attr(\"id\", append('grArc')).attr(\"d\", arc1).style(\"fill\", gr1Color).attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n        fill(d, \"gr1indicator\", .3, 0, 100);\n        fill(d, \"gr2indicator\", .3, 0, 100);\n        fillThis(this, .3, 0, 100);\n        fill(d, 'grText', .9, 0, 100);\n    }).on('mouseout', function (d) {\n        fill(d, \"gr1indicator\", 0, 100, 500);\n        fill(d, \"gr2indicator\", 0, 100, 500);\n        fillThis(this, 0, 100, 500);\n        fill(d, 'grText', 0, 100, 500);\n    }).on('click', function (d) {\n        //d.group1 = !d.group1;      // This might be easier, but currently set in setColors()\n        setColors(d, gr1Color);\n        legend(gr1Color);\n        //restart();\n    });\n\n    g.append(\"path\").attr(\"id\", append('gr1indicator')).attr(\"d\", arcInd1).style(\"fill\", gr1Color) // something like: zparams.zgroup1.indexOf(node.name) > -1  ?  #FFFFFF : gr1Color)\n    .attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n        fillThis(this, .3, 0, 100);\n        fill(d, \"grArc\", .1, 0, 100);\n        fill(d, 'grText', .9, 0, 100);\n    }).on('mouseout', function (d) {\n        fillThis(this, 0, 100, 500);\n        fill(d, \"grArc\", 0, 100, 500);\n        fill(d, 'grText', 0, 100, 500);\n    }).on('click', function (d) {\n        //d.group1 = !d.group1;      // This might be easier, but currently set in setColors()\n        setColors(d, gr1Color);\n        legend(gr1Color);\n        //restart();\n    });\n\n    g.append(\"path\").attr(\"id\", append('gr2indicator')).attr(\"d\", arcInd2).style(\"fill\", gr2Color) // something like: zparams.zgroup1.indexOf(node.name) > -1  ?  #FFFFFF : gr1Color)\n    .attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n        fillThis(this, .3, 0, 100);\n        fill(d, \"grArc\", .1, 0, 100);\n        fill(d, 'grText', .9, 0, 100);\n    }).on('mouseout', function (d) {\n        fillThis(this, 0, 100, 500);\n        fill(d, \"grArc\", 0, 100, 500);\n        fill(d, 'grText', 0, 100, 500);\n    }).on('click', function (d) {\n        //d.group2 = !d.group2;      // This might be easier, but currently set in setColors()\n        setColors(d, gr2Color);\n        legend(gr2Color);\n        //restart();\n    });\n\n    g.append(\"text\").attr(\"id\", append('grText')).attr(\"x\", 6).attr(\"dy\", 11.5).attr(\"fill-opacity\", 0).append(\"textPath\").attr(\"xlink:href\", append('#grArc')).text(\"Groups\");\n\n    g.append('svg:circle').attr('class', 'node').attr('r', function (d) {\n        return (0, _app.setPebbleRadius)(d);\n    }).style('pointer-events', 'inherit').style('fill', function (d) {\n        return d.nodeCol;\n    }).style('opacity', \"0.5\").style('stroke', function (d) {\n        return d3.rgb(d.strokeColor).toString();\n    }).classed('reflexive', function (d) {\n        return d.reflexive;\n    }).on('dblclick', function (d) {\n        d3.event.stopPropagation(); // stop click from bubbling\n        summaryHold = true;\n        console.log(\"pebble\");\n        console.log(d.group2);\n        if (d.group1) {\n            var len = nodes.length;\n            var hold = [.6, .2, .9, .8, .1, .3, .4];\n            for (var p = 0; p < d.properties.length; p++) {\n                var obj = {\n                    id: len + p,\n                    reflexive: false,\n                    name: d.properties[p],\n                    labl: \"no labels\",\n                    data: [5, 15, 20, 0, 5, 15, 20],\n                    count: hold,\n                    nodeCol: colors(p),\n                    baseCol: colors(p),\n                    strokeColor: selVarColor,\n                    strokeWidth: \"1\",\n                    subsetplot: false,\n                    subsetrange: [\"\", \"\"],\n                    setxplot: false,\n                    setxvals: [\"\", \"\"],\n                    grayout: false,\n                    group1: false,\n                    group2: true,\n                    forefront: false\n                };\n                console.log(\"obj after merge\");\n                nodes.push(obj);\n                nodes.push(obj);\n                console.log(nodes);\n                links.push({\n                    source: nodes[d.id - 1],\n                    target: nodes[nodes.length - 1], // not able to access with object id!!\n                    left: false,\n                    right: true\n                });\n            }\n            //_restart();\n        }\n    }).on('contextmenu', function (d) {\n        // right click on node\n        d3.event.preventDefault();\n        d3.event.stopPropagation();\n\n        rightClickLast = true;\n        mousedown_node = d;\n        selected_node = mousedown_node === selected_node ? null : mousedown_node;\n        selected_link = null;\n\n        // reposition drag line\n        drag_line.style('marker-end', 'url(#end-arrow)').classed('hidden', false).attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);\n\n        svg.on('mousemove', mousemove);\n        //restart();\n    }).on('mouseup', function (d) {\n        d3.event.stopPropagation();\n\n        if (rightClickLast) {\n            rightClickLast = false;\n            return;\n        }\n        if (!mousedown_node) return;\n\n        // needed by FF\n        drag_line.classed('hidden', true).style('marker-end', '');\n\n        // check for drag-to-self\n        mouseup_node = d;\n        if (mouseup_node === mousedown_node) {\n            resetMouseVars();\n            return;\n        }\n\n        // unenlarge target node\n        d3.select(this).attr('transform', '');\n\n        // add link to graph (update if exists)\n        // NB: links are strictly source < target; arrows separately specified by booleans\n        var source, target, direction;\n        if (mousedown_node.id < mouseup_node.id) {\n            source = mousedown_node;\n            target = mouseup_node;\n            direction = 'right';\n        } else {\n            source = mouseup_node;\n            target = mousedown_node;\n            direction = 'left';\n        }\n\n        var link = links.filter(function (x) {\n            return x.source == source && x.target == target;\n        })[0];\n        if (link) {\n            link[direction] = true;\n        } else {\n            link = {\n                source: source,\n                target: target,\n                left: false,\n                right: false\n            };\n            link[direction] = true;\n            links.push(link);\n        }\n\n        // select new link\n        selected_link = link;\n        selected_node = null;\n        svg.on('mousemove', null);\n\n        resetMouseVars();\n        //restart();\n    });\n\n    // show node names\n    g.append('svg:text').attr('x', 0).attr('y', 15).attr('class', 'id').text(function (d) {\n        return d.name;\n    });\n\n    // show summary stats on mouseover\n    // SVG doesn't support text wrapping, use html instead\n    g.selectAll(\"circle.node\").on(\"mouseover\", function (d) {\n        tabLeft('tab3');\n        varSummary(d);\n        d.forefront = true;\n\n        byId('transformations').setAttribute('style', 'display:block');\n        byId(\"transSel\").selectedIndex = d.id;\n        transformVar = valueKey[d.id];\n\n        fill(d, \"dvArc\", .1, 0, 100);\n        fill(d, \"dvText\", .5, 0, 100);\n        fill(d, \"grArc\", .1, 0, 100);\n        fill(d, \"grText\", .5, 0, 100);\n\n        if (d.defaultNumchar == \"numeric\") {\n            fill(d, \"nomArc\", .1, 0, 100);\n            fill(d, \"nomText\", .5, 0, 100);\n        }\n        fill(d, \"csArc\", .1, 0, 100);\n        fill(d, \"csText\", .5, 0, 100);\n        fill(d, \"timeArc\", .1, 0, 100);\n        fill(d, \"timeText\", .5, 0, 100);\n\n        m.redraw();\n    }).on('mouseout', function (d) {\n        d.forefront = false;\n        summaryHold || tabLeft(subset ? 'tab2' : 'tab1');\n        'csArc csText timeArc timeText dvArc dvText nomArc nomText grArc grText'.split(' ').map(function (x) {\n            return fill(d, x, 0, 100, 500);\n        });\n        m.redraw();\n    });\n\n    // the transformation variable list is silently updated as pebbles are added/removed\n    d3.select(\"#transSel\").selectAll('li').remove();\n\n    d3.select(\"#transSel\").selectAll('li').data(nodes.map(function (x) {\n        return x.name;\n    })) // set to variables in model space as they're added\n    .enter().append(\"li\").text(function (d) {\n        return d;\n    });\n\n    // remove old nodes\n    circle.exit().remove();\n    force.start();\n\n    // save workspaces\n    console.log('ok ws');\n    record_user_metadata();\n}\n\nfunction init() {\n    var gr1Color = app.gr1Color,\n        gr2Color = app.gr2Color,\n        RADIUS = app.RADIUS,\n        height = app.height,\n        width = app.width,\n        fakeClick = app.fakeClick,\n        myspace = app.myspace;\n\n\n    nodes = Object.values(app.allPipelineInfo);\n\n    // app starts here\n    var svg = d3.select('#whitespace0');\n    svg.selectAll('*').remove();\n\n    var _app$setup_svg = app.setup_svg(svg),\n        _app$setup_svg2 = _slicedToArray(_app$setup_svg, 9),\n        line = _app$setup_svg2[0],\n        line2 = _app$setup_svg2[1],\n        visbackground = _app$setup_svg2[2],\n        vis2background = _app$setup_svg2[3],\n        vis = _app$setup_svg2[4],\n        vis2 = _app$setup_svg2[5],\n        drag_line = _app$setup_svg2[6],\n        path1 = _app$setup_svg2[7],\n        circle1 = _app$setup_svg2[8];\n\n    path = path1;\n    circle = circle1;\n\n    svg.attr('id', function () {\n        return \"whitespace\".concat(myspace);\n    }).attr('height', height).on('mousedown', function (d) {\n        // prevent I-bar on drag\n        d3.event.preventDefault();\n        // because :active only works in WebKit?\n        svg.classed('active', true);\n        if (d3.event.ctrlKey || mousedown_node || mousedown_link) {\n            return;\n        }\n        //restart();\n    }).on('mouseup', mouseup);\n\n    force = d3.layout.force().nodes(nodes).links(links).size([width, height]).linkDistance(150).charge(-800).on('tick', tick);\n\n    d3.select(window).on('click', function () {\n        // all clicks will bubble here unless event.stopPropagation()\n        $('#transList').fadeOut(100);\n        $('#transSel').fadeOut(100);\n    });\n\n    restart(line, line2, visbackground, vis2background, vis, vis2, drag_line); // initializes force.layout()\n    fakeClick();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.leftpanel = leftpanel;\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _Panel = __webpack_require__(26);\n\nvar _Panel2 = _interopRequireDefault(_Panel);\n\nvar _PanelButton = __webpack_require__(5);\n\nvar _PanelButton2 = _interopRequireDefault(_PanelButton);\n\nvar _Dropdown = __webpack_require__(27);\n\nvar _Dropdown2 = _interopRequireDefault(_Dropdown);\n\nvar _PanelList = __webpack_require__(6);\n\nvar _PanelList2 = _interopRequireDefault(_PanelList);\n\nvar _Search = __webpack_require__(4);\n\nvar _Search2 = _interopRequireDefault(_Search);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction leftpanel(pipelines) {\n    return (0, _mithril2.default)(_Panel2.default, {\n        side: 'left',\n        title: 'Data Selection'\n    }, (0, _mithril2.default)('#tab1[style=display: ' + (0, _PanelButton.when)('left', 'tab1') + '; padding: 0 8px; text-align: center]', [(0, _mithril2.default)(_Dropdown2.default, { style: 'margin-bottom: 0.5em; width: 100%', items: ['Problem 1'] }), (0, _mithril2.default)(_PanelList2.default, { items: pipelines, title: 'Info', content: function content(x) {\n            return x;\n        }, onclick: function onclick(el) {\n            return console.log(el.target.id);\n        } })]));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3Jlc3VsdHMuanM/MGNmOCJdLCJuYW1lcyI6WyJsZWZ0cGFuZWwiLCJwaXBlbGluZXMiLCJzaWRlIiwidGl0bGUiLCJzdHlsZSIsIml0ZW1zIiwiY29udGVudCIsIngiLCJvbmNsaWNrIiwiY29uc29sZSIsImxvZyIsImVsIiwidGFyZ2V0IiwiaWQiXSwibWFwcGluZ3MiOiI7Ozs7O1FBUWdCQSxTLEdBQUFBLFM7O0FBUmhCOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRU8sU0FBU0EsU0FBVCxDQUFtQkMsU0FBbkIsRUFBOEI7QUFDakMsV0FBTyx3Q0FBUztBQUNaQyxjQUFNLE1BRE07QUFFWkMsZUFBTztBQUZLLEtBQVQsRUFHSixpREFBMEIsdUJBQUssTUFBTCxFQUFhLE1BQWIsQ0FBMUIsNENBQXVGLENBQ3RGLDJDQUFZLEVBQUNDLE9BQU8sbUNBQVIsRUFBNkNDLE9BQU8sQ0FBQyxXQUFELENBQXBELEVBQVosQ0FEc0YsRUFFdEYsNENBQVEsRUFBQ0EsT0FBT0osU0FBUixFQUFtQkUsT0FBTyxNQUExQixFQUFrQ0csU0FBUztBQUFBLG1CQUFLQyxDQUFMO0FBQUEsU0FBM0MsRUFBbURDLFNBQVM7QUFBQSxtQkFBTUMsUUFBUUMsR0FBUixDQUFZQyxHQUFHQyxNQUFILENBQVVDLEVBQXRCLENBQU47QUFBQSxTQUE1RCxFQUFSLENBRnNGLENBQXZGLENBSEksQ0FBUDtBQU9IIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCBQYW5lbCBmcm9tICcuL3ZpZXdzL1BhbmVsJztcbmltcG9ydCBCdXR0b24sIHt3aGVufSBmcm9tICcuL3ZpZXdzL1BhbmVsQnV0dG9uJztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuLi9jb21tb24vYXBwL3ZpZXdzL0Ryb3Bkb3duJztcbmltcG9ydCBMaXN0IGZyb20gJy4vdmlld3MvUGFuZWxMaXN0JztcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi92aWV3cy9TZWFyY2gnO1xuXG5leHBvcnQgZnVuY3Rpb24gbGVmdHBhbmVsKHBpcGVsaW5lcykge1xuICAgIHJldHVybiBtKFBhbmVsLCB7XG4gICAgICAgIHNpZGU6ICdsZWZ0JyxcbiAgICAgICAgdGl0bGU6ICdEYXRhIFNlbGVjdGlvbidcbiAgICB9LCBtKGAjdGFiMVtzdHlsZT1kaXNwbGF5OiAke3doZW4oJ2xlZnQnLCAndGFiMScpfTsgcGFkZGluZzogMCA4cHg7IHRleHQtYWxpZ246IGNlbnRlcl1gLCBbXG4gICAgICAgIG0oRHJvcGRvd24sIHtzdHlsZTogJ21hcmdpbi1ib3R0b206IDAuNWVtOyB3aWR0aDogMTAwJScsIGl0ZW1zOiBbJ1Byb2JsZW0gMSddfSksXG4gICAgICAgIG0oTGlzdCwge2l0ZW1zOiBwaXBlbGluZXMsIHRpdGxlOiAnSW5mbycsIGNvbnRlbnQ6IHggPT4geCwgb25jbGljazogZWwgPT4gY29uc29sZS5sb2coZWwudGFyZ2V0LmlkKX0pXG4gICAgXSkpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2FwcC9yZXN1bHRzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Subpanel = function () {\n    function Subpanel() {\n        _classCallCheck(this, Subpanel);\n    }\n\n    _createClass(Subpanel, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            this.hide = false;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var title = vnode.attrs.title;\n            var legend = title === 'Legend';\n            var target = 'collapse' + title;\n            var z = app.zparams;\n            var side = legend ? 'right' : 'left';\n\n            return (0, _mithril2.default)('#' + (legend ? \"legend.legendary\" : \"logdiv.logbox\") + '.panel.panel-default', {\n                style: _defineProperty({\n                    display: legend && z.ztime.length + z.zcross.length + z.zdv.length + z.znom.length || !legend && app.logArray.length > 0 ? 'block' : 'none'\n                }, side, app.panelWidth[side]) }, (0, _mithril2.default)(\".panel-heading\", (0, _mithril2.default)(\"h3.panel-title\", title, (0, _mithril2.default)('span.glyphicon.glyphicon-large.glyphicon-chevron-' + (this.hide ? 'up' : 'down') + '.pull-right[data-target=#' + target + '][data-toggle=collapse][href=#' + target + ']', {\n                style: 'cursor: pointer',\n                onclick: function onclick(_) {\n                    return _this.hide = !_this.hide;\n                } }))), (0, _mithril2.default)('#' + target + '.panel-collapse.collapse.in', (0, _mithril2.default)(\".panel-body\", !legend ? app.logArray.map(function (x) {\n                return (0, _mithril2.default)('p', x);\n            }) : vnode.attrs.buttons.map(function (x) {\n                return (0, _mithril2.default)('#' + x[0] + '.clearfix.' + (z[x[1]].length === 0 ? \"hide\" : \"show\"), (0, _mithril2.default)(\".rectColor\", (0, _mithril2.default)(\"svg[style=width: 20px; height: 20px]\", (0, _mithril2.default)(\"circle[cx=10][cy=10][fill=white][r=9][stroke=black][stroke-width=2]\"))), (0, _mithril2.default)(\".rectLabel\", x[2]));\n            }))));\n        }\n    }]);\n\n    return Subpanel;\n}();\n\nexports.default = Subpanel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1N1YnBhbmVsLmpzP2ViYWIiXSwibmFtZXMiOlsiYXBwIiwiU3VicGFuZWwiLCJ2bm9kZSIsImhpZGUiLCJ0aXRsZSIsImF0dHJzIiwibGVnZW5kIiwidGFyZ2V0IiwieiIsInpwYXJhbXMiLCJzaWRlIiwic3R5bGUiLCJkaXNwbGF5IiwienRpbWUiLCJsZW5ndGgiLCJ6Y3Jvc3MiLCJ6ZHYiLCJ6bm9tIiwibG9nQXJyYXkiLCJwYW5lbFdpZHRoIiwib25jbGljayIsIm1hcCIsIngiLCJidXR0b25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUE7O0lBQVlBLEc7Ozs7Ozs7Ozs7SUFFTkMsUTs7Ozs7OzsrQkFDS0MsSyxFQUFPO0FBQ1YsaUJBQUtDLElBQUwsR0FBWSxLQUFaO0FBQ0g7Ozs2QkFFSUQsSyxFQUFPO0FBQUE7O0FBQ1IsZ0JBQUlFLFFBQVFGLE1BQU1HLEtBQU4sQ0FBWUQsS0FBeEI7QUFDQSxnQkFBSUUsU0FBU0YsVUFBVSxRQUF2QjtBQUNBLGdCQUFJRyxTQUFTLGFBQWFILEtBQTFCO0FBQ0EsZ0JBQUlJLElBQUlSLElBQUlTLE9BQVo7QUFDQSxnQkFBSUMsT0FBT0osU0FBUyxPQUFULEdBQW1CLE1BQTlCOztBQUVBLG1CQUFPLDhCQUFNQSxTQUFTLGtCQUFULEdBQThCLGVBQXBDLDRCQUEyRTtBQUM5RUs7QUFDSUMsNkJBQVNOLFVBQVVFLEVBQUVLLEtBQUYsQ0FBUUMsTUFBUixHQUFpQk4sRUFBRU8sTUFBRixDQUFTRCxNQUExQixHQUFtQ04sRUFBRVEsR0FBRixDQUFNRixNQUF6QyxHQUFrRE4sRUFBRVMsSUFBRixDQUFPSCxNQUFuRSxJQUE2RSxDQUFDUixNQUFELElBQVdOLElBQUlrQixRQUFKLENBQWFKLE1BQWIsR0FBc0IsQ0FBOUcsR0FBa0gsT0FBbEgsR0FBNEg7QUFEekksbUJBRUtKLElBRkwsRUFFWVYsSUFBSW1CLFVBQUosQ0FBZVQsSUFBZixDQUZaLENBRDhFLEVBQTNFLEVBS0UsdUJBQUUsZ0JBQUYsRUFDRSx1QkFBRSxnQkFBRixFQUNFTixLQURGLEVBRUUsOEVBQXNELEtBQUtELElBQUwsR0FBWSxJQUFaLEdBQWtCLE1BQXhFLGtDQUEwR0ksTUFBMUcsc0NBQWlKQSxNQUFqSixRQUE0SjtBQUN4SkksdUJBQU8saUJBRGlKO0FBRXhKUyx5QkFBUztBQUFBLDJCQUFLLE1BQUtqQixJQUFMLEdBQVksQ0FBQyxNQUFLQSxJQUF2QjtBQUFBLGlCQUYrSSxFQUE1SixDQUZGLENBREYsQ0FMRixFQVdFLDZCQUFNSSxNQUFOLGtDQUNFLHVCQUFFLGFBQUYsRUFBaUIsQ0FBQ0QsTUFBRCxHQUFVTixJQUFJa0IsUUFBSixDQUFhRyxHQUFiLENBQWlCO0FBQUEsdUJBQUssdUJBQUUsR0FBRixFQUFPQyxDQUFQLENBQUw7QUFBQSxhQUFqQixDQUFWLEdBQTZDcEIsTUFBTUcsS0FBTixDQUFZa0IsT0FBWixDQUFvQkYsR0FBcEIsQ0FBd0IsYUFBSztBQUN2Rix1QkFBTyw2QkFBTUMsRUFBRSxDQUFGLENBQU4sbUJBQXVCZCxFQUFFYyxFQUFFLENBQUYsQ0FBRixFQUFRUixNQUFSLEtBQW1CLENBQW5CLEdBQXVCLE1BQXZCLEdBQWdDLE1BQXZELEdBQ0UsdUJBQUUsWUFBRixFQUNFLHVCQUFFLHNDQUFGLEVBQ0UsdUJBQUUscUVBQUYsQ0FERixDQURGLENBREYsRUFJRSx1QkFBRSxZQUFGLEVBQWdCUSxFQUFFLENBQUYsQ0FBaEIsQ0FKRixDQUFQO0FBSWlDLGFBTHlCLENBQTlELENBREYsQ0FYRixDQUFQO0FBa0JIOzs7Ozs7a0JBR1VyQixRIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCAqIGFzIGFwcCBmcm9tICcuLi9hcHAnO1xuXG5jbGFzcyBTdWJwYW5lbCB7XG4gICAgb25pbml0KHZub2RlKSB7XG4gICAgICAgIHRoaXMuaGlkZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZpZXcodm5vZGUpIHtcbiAgICAgICAgbGV0IHRpdGxlID0gdm5vZGUuYXR0cnMudGl0bGU7XG4gICAgICAgIGxldCBsZWdlbmQgPSB0aXRsZSA9PT0gJ0xlZ2VuZCc7XG4gICAgICAgIGxldCB0YXJnZXQgPSAnY29sbGFwc2UnICsgdGl0bGU7XG4gICAgICAgIGxldCB6ID0gYXBwLnpwYXJhbXM7XG4gICAgICAgIGxldCBzaWRlID0gbGVnZW5kID8gJ3JpZ2h0JyA6ICdsZWZ0JztcblxuICAgICAgICByZXR1cm4gbShgIyR7bGVnZW5kID8gXCJsZWdlbmQubGVnZW5kYXJ5XCIgOiBcImxvZ2Rpdi5sb2dib3hcIn0ucGFuZWwucGFuZWwtZGVmYXVsdGAsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbGVnZW5kICYmIHouenRpbWUubGVuZ3RoICsgei56Y3Jvc3MubGVuZ3RoICsgei56ZHYubGVuZ3RoICsgei56bm9tLmxlbmd0aCB8fCAhbGVnZW5kICYmIGFwcC5sb2dBcnJheS5sZW5ndGggPiAwID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgICAgICAgICAgICAgICBbc2lkZV06IGFwcC5wYW5lbFdpZHRoW3NpZGVdXG4gICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICAgbShcIi5wYW5lbC1oZWFkaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgbShcImgzLnBhbmVsLXRpdGxlXCIsXG4gICAgICAgICAgICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgIG0oYHNwYW4uZ2x5cGhpY29uLmdseXBoaWNvbi1sYXJnZS5nbHlwaGljb24tY2hldnJvbi0ke3RoaXMuaGlkZSA/ICd1cCc6ICdkb3duJ30ucHVsbC1yaWdodFtkYXRhLXRhcmdldD0jJHt0YXJnZXR9XVtkYXRhLXRvZ2dsZT1jb2xsYXBzZV1baHJlZj0jJHt0YXJnZXR9XWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2N1cnNvcjogcG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogXyA9PiB0aGlzLmhpZGUgPSAhdGhpcy5oaWRlfSkpKSxcbiAgICAgICAgICAgICAgICAgbShgIyR7dGFyZ2V0fS5wYW5lbC1jb2xsYXBzZS5jb2xsYXBzZS5pbmAsXG4gICAgICAgICAgICAgICAgICAgbShcIi5wYW5lbC1ib2R5XCIsICFsZWdlbmQgPyBhcHAubG9nQXJyYXkubWFwKHggPT4gbSgncCcsIHgpKSA6IHZub2RlLmF0dHJzLmJ1dHRvbnMubWFwKHggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbShgIyR7eFswXX0uY2xlYXJmaXguJHt6W3hbMV1dLmxlbmd0aCA9PT0gMCA/IFwiaGlkZVwiIDogXCJzaG93XCJ9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbShcIi5yZWN0Q29sb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwic3ZnW3N0eWxlPXdpZHRoOiAyMHB4OyBoZWlnaHQ6IDIwcHhdXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiY2lyY2xlW2N4PTEwXVtjeT0xMF1bZmlsbD13aGl0ZV1bcj05XVtzdHJva2U9YmxhY2tdW3N0cm9rZS13aWR0aD0yXVwiKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLnJlY3RMYWJlbFwiLCB4WzJdKSk7fSkpKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdWJwYW5lbDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvU3VicGFuZWwuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// ```\n// m(Footer, {\n//     contents: m(...)\n//     })\n// ```\n\nvar Footer = function () {\n    function Footer() {\n        _classCallCheck(this, Footer);\n    }\n\n    _createClass(Footer, [{\n        key: 'view',\n        value: function view(vnode) {\n            var contents = vnode.attrs.contents;\n\n\n            return (0, _mithril2.default)('#footer', {\n                style: {\n                    background: _common.menuColor,\n                    'border-top': _common.borderColor,\n                    bottom: 0,\n                    height: _common.heightFooter + 'px',\n                    position: 'fixed',\n                    width: '100%'\n                }\n            }, contents);\n        }\n    }]);\n\n    return Footer;\n}();\n\nexports.default = Footer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9Gb290ZXIuanM/YTVjNiJdLCJuYW1lcyI6WyJGb290ZXIiLCJ2bm9kZSIsImNvbnRlbnRzIiwiYXR0cnMiLCJzdHlsZSIsImJhY2tncm91bmQiLCJib3R0b20iLCJoZWlnaHQiLCJwb3NpdGlvbiIsIndpZHRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRXFCQSxNOzs7Ozs7OzZCQUNaQyxLLEVBQU87QUFBQSxnQkFDSEMsUUFERyxHQUNTRCxNQUFNRSxLQURmLENBQ0hELFFBREc7OztBQUdSLG1CQUFPLHVCQUFFLFNBQUYsRUFBYTtBQUNoQkUsdUJBQU87QUFDSEMsaURBREc7QUFFSCxxREFGRztBQUdIQyw0QkFBUSxDQUhMO0FBSUhDLDRCQUFRLHVCQUFlLElBSnBCO0FBS0hDLDhCQUFVLE9BTFA7QUFNSEMsMkJBQU87QUFOSjtBQURTLGFBQWIsRUFTSlAsUUFUSSxDQUFQO0FBVUg7Ozs7OztrQkFkZ0JGLE0iLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSBmcm9tICdtaXRocmlsJ1xuaW1wb3J0IHtoZWlnaHRGb290ZXIsIG1lbnVDb2xvciwgYm9yZGVyQ29sb3J9IGZyb20gXCIuLi9jb21tb25cIjtcblxuLy8gYGBgXG4vLyBtKEZvb3Rlciwge1xuLy8gICAgIGNvbnRlbnRzOiBtKC4uLilcbi8vICAgICB9KVxuLy8gYGBgXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RlciB7XG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICBsZXQge2NvbnRlbnRzfSA9IHZub2RlLmF0dHJzO1xuXG4gICAgICAgIHJldHVybiBtKCcjZm9vdGVyJywge1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBtZW51Q29sb3IsXG4gICAgICAgICAgICAgICAgJ2JvcmRlci10b3AnOiBib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRGb290ZXIgKyAncHgnLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGNvbnRlbnRzKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9Gb290ZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// ```\n// m(Header, {\n//     contents: m(...)\n//     })\n// ```\n\nvar Header = function () {\n    function Header() {\n        _classCallCheck(this, Header);\n    }\n\n    _createClass(Header, [{\n        key: 'oninit',\n        value: function oninit() {\n            this.about = false;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var _vnode$attrs = vnode.attrs,\n                contents = _vnode$attrs.contents,\n                attrsInterface = _vnode$attrs.attrsInterface;\n\n\n            return (0, _mithril2.default)(\"nav#navbar.navbar.navbar-default.navbar-fixed-top[role=navigation]\", (0, _common.mergeAttributes)({\n                style: {\n                    background: _common.menuColor,\n                    height: _common.heightHeader\n                }\n            }, attrsInterface), [(0, _mithril2.default)(\"a.navbar-brand\", (0, _mithril2.default)(\"img[src=/static/images/TwoRavens.png][alt=TwoRavens][width=100][style=margin-left: 1em; margin-top: -0.5em]\", { onmouseover: function onmouseover(_) {\n                    return _this.about = true;\n                }, onmouseout: function onmouseout(_) {\n                    return _this.about = false;\n                } })), (0, _mithril2.default)('#about.panel.panel-default[style=display: ' + (this.about ? 'block' : 'none') + '; left: 140px; position: absolute; width: 500px; z-index: 50]', (0, _mithril2.default)('.panel-body', _common.aboutText)), (0, _mithril2.default)('div', { style: { 'display': 'flex', 'justify-content': 'flex-end', 'align-items': 'center', 'height': '100%' } }, contents)]);\n        }\n    }]);\n\n    return Header;\n}();\n\nexports.default = Header;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9IZWFkZXIuanM/NWE3YiJdLCJuYW1lcyI6WyJIZWFkZXIiLCJhYm91dCIsInZub2RlIiwiYXR0cnMiLCJjb250ZW50cyIsImF0dHJzSW50ZXJmYWNlIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwiaGVpZ2h0Iiwib25tb3VzZW92ZXIiLCJvbm1vdXNlb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUE7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRXFCQSxNOzs7Ozs7O2lDQUNSO0FBQ0wsaUJBQUtDLEtBQUwsR0FBYSxLQUFiO0FBQ0g7Ozs2QkFFSUMsSyxFQUFPO0FBQUE7O0FBQUEsK0JBQ3lCQSxNQUFNQyxLQUQvQjtBQUFBLGdCQUNIQyxRQURHLGdCQUNIQSxRQURHO0FBQUEsZ0JBQ09DLGNBRFAsZ0JBQ09BLGNBRFA7OztBQUdSLG1CQUFPLHVCQUFFLG9FQUFGLEVBQXdFLDZCQUFnQjtBQUN2RkMsdUJBQU87QUFDSEMsaURBREc7QUFFSEM7QUFGRztBQURnRixhQUFoQixFQUt4RUgsY0FMd0UsQ0FBeEUsRUFNSCxDQUNJLHVCQUFFLGdCQUFGLEVBQ0ksdUJBQUUsNkdBQUYsRUFDSSxFQUFDSSxhQUFhO0FBQUEsMkJBQUssTUFBS1IsS0FBTCxHQUFhLElBQWxCO0FBQUEsaUJBQWQsRUFBc0NTLFlBQVk7QUFBQSwyQkFBSyxNQUFLVCxLQUFMLEdBQWEsS0FBbEI7QUFBQSxpQkFBbEQsRUFESixDQURKLENBREosRUFJSSx1RUFBK0MsS0FBS0EsS0FBTCxHQUFhLE9BQWIsR0FBdUIsTUFBdEUscUVBQ0ksdUJBQUUsYUFBRixvQkFESixDQUpKLEVBTUksdUJBQUUsS0FBRixFQUFTLEVBQUNLLE9BQU8sRUFBQyxXQUFXLE1BQVosRUFBb0IsbUJBQW1CLFVBQXZDLEVBQW1ELGVBQWUsUUFBbEUsRUFBNEUsVUFBVSxNQUF0RixFQUFSLEVBQVQsRUFBaUhGLFFBQWpILENBTkosQ0FORyxDQUFQO0FBY0g7Ozs7OztrQkF0QmdCSixNIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCdcblxuaW1wb3J0IHthYm91dFRleHQsIG1lbnVDb2xvciwgaGVpZ2h0SGVhZGVyLCBtZXJnZUF0dHJpYnV0ZXN9IGZyb20gJy4uL2NvbW1vbidcblxuLy8gYGBgXG4vLyBtKEhlYWRlciwge1xuLy8gICAgIGNvbnRlbnRzOiBtKC4uLilcbi8vICAgICB9KVxuLy8gYGBgXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlciB7XG4gICAgb25pbml0KCkge1xuICAgICAgICB0aGlzLmFib3V0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICBsZXQge2NvbnRlbnRzLCBhdHRyc0ludGVyZmFjZX0gPSB2bm9kZS5hdHRycztcblxuICAgICAgICByZXR1cm4gbShcIm5hdiNuYXZiYXIubmF2YmFyLm5hdmJhci1kZWZhdWx0Lm5hdmJhci1maXhlZC10b3Bbcm9sZT1uYXZpZ2F0aW9uXVwiLCBtZXJnZUF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IG1lbnVDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRIZWFkZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBhdHRyc0ludGVyZmFjZSksXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgbShcImEubmF2YmFyLWJyYW5kXCIsXG4gICAgICAgICAgICAgICAgICAgIG0oXCJpbWdbc3JjPS9zdGF0aWMvaW1hZ2VzL1R3b1JhdmVucy5wbmddW2FsdD1Ud29SYXZlbnNdW3dpZHRoPTEwMF1bc3R5bGU9bWFyZ2luLWxlZnQ6IDFlbTsgbWFyZ2luLXRvcDogLTAuNWVtXVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge29ubW91c2VvdmVyOiBfID0+IHRoaXMuYWJvdXQgPSB0cnVlLCBvbm1vdXNlb3V0OiBfID0+IHRoaXMuYWJvdXQgPSBmYWxzZX0pKSxcbiAgICAgICAgICAgICAgICBtKGAjYWJvdXQucGFuZWwucGFuZWwtZGVmYXVsdFtzdHlsZT1kaXNwbGF5OiAke3RoaXMuYWJvdXQgPyAnYmxvY2snIDogJ25vbmUnfTsgbGVmdDogMTQwcHg7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDUwMHB4OyB6LWluZGV4OiA1MF1gLFxuICAgICAgICAgICAgICAgICAgICBtKCcucGFuZWwtYm9keScsIGFib3V0VGV4dCkpLFxuICAgICAgICAgICAgICAgIG0oJ2RpdicsIHtzdHlsZTogeydkaXNwbGF5JzogJ2ZsZXgnLCAnanVzdGlmeS1jb250ZW50JzogJ2ZsZXgtZW5kJywgJ2FsaWduLWl0ZW1zJzogJ2NlbnRlcicsICdoZWlnaHQnOiAnMTAwJSd9fSwgY29udGVudHMpICAgICAgICAgICAgXVxuICAgICAgICApXG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbW1vbi9hcHAvdmlld3MvSGVhZGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _ButtonRadio = __webpack_require__(7);\n\nvar _ButtonRadio2 = _interopRequireDefault(_ButtonRadio);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// ```\n// m(MenuTabbed, {\n//     id: string,\n//     sections: [...,\n//         {\n//             value: string\n//             title: text to use on hover,\n//             idSuffix: (optional) suffix to add to generated id strings\n//             contents: m(...)\n//             display: if 'none', then the button won't be visible on the button bar,\n//             selectWidth: int (optional),\n//             hoverbonus: int (optional)\n//         }],\n//     callback: (value) => console.log(value + \" was clicked!\"),\n//     attrsAll: {attributes to apply to the menu, EG height style}\n//     })\n// ```\n\n// The ids for the generated buttons and content areas are generated via 'idSuffix' passed into sections.\n// For example if idSuffix is 'Type', then there will be html objects with 'btnType' and 'tabType' ids. Defaults to value.\n\nvar MenuTabbed = function () {\n    function MenuTabbed() {\n        _classCallCheck(this, MenuTabbed);\n    }\n\n    _createClass(MenuTabbed, [{\n        key: \"view\",\n        value: function view(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                id = _vnode$attrs.id,\n                sections = _vnode$attrs.sections,\n                callback = _vnode$attrs.callback,\n                selectWidth = _vnode$attrs.selectWidth,\n                hoverBonus = _vnode$attrs.hoverBonus,\n                currentTab = _vnode$attrs.currentTab,\n                attrsAll = _vnode$attrs.attrsAll;\n\n            // If a button is not visible, then create the element for the DOM anyways-- but don't let it affect the css\n\n            var visibleButtons = [];\n            var invisibleButtons = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                var _loop = function _loop() {\n                    var section = _step.value;\n\n                    if (section['display'] === 'none') invisibleButtons.push(section);else {\n                        section['onclick'] = function () {\n                            return callback(section['value']);\n                        };\n                        visibleButtons.push(section);\n                    }\n                    // Automatically build the id\n\n                    section['id'] = 'btn' + (section['idSuffix'] || section['value']);\n                };\n\n                for (var _iterator = sections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    _loop();\n                }\n\n                // Contents to render for the section\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return (0, _mithril2.default)('#' + id, attrsAll, [(0, _mithril2.default)(_ButtonRadio2.default, {\n                id: id + 'ButtonBar',\n                onclick: callback,\n                sections: visibleButtons,\n                attrsAll: { style: { 'margin-bottom': '5px' } },\n                hoverBonus: hoverBonus,\n                activeSection: currentTab,\n                selectWidth: selectWidth\n            }), (0, _mithril2.default)(_ButtonRadio2.default, {\n                id: id + 'ButtonBarHidden',\n                onclick: callback,\n                sections: invisibleButtons,\n                attrsAll: { style: { display: 'none' } },\n                hoverBonus: hoverBonus,\n                selectWidth: selectWidth\n            }), sections.map(function (section) {\n                return (0, _mithril2.default)(\"div#tab\" + (section['idSuffix'] || section['value']), {\n                    style: {\n                        display: section['value'] === currentTab ? 'block' : 'none',\n                        height: 'calc(100% - 39px)',\n                        overflow: 'auto'\n                    }\n                }, section.contents);\n            })]);\n        }\n    }]);\n\n    return MenuTabbed;\n}();\n\nexports.default = MenuTabbed;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9NZW51VGFiYmVkLmpzP2Y2ODMiXSwibmFtZXMiOlsiTWVudVRhYmJlZCIsInZub2RlIiwiYXR0cnMiLCJpZCIsInNlY3Rpb25zIiwiY2FsbGJhY2siLCJzZWxlY3RXaWR0aCIsImhvdmVyQm9udXMiLCJjdXJyZW50VGFiIiwiYXR0cnNBbGwiLCJ2aXNpYmxlQnV0dG9ucyIsImludmlzaWJsZUJ1dHRvbnMiLCJzZWN0aW9uIiwicHVzaCIsIm9uY2xpY2siLCJzdHlsZSIsImFjdGl2ZVNlY3Rpb24iLCJkaXNwbGF5IiwibWFwIiwiaGVpZ2h0Iiwib3ZlcmZsb3ciLCJjb250ZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7SUFFcUJBLFU7Ozs7Ozs7NkJBRVpDLEssRUFBTztBQUFBLCtCQUNzRUEsTUFBTUMsS0FENUU7QUFBQSxnQkFDSEMsRUFERyxnQkFDSEEsRUFERztBQUFBLGdCQUNDQyxRQURELGdCQUNDQSxRQUREO0FBQUEsZ0JBQ1dDLFFBRFgsZ0JBQ1dBLFFBRFg7QUFBQSxnQkFDcUJDLFdBRHJCLGdCQUNxQkEsV0FEckI7QUFBQSxnQkFDa0NDLFVBRGxDLGdCQUNrQ0EsVUFEbEM7QUFBQSxnQkFDOENDLFVBRDlDLGdCQUM4Q0EsVUFEOUM7QUFBQSxnQkFDMERDLFFBRDFELGdCQUMwREEsUUFEMUQ7O0FBR1I7O0FBQ0EsZ0JBQUlDLGlCQUFpQixFQUFyQjtBQUNBLGdCQUFJQyxtQkFBbUIsRUFBdkI7QUFMUTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLHdCQU1DQyxPQU5EOztBQU9KLHdCQUFJQSxRQUFRLFNBQVIsTUFBdUIsTUFBM0IsRUFBbUNELGlCQUFpQkUsSUFBakIsQ0FBc0JELE9BQXRCLEVBQW5DLEtBQ0s7QUFDREEsZ0NBQVEsU0FBUixJQUFxQjtBQUFBLG1DQUFNUCxTQUFTTyxRQUFRLE9BQVIsQ0FBVCxDQUFOO0FBQUEseUJBQXJCO0FBQ0FGLHVDQUFlRyxJQUFmLENBQW9CRCxPQUFwQjtBQUNIO0FBQ0Q7O0FBRUFBLDRCQUFRLElBQVIsSUFBZ0IsU0FBU0EsUUFBUSxVQUFSLEtBQXVCQSxRQUFRLE9BQVIsQ0FBaEMsQ0FBaEI7QUFkSTs7QUFNUixxQ0FBb0JSLFFBQXBCLDhIQUE4QjtBQUFBO0FBUzdCOztBQUVEO0FBakJRO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBa0JSLG1CQUFPLHVCQUFFLE1BQU1ELEVBQVIsRUFBWU0sUUFBWixFQUFzQixDQUN6Qiw4Q0FBZTtBQUNYTixvQkFBSUEsS0FBSyxXQURFO0FBRVhXLHlCQUFTVCxRQUZFO0FBR1hELDBCQUFVTSxjQUhDO0FBSVhELDBCQUFVLEVBQUNNLE9BQU8sRUFBQyxpQkFBaUIsS0FBbEIsRUFBUixFQUpDO0FBS1hSLDRCQUFZQSxVQUxEO0FBTVhTLCtCQUFlUixVQU5KO0FBT1hGLDZCQUFhQTtBQVBGLGFBQWYsQ0FEeUIsRUFVekIsOENBQWU7QUFDWEgsb0JBQUlBLEtBQUssaUJBREU7QUFFWFcseUJBQVNULFFBRkU7QUFHWEQsMEJBQVVPLGdCQUhDO0FBSVhGLDBCQUFVLEVBQUNNLE9BQU8sRUFBQ0UsU0FBUyxNQUFWLEVBQVIsRUFKQztBQUtYViw0QkFBWUEsVUFMRDtBQU1YRCw2QkFBYUE7QUFORixhQUFmLENBVnlCLEVBa0J6QkYsU0FBU2MsR0FBVCxDQUFhLFVBQUNOLE9BQUQ7QUFBQSx1QkFBYSxvQ0FBWUEsUUFBUSxVQUFSLEtBQXVCQSxRQUFRLE9BQVIsQ0FBbkMsR0FBdUQ7QUFDN0VHLDJCQUFPO0FBQ0hFLGlDQUFTTCxRQUFRLE9BQVIsTUFBcUJKLFVBQXJCLEdBQWtDLE9BQWxDLEdBQTRDLE1BRGxEO0FBRUhXLGdDQUFRLG1CQUZMO0FBR0hDLGtDQUFVO0FBSFA7QUFEc0UsaUJBQXZELEVBTXZCUixRQUFRUyxRQU5lLENBQWI7QUFBQSxhQUFiLENBbEJ5QixDQUF0QixDQUFQO0FBMEJIOzs7Ozs7a0JBOUNnQnJCLFUiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSBmcm9tICdtaXRocmlsJ1xuaW1wb3J0IEJ1dHRvblJhZGlvIGZyb20gXCIuL0J1dHRvblJhZGlvXCI7XG5pbXBvcnQge21lcmdlQXR0cmlidXRlc30gZnJvbSBcIi4uL2NvbW1vblwiO1xuXG4vLyBgYGBcbi8vIG0oTWVudVRhYmJlZCwge1xuLy8gICAgIGlkOiBzdHJpbmcsXG4vLyAgICAgc2VjdGlvbnM6IFsuLi4sXG4vLyAgICAgICAgIHtcbi8vICAgICAgICAgICAgIHZhbHVlOiBzdHJpbmdcbi8vICAgICAgICAgICAgIHRpdGxlOiB0ZXh0IHRvIHVzZSBvbiBob3Zlcixcbi8vICAgICAgICAgICAgIGlkU3VmZml4OiAob3B0aW9uYWwpIHN1ZmZpeCB0byBhZGQgdG8gZ2VuZXJhdGVkIGlkIHN0cmluZ3Ncbi8vICAgICAgICAgICAgIGNvbnRlbnRzOiBtKC4uLilcbi8vICAgICAgICAgICAgIGRpc3BsYXk6IGlmICdub25lJywgdGhlbiB0aGUgYnV0dG9uIHdvbid0IGJlIHZpc2libGUgb24gdGhlIGJ1dHRvbiBiYXIsXG4vLyAgICAgICAgICAgICBzZWxlY3RXaWR0aDogaW50IChvcHRpb25hbCksXG4vLyAgICAgICAgICAgICBob3ZlcmJvbnVzOiBpbnQgKG9wdGlvbmFsKVxuLy8gICAgICAgICB9XSxcbi8vICAgICBjYWxsYmFjazogKHZhbHVlKSA9PiBjb25zb2xlLmxvZyh2YWx1ZSArIFwiIHdhcyBjbGlja2VkIVwiKSxcbi8vICAgICBhdHRyc0FsbDoge2F0dHJpYnV0ZXMgdG8gYXBwbHkgdG8gdGhlIG1lbnUsIEVHIGhlaWdodCBzdHlsZX1cbi8vICAgICB9KVxuLy8gYGBgXG5cbi8vIFRoZSBpZHMgZm9yIHRoZSBnZW5lcmF0ZWQgYnV0dG9ucyBhbmQgY29udGVudCBhcmVhcyBhcmUgZ2VuZXJhdGVkIHZpYSAnaWRTdWZmaXgnIHBhc3NlZCBpbnRvIHNlY3Rpb25zLlxuLy8gRm9yIGV4YW1wbGUgaWYgaWRTdWZmaXggaXMgJ1R5cGUnLCB0aGVuIHRoZXJlIHdpbGwgYmUgaHRtbCBvYmplY3RzIHdpdGggJ2J0blR5cGUnIGFuZCAndGFiVHlwZScgaWRzLiBEZWZhdWx0cyB0byB2YWx1ZS5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudVRhYmJlZCB7XG5cbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7aWQsIHNlY3Rpb25zLCBjYWxsYmFjaywgc2VsZWN0V2lkdGgsIGhvdmVyQm9udXMsIGN1cnJlbnRUYWIsIGF0dHJzQWxsfSA9IHZub2RlLmF0dHJzO1xuXG4gICAgICAgIC8vIElmIGEgYnV0dG9uIGlzIG5vdCB2aXNpYmxlLCB0aGVuIGNyZWF0ZSB0aGUgZWxlbWVudCBmb3IgdGhlIERPTSBhbnl3YXlzLS0gYnV0IGRvbid0IGxldCBpdCBhZmZlY3QgdGhlIGNzc1xuICAgICAgICBsZXQgdmlzaWJsZUJ1dHRvbnMgPSBbXTtcbiAgICAgICAgbGV0IGludmlzaWJsZUJ1dHRvbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgc2VjdGlvbiBvZiBzZWN0aW9ucykge1xuICAgICAgICAgICAgaWYgKHNlY3Rpb25bJ2Rpc3BsYXknXSA9PT0gJ25vbmUnKSBpbnZpc2libGVCdXR0b25zLnB1c2goc2VjdGlvbik7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9uWydvbmNsaWNrJ10gPSAoKSA9PiBjYWxsYmFjayhzZWN0aW9uWyd2YWx1ZSddKTtcbiAgICAgICAgICAgICAgICB2aXNpYmxlQnV0dG9ucy5wdXNoKHNlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXV0b21hdGljYWxseSBidWlsZCB0aGUgaWRcblxuICAgICAgICAgICAgc2VjdGlvblsnaWQnXSA9ICdidG4nICsgKHNlY3Rpb25bJ2lkU3VmZml4J10gfHwgc2VjdGlvblsndmFsdWUnXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb250ZW50cyB0byByZW5kZXIgZm9yIHRoZSBzZWN0aW9uXG4gICAgICAgIHJldHVybiBtKCcjJyArIGlkLCBhdHRyc0FsbCwgW1xuICAgICAgICAgICAgbShCdXR0b25SYWRpbywge1xuICAgICAgICAgICAgICAgIGlkOiBpZCArICdCdXR0b25CYXInLFxuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHNlY3Rpb25zOiB2aXNpYmxlQnV0dG9ucyxcbiAgICAgICAgICAgICAgICBhdHRyc0FsbDoge3N0eWxlOiB7J21hcmdpbi1ib3R0b20nOiAnNXB4J319LFxuICAgICAgICAgICAgICAgIGhvdmVyQm9udXM6IGhvdmVyQm9udXMsXG4gICAgICAgICAgICAgICAgYWN0aXZlU2VjdGlvbjogY3VycmVudFRhYixcbiAgICAgICAgICAgICAgICBzZWxlY3RXaWR0aDogc2VsZWN0V2lkdGhcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbShCdXR0b25SYWRpbywge1xuICAgICAgICAgICAgICAgIGlkOiBpZCArICdCdXR0b25CYXJIaWRkZW4nLFxuICAgICAgICAgICAgICAgIG9uY2xpY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHNlY3Rpb25zOiBpbnZpc2libGVCdXR0b25zLFxuICAgICAgICAgICAgICAgIGF0dHJzQWxsOiB7c3R5bGU6IHtkaXNwbGF5OiAnbm9uZSd9fSxcbiAgICAgICAgICAgICAgICBob3ZlckJvbnVzOiBob3ZlckJvbnVzLFxuICAgICAgICAgICAgICAgIHNlbGVjdFdpZHRoOiBzZWxlY3RXaWR0aFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzZWN0aW9ucy5tYXAoKHNlY3Rpb24pID0+IG0oYGRpdiN0YWIke3NlY3Rpb25bJ2lkU3VmZml4J10gfHwgc2VjdGlvblsndmFsdWUnXX1gLCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogc2VjdGlvblsndmFsdWUnXSA9PT0gY3VycmVudFRhYiA/ICdibG9jaycgOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2NhbGMoMTAwJSAtIDM5cHgpJyxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHNlY3Rpb24uY29udGVudHMpKVxuICAgICAgICBdKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbW1vbi9hcHAvdmlld3MvTWVudVRhYmJlZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\n__webpack_require__(28);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// ```\n// m(Panel, {\n//     side: 'left' || 'right',\n//     label: 'text at top of header',\n//     hover: Bool\n//     contents: m(...),\n//     width: int pixels,\n//     attrsAll: { apply attributes to the outer div }\n//     })\n// ```\n\n// If hover is true, then the canvas is occluded by the panels.\n// If hover is false, then the canvas is resized to maintain a margin as panels are opened/closed or canvas contents overflow.\n//\n// Contents for each partition are described in the sections list.\n// If tabs are set, then the width of the panel may be set in the section options.\n// If headers are set, the width of the panel is set globally.\n//\n// Sometimes the contents of a panel should not be accessible via the tab bar.\n// Setting the toggle 'visible' prevents it from appearing in the tab bar.\nvar dot = [_mithril2.default.trust('&#9679;'), (0, _mithril2.default)('br')];\n\nvar Panel = function () {\n    function Panel() {\n        _classCallCheck(this, Panel);\n    }\n\n    _createClass(Panel, [{\n        key: 'view',\n        value: function view(vnode) {\n            var _style;\n\n            var _vnode$attrs = vnode.attrs,\n                side = _vnode$attrs.side,\n                hover = _vnode$attrs.hover,\n                label = _vnode$attrs.label,\n                contents = _vnode$attrs.contents,\n                width = _vnode$attrs.width,\n                attrsAll = _vnode$attrs.attrsAll;\n\n            (0, _common.scrollBarChanged)();\n\n            if (!hover) {\n                (0, _common.setPanelOcclusion)(side, 'calc(' + (_common.panelOpen[side] ? width : '16px') + ' + ' + 2 * _common.panelMargin + 'px)');\n            }\n\n            return (0, _mithril2.default)('#' + side + 'panel.container.sidepanel.clearfix', (0, _common.mergeAttributes)({\n                style: (_style = {\n                    background: _common.menuColor,\n                    border: _common.borderColor,\n                    width: _common.panelOpen[side] ? width : 0,\n                    height: 'calc(100% - ' + (_common.heightHeader + _common.heightFooter) + 'px - ' + 2 * _common.panelMargin + 'px - ' + (_common.canvasScroll['horizontal'] ? _common.scrollbarWidth : 0) + 'px)',\n                    position: 'fixed',\n                    top: _common.heightHeader + _common.panelMargin + 'px'\n                }, _defineProperty(_style, side, (side === 'right' && _common.canvasScroll['vertical'] ? _common.scrollbarWidth : 0) + _common.panelMargin + 'px'), _defineProperty(_style, 'z-index', 100), _style)\n            }, attrsAll), [\n            // Panel handle\n            (0, _mithril2.default)('#toggle' + (side === 'left' ? 'L' : 'R') + 'panelicon.panelbar', {\n                style: _defineProperty({ height: '100%' }, side, 'calc(100% - 16px)')\n            }, (0, _mithril2.default)('span', { onclick: function onclick() {\n                    return (0, _common.togglePanelOpen)(side);\n                } }, dot, dot, dot, dot)),\n\n            // Panel contents\n            (0, _mithril2.default)('div' + (_common.panelOpen[side] ? '' : '.closepanel'), {\n                style: {\n                    width: 'calc(100% - 8px)', height: '100%',\n                    margin: '0 4px',\n                    display: _common.panelOpen[side] ? 'block' : 'none'\n                }\n            }, [(0, _mithril2.default)('#' + side + 'paneltitle.panel-heading.text-center', (0, _mithril2.default)(\"h3.panel-title\", label)), contents])]);\n        }\n    }]);\n\n    return Panel;\n}();\n\nexports.default = Panel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9QYW5lbC5qcz82M2U3Il0sIm5hbWVzIjpbImRvdCIsInRydXN0IiwiUGFuZWwiLCJ2bm9kZSIsImF0dHJzIiwic2lkZSIsImhvdmVyIiwibGFiZWwiLCJjb250ZW50cyIsIndpZHRoIiwiYXR0cnNBbGwiLCJzdHlsZSIsImJhY2tncm91bmQiLCJib3JkZXIiLCJoZWlnaHQiLCJwb3NpdGlvbiIsInRvcCIsIm9uY2xpY2siLCJtYXJnaW4iLCJkaXNwbGF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBRUE7Ozs7Ozs7O0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsTUFBTSxDQUFDLGtCQUFFQyxLQUFGLENBQVEsU0FBUixDQUFELEVBQXFCLHVCQUFFLElBQUYsQ0FBckIsQ0FBWjs7SUFDcUJDLEs7Ozs7Ozs7NkJBRVpDLEssRUFBTztBQUFBOztBQUFBLCtCQUM4Q0EsTUFBTUMsS0FEcEQ7QUFBQSxnQkFDSEMsSUFERyxnQkFDSEEsSUFERztBQUFBLGdCQUNHQyxLQURILGdCQUNHQSxLQURIO0FBQUEsZ0JBQ1VDLEtBRFYsZ0JBQ1VBLEtBRFY7QUFBQSxnQkFDaUJDLFFBRGpCLGdCQUNpQkEsUUFEakI7QUFBQSxnQkFDMkJDLEtBRDNCLGdCQUMyQkEsS0FEM0I7QUFBQSxnQkFDa0NDLFFBRGxDLGdCQUNrQ0EsUUFEbEM7O0FBRVI7O0FBRUEsZ0JBQUksQ0FBQ0osS0FBTCxFQUFZO0FBQ1IsK0NBQWtCRCxJQUFsQixhQUFnQyxrQkFBVUEsSUFBVixJQUFrQkksS0FBbEIsR0FBMEIsTUFBMUQsWUFBc0UsdUJBQXRFO0FBQ0g7O0FBRUQsbUJBQU8sNkJBQU1KLElBQU4seUNBQWdELDZCQUFnQjtBQUNuRU07QUFDSUMsaURBREo7QUFFSUMsK0NBRko7QUFHSUosMkJBQU8sa0JBQVVKLElBQVYsSUFBa0JJLEtBQWxCLEdBQTBCLENBSHJDO0FBSUlLLDhDQUF1QiwyQ0FBdkIsY0FBMEQsdUJBQTFELGNBQWlGLHFCQUFhLFlBQWIsNkJBQThDLENBQS9ILFNBSko7QUFLSUMsOEJBQVUsT0FMZDtBQU1JQyx5QkFBSyw2Q0FBNkI7QUFOdEMsMkNBT0tYLElBUEwsRUFPWSxDQUFDQSxTQUFTLE9BQVQsSUFBb0IscUJBQWEsVUFBYixDQUFwQiw0QkFBZ0UsQ0FBakUsMEJBQW9GLElBUGhHLDJCQVNJLFNBVEosRUFTZSxHQVRmO0FBRG1FLGFBQWhCLEVBWXBESyxRQVpvRCxDQUFoRCxFQVlPO0FBQ1Y7QUFDQSxnREFBWUwsU0FBUyxNQUFULEdBQWtCLEdBQWxCLEdBQXdCLEdBQXBDLDBCQUE2RDtBQUNyRE0seUNBQVFHLFFBQVEsTUFBaEIsSUFBeUJULElBQXpCLEVBQWdDLG1CQUFoQztBQURxRCxhQUE3RCxFQUdJLHVCQUFFLE1BQUYsRUFBVSxFQUFDWSxTQUFTO0FBQUEsMkJBQU0sNkJBQWdCWixJQUFoQixDQUFOO0FBQUEsaUJBQVYsRUFBVixFQUFrREwsR0FBbEQsRUFBdURBLEdBQXZELEVBQTREQSxHQUE1RCxFQUFpRUEsR0FBakUsQ0FISixDQUZVOztBQU9WO0FBQ0EsNENBQVEsa0JBQVVLLElBQVYsSUFBa0IsRUFBbEIsR0FBdUIsYUFBL0IsR0FBZ0Q7QUFDeENNLHVCQUFPO0FBQ0hGLDJCQUFPLGtCQURKLEVBQ3dCSyxRQUFRLE1BRGhDO0FBRUhJLDRCQUFRLE9BRkw7QUFHSEMsNkJBQVMsa0JBQVVkLElBQVYsSUFBa0IsT0FBbEIsR0FBNEI7QUFIbEM7QUFEaUMsYUFBaEQsRUFPSSxDQUNJLDZCQUFNQSxJQUFOLDJDQUFrRCx1QkFBRSxnQkFBRixFQUFvQkUsS0FBcEIsQ0FBbEQsQ0FESixFQUVJQyxRQUZKLENBUEosQ0FSVSxDQVpQLENBQVA7QUFnQ0g7Ozs7OztrQkExQ2dCTixLIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgJy4uLy4uL2Nzcy9jb21tb24uY3NzJ1xuXG5pbXBvcnQge1xuICAgIHBhbmVsT3BlbixcbiAgICB0b2dnbGVQYW5lbE9wZW4sXG4gICAgbWVudUNvbG9yLFxuICAgIGJvcmRlckNvbG9yLFxuICAgIGhlaWdodEhlYWRlcixcbiAgICBoZWlnaHRGb290ZXIsXG4gICAgcGFuZWxNYXJnaW4sXG4gICAgY2FudmFzU2Nyb2xsLFxuICAgIHNjcm9sbGJhcldpZHRoLFxuICAgIHNldFBhbmVsT2NjbHVzaW9uLFxuICAgIHNjcm9sbEJhckNoYW5nZWQsXG4gICAgbWVyZ2VBdHRyaWJ1dGVzXG59IGZyb20gXCIuLi9jb21tb25cIjtcblxuLy8gYGBgXG4vLyBtKFBhbmVsLCB7XG4vLyAgICAgc2lkZTogJ2xlZnQnIHx8ICdyaWdodCcsXG4vLyAgICAgbGFiZWw6ICd0ZXh0IGF0IHRvcCBvZiBoZWFkZXInLFxuLy8gICAgIGhvdmVyOiBCb29sXG4vLyAgICAgY29udGVudHM6IG0oLi4uKSxcbi8vICAgICB3aWR0aDogaW50IHBpeGVscyxcbi8vICAgICBhdHRyc0FsbDogeyBhcHBseSBhdHRyaWJ1dGVzIHRvIHRoZSBvdXRlciBkaXYgfVxuLy8gICAgIH0pXG4vLyBgYGBcblxuLy8gSWYgaG92ZXIgaXMgdHJ1ZSwgdGhlbiB0aGUgY2FudmFzIGlzIG9jY2x1ZGVkIGJ5IHRoZSBwYW5lbHMuXG4vLyBJZiBob3ZlciBpcyBmYWxzZSwgdGhlbiB0aGUgY2FudmFzIGlzIHJlc2l6ZWQgdG8gbWFpbnRhaW4gYSBtYXJnaW4gYXMgcGFuZWxzIGFyZSBvcGVuZWQvY2xvc2VkIG9yIGNhbnZhcyBjb250ZW50cyBvdmVyZmxvdy5cbi8vXG4vLyBDb250ZW50cyBmb3IgZWFjaCBwYXJ0aXRpb24gYXJlIGRlc2NyaWJlZCBpbiB0aGUgc2VjdGlvbnMgbGlzdC5cbi8vIElmIHRhYnMgYXJlIHNldCwgdGhlbiB0aGUgd2lkdGggb2YgdGhlIHBhbmVsIG1heSBiZSBzZXQgaW4gdGhlIHNlY3Rpb24gb3B0aW9ucy5cbi8vIElmIGhlYWRlcnMgYXJlIHNldCwgdGhlIHdpZHRoIG9mIHRoZSBwYW5lbCBpcyBzZXQgZ2xvYmFsbHkuXG4vL1xuLy8gU29tZXRpbWVzIHRoZSBjb250ZW50cyBvZiBhIHBhbmVsIHNob3VsZCBub3QgYmUgYWNjZXNzaWJsZSB2aWEgdGhlIHRhYiBiYXIuXG4vLyBTZXR0aW5nIHRoZSB0b2dnbGUgJ3Zpc2libGUnIHByZXZlbnRzIGl0IGZyb20gYXBwZWFyaW5nIGluIHRoZSB0YWIgYmFyLlxuY29uc3QgZG90ID0gW20udHJ1c3QoJyYjOTY3OTsnKSwgbSgnYnInKV07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYW5lbCB7XG5cbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7c2lkZSwgaG92ZXIsIGxhYmVsLCBjb250ZW50cywgd2lkdGgsIGF0dHJzQWxsfSA9IHZub2RlLmF0dHJzO1xuICAgICAgICBzY3JvbGxCYXJDaGFuZ2VkKCk7XG5cbiAgICAgICAgaWYgKCFob3Zlcikge1xuICAgICAgICAgICAgc2V0UGFuZWxPY2NsdXNpb24oc2lkZSwgYGNhbGMoJHtwYW5lbE9wZW5bc2lkZV0gPyB3aWR0aCA6ICcxNnB4J30gKyAkezIgKiBwYW5lbE1hcmdpbn1weClgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtKGAjJHtzaWRlfXBhbmVsLmNvbnRhaW5lci5zaWRlcGFuZWwuY2xlYXJmaXhgLCBtZXJnZUF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBtZW51Q29sb3IsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICB3aWR0aDogcGFuZWxPcGVuW3NpZGVdID8gd2lkdGggOiAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogYGNhbGMoMTAwJSAtICR7aGVpZ2h0SGVhZGVyICsgaGVpZ2h0Rm9vdGVyfXB4IC0gJHsyICogcGFuZWxNYXJnaW59cHggLSAke2NhbnZhc1Njcm9sbFsnaG9yaXpvbnRhbCddID8gc2Nyb2xsYmFyV2lkdGggOiAwfXB4KWAsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICAgICAgdG9wOiBoZWlnaHRIZWFkZXIgKyBwYW5lbE1hcmdpbiArICdweCcsXG4gICAgICAgICAgICAgICAgW3NpZGVdOiAoc2lkZSA9PT0gJ3JpZ2h0JyAmJiBjYW52YXNTY3JvbGxbJ3ZlcnRpY2FsJ10gPyBzY3JvbGxiYXJXaWR0aCA6IDApICsgcGFuZWxNYXJnaW4gKyAncHgnLFxuICAgICAgICAgICAgICAgIC8vIFsncGFkZGluZy0nICsgc2lkZV06ICcxcHgnLFxuICAgICAgICAgICAgICAgICd6LWluZGV4JzogMTAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGF0dHJzQWxsKSwgW1xuICAgICAgICAgICAgLy8gUGFuZWwgaGFuZGxlXG4gICAgICAgICAgICBtKGAjdG9nZ2xlJHtzaWRlID09PSAnbGVmdCcgPyAnTCcgOiAnUid9cGFuZWxpY29uLnBhbmVsYmFyYCwge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge2hlaWdodDogJzEwMCUnLCBbc2lkZV06ICdjYWxjKDEwMCUgLSAxNnB4KSd9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtKCdzcGFuJywge29uY2xpY2s6ICgpID0+IHRvZ2dsZVBhbmVsT3BlbihzaWRlKX0sIGRvdCwgZG90LCBkb3QsIGRvdCkpLFxuXG4gICAgICAgICAgICAvLyBQYW5lbCBjb250ZW50c1xuICAgICAgICAgICAgbShgZGl2JHtwYW5lbE9wZW5bc2lkZV0gPyAnJyA6ICcuY2xvc2VwYW5lbCd9YCwge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICdjYWxjKDEwMCUgLSA4cHgpJywgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICcwIDRweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBwYW5lbE9wZW5bc2lkZV0gPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgbShgIyR7c2lkZX1wYW5lbHRpdGxlLnBhbmVsLWhlYWRpbmcudGV4dC1jZW50ZXJgLCBtKFwiaDMucGFuZWwtdGl0bGVcIiwgbGFiZWwpKSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudHNcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb21tb24vYXBwL3ZpZXdzL1BhbmVsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// ```\n// m(PanelList, {\n//         id: 'id of container',\n//         items: ['Clickable 1', 'Clickable 2', 'Clickable 3'],\n//\n//         colors: { app.selVarColor: ['Clickable 1'] }, (optional)\n//         classes: { 'item-lineout': ['Clickable 1', 'Clickable 3'] }, (optional)\n//\n//         callback: (item) => console.log(item + \" clicked.\"),\n//         popup: (item) => { return 'PopupContent'}, (optional)\n//\n//         attrsAll: {... additional attributes for the entire list},\n//         attrsItems: {... additional attributes for each item}\n//     })\n// ```\n\n// colors is an object that maps a color to a list or set of items with that color. Order colors by increasing priority.\n// classes acts similarly, but one item may have several classes. Standard css rules apply for stacking css classes.\n// popup returns the popup contents when called with the item. If not set, then popup is not drawn\n\nvar PanelList = function () {\n    function PanelList() {\n        _classCallCheck(this, PanelList);\n    }\n\n    _createClass(PanelList, [{\n        key: 'view',\n        value: function view(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                id = _vnode$attrs.id,\n                items = _vnode$attrs.items,\n                colors = _vnode$attrs.colors,\n                classes = _vnode$attrs.classes,\n                callback = _vnode$attrs.callback,\n                popup = _vnode$attrs.popup,\n                attrsAll = _vnode$attrs.attrsAll,\n                attrsItems = _vnode$attrs.attrsItems;\n\n            // set alternate background-color if defined\n\n            var viewColor = {};\n            for (var color in colors || []) {\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = colors[color][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var item = _step.value;\n                        viewColor[item] = color;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            } // invert the class -> item object\n            var viewClass = {};\n            for (var css in classes || []) {\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = classes[css][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _item = _step2.value;\n\n                        viewClass[_item] ? viewClass[_item].push(css) : viewClass[_item] = [css];\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n            }return (0, _mithril2.default)('div#' + id, attrsAll, items.map(function (item) {\n                return (0, _mithril2.default)('div#' + (id + item.replace(/\\W/g, '_')), (0, _common.mergeAttributes)({\n                    style: {\n                        'margin-top': '5px',\n                        'text-align': \"center\",\n                        'background-color': viewColor[item] || _common.varColor\n                    },\n                    'class': viewClass[item],\n                    onclick: function onclick() {\n                        return (callback || Function)(item);\n                    }\n                },\n\n                // add popup if defined\n                popup ? {\n                    onmouseover: function onmouseover() {\n                        $(this).popover('toggle');\n                    },\n                    onmouseout: function onmouseout() {\n                        $(this).popover('toggle');\n                    },\n                    'data-container': 'body',\n                    'data-content': popup(item),\n                    'data-html': 'true',\n                    'data-original-title': item,\n                    'data-placement': 'auto',\n                    'data-toggle': 'popover',\n                    'data-trigger': 'hover'\n                } : {},\n\n                // add any additional attributes if passed\n                attrsItems), item);\n            }));\n        }\n    }]);\n\n    return PanelList;\n}();\n\nexports.default = PanelList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9QYW5lbExpc3QuanM/ZTMyOSJdLCJuYW1lcyI6WyJQYW5lbExpc3QiLCJ2bm9kZSIsImF0dHJzIiwiaWQiLCJpdGVtcyIsImNvbG9ycyIsImNsYXNzZXMiLCJjYWxsYmFjayIsInBvcHVwIiwiYXR0cnNBbGwiLCJhdHRyc0l0ZW1zIiwidmlld0NvbG9yIiwiY29sb3IiLCJpdGVtIiwidmlld0NsYXNzIiwiY3NzIiwicHVzaCIsIm1hcCIsInJlcGxhY2UiLCJzdHlsZSIsIm9uY2xpY2siLCJGdW5jdGlvbiIsIm9ubW91c2VvdmVyIiwiJCIsInBvcG92ZXIiLCJvbm1vdXNlb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0lBRXFCQSxTOzs7Ozs7OzZCQUNaQyxLLEVBQU87QUFBQSwrQkFDa0VBLE1BQU1DLEtBRHhFO0FBQUEsZ0JBQ0hDLEVBREcsZ0JBQ0hBLEVBREc7QUFBQSxnQkFDQ0MsS0FERCxnQkFDQ0EsS0FERDtBQUFBLGdCQUNRQyxNQURSLGdCQUNRQSxNQURSO0FBQUEsZ0JBQ2dCQyxPQURoQixnQkFDZ0JBLE9BRGhCO0FBQUEsZ0JBQ3lCQyxRQUR6QixnQkFDeUJBLFFBRHpCO0FBQUEsZ0JBQ21DQyxLQURuQyxnQkFDbUNBLEtBRG5DO0FBQUEsZ0JBQzBDQyxRQUQxQyxnQkFDMENBLFFBRDFDO0FBQUEsZ0JBQ29EQyxVQURwRCxnQkFDb0RBLFVBRHBEOztBQUdSOztBQUNBLGdCQUFJQyxZQUFZLEVBQWhCO0FBQ0EsaUJBQUssSUFBSUMsS0FBVCxJQUFrQlAsVUFBVSxFQUE1QjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFnQyx5Q0FBaUJBLE9BQU9PLEtBQVAsQ0FBakI7QUFBQSw0QkFBU0MsSUFBVDtBQUFnQ0Ysa0NBQVVFLElBQVYsSUFBa0JELEtBQWxCO0FBQWhDO0FBQWhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUxRLENBT1I7QUFDQSxnQkFBSUUsWUFBWSxFQUFoQjtBQUNBLGlCQUFLLElBQUlDLEdBQVQsSUFBZ0JULFdBQVcsRUFBM0I7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFDSSwwQ0FBaUJBLFFBQVFTLEdBQVIsQ0FBakI7QUFBQSw0QkFBU0YsS0FBVDs7QUFDSUMsa0NBQVVELEtBQVYsSUFBa0JDLFVBQVVELEtBQVYsRUFBZ0JHLElBQWhCLENBQXFCRCxHQUFyQixDQUFsQixHQUE4Q0QsVUFBVUQsS0FBVixJQUFrQixDQUFDRSxHQUFELENBQWhFO0FBREo7QUFESjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFJQSxPQUFPLGdDQUFTWixFQUFULEVBQWVNLFFBQWYsRUFBeUJMLE1BQU1hLEdBQU4sQ0FBVSxVQUFDSixJQUFEO0FBQUEsdUJBQ3RDLGlDQUFTVixLQUFLVSxLQUFLSyxPQUFMLENBQWEsS0FBYixFQUFvQixHQUFwQixDQUFkLEdBQTBDLDZCQUFnQjtBQUNsREMsMkJBQU87QUFDSCxzQ0FBYyxLQURYO0FBRUgsc0NBQWMsUUFGWDtBQUdILDRDQUFvQlIsVUFBVUUsSUFBVjtBQUhqQixxQkFEMkM7QUFNbEQsNkJBQVNDLFVBQVVELElBQVYsQ0FOeUM7QUFPbERPLDZCQUFTO0FBQUEsK0JBQU0sQ0FBQ2IsWUFBWWMsUUFBYixFQUF1QlIsSUFBdkIsQ0FBTjtBQUFBO0FBUHlDLGlCQUFoQjs7QUFVdEM7QUFDQUwsd0JBQVE7QUFDSmMsaUNBQWEsdUJBQVc7QUFBQ0MsMEJBQUUsSUFBRixFQUFRQyxPQUFSLENBQWdCLFFBQWhCO0FBQTBCLHFCQUQvQztBQUVKQyxnQ0FBWSxzQkFBVztBQUFDRiwwQkFBRSxJQUFGLEVBQVFDLE9BQVIsQ0FBZ0IsUUFBaEI7QUFBMEIscUJBRjlDO0FBR0osc0NBQWtCLE1BSGQ7QUFJSixvQ0FBZ0JoQixNQUFNSyxJQUFOLENBSlo7QUFLSixpQ0FBYSxNQUxUO0FBTUosMkNBQXVCQSxJQU5uQjtBQU9KLHNDQUFrQixNQVBkO0FBUUosbUNBQWUsU0FSWDtBQVNKLG9DQUFnQjtBQVRaLGlCQUFSLEdBVUksRUFyQmtDOztBQXVCdEM7QUFDQUgsMEJBeEJzQyxDQUExQyxFQXdCaUJHLElBeEJqQixDQURzQztBQUFBLGFBQVYsQ0FBekIsQ0FBUDtBQTBCSDs7Ozs7O2tCQXhDZ0JiLFMiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSBmcm9tICdtaXRocmlsJ1xuaW1wb3J0IHttZXJnZUF0dHJpYnV0ZXMsIHZhckNvbG9yfSBmcm9tICcuLi9jb21tb24nXG5cbi8vIGBgYFxuLy8gbShQYW5lbExpc3QsIHtcbi8vICAgICAgICAgaWQ6ICdpZCBvZiBjb250YWluZXInLFxuLy8gICAgICAgICBpdGVtczogWydDbGlja2FibGUgMScsICdDbGlja2FibGUgMicsICdDbGlja2FibGUgMyddLFxuLy9cbi8vICAgICAgICAgY29sb3JzOiB7IGFwcC5zZWxWYXJDb2xvcjogWydDbGlja2FibGUgMSddIH0sIChvcHRpb25hbClcbi8vICAgICAgICAgY2xhc3NlczogeyAnaXRlbS1saW5lb3V0JzogWydDbGlja2FibGUgMScsICdDbGlja2FibGUgMyddIH0sIChvcHRpb25hbClcbi8vXG4vLyAgICAgICAgIGNhbGxiYWNrOiAoaXRlbSkgPT4gY29uc29sZS5sb2coaXRlbSArIFwiIGNsaWNrZWQuXCIpLFxuLy8gICAgICAgICBwb3B1cDogKGl0ZW0pID0+IHsgcmV0dXJuICdQb3B1cENvbnRlbnQnfSwgKG9wdGlvbmFsKVxuLy9cbi8vICAgICAgICAgYXR0cnNBbGw6IHsuLi4gYWRkaXRpb25hbCBhdHRyaWJ1dGVzIGZvciB0aGUgZW50aXJlIGxpc3R9LFxuLy8gICAgICAgICBhdHRyc0l0ZW1zOiB7Li4uIGFkZGl0aW9uYWwgYXR0cmlidXRlcyBmb3IgZWFjaCBpdGVtfVxuLy8gICAgIH0pXG4vLyBgYGBcblxuLy8gY29sb3JzIGlzIGFuIG9iamVjdCB0aGF0IG1hcHMgYSBjb2xvciB0byBhIGxpc3Qgb3Igc2V0IG9mIGl0ZW1zIHdpdGggdGhhdCBjb2xvci4gT3JkZXIgY29sb3JzIGJ5IGluY3JlYXNpbmcgcHJpb3JpdHkuXG4vLyBjbGFzc2VzIGFjdHMgc2ltaWxhcmx5LCBidXQgb25lIGl0ZW0gbWF5IGhhdmUgc2V2ZXJhbCBjbGFzc2VzLiBTdGFuZGFyZCBjc3MgcnVsZXMgYXBwbHkgZm9yIHN0YWNraW5nIGNzcyBjbGFzc2VzLlxuLy8gcG9wdXAgcmV0dXJucyB0aGUgcG9wdXAgY29udGVudHMgd2hlbiBjYWxsZWQgd2l0aCB0aGUgaXRlbS4gSWYgbm90IHNldCwgdGhlbiBwb3B1cCBpcyBub3QgZHJhd25cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFuZWxMaXN0IHtcbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7aWQsIGl0ZW1zLCBjb2xvcnMsIGNsYXNzZXMsIGNhbGxiYWNrLCBwb3B1cCwgYXR0cnNBbGwsIGF0dHJzSXRlbXN9ID0gdm5vZGUuYXR0cnM7XG5cbiAgICAgICAgLy8gc2V0IGFsdGVybmF0ZSBiYWNrZ3JvdW5kLWNvbG9yIGlmIGRlZmluZWRcbiAgICAgICAgbGV0IHZpZXdDb2xvciA9IHt9O1xuICAgICAgICBmb3IgKGxldCBjb2xvciBpbiBjb2xvcnMgfHwgW10pIGZvciAobGV0IGl0ZW0gb2YgY29sb3JzW2NvbG9yXSkgdmlld0NvbG9yW2l0ZW1dID0gY29sb3I7XG5cbiAgICAgICAgLy8gaW52ZXJ0IHRoZSBjbGFzcyAtPiBpdGVtIG9iamVjdFxuICAgICAgICBsZXQgdmlld0NsYXNzID0ge307XG4gICAgICAgIGZvciAobGV0IGNzcyBpbiBjbGFzc2VzIHx8IFtdKVxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBjbGFzc2VzW2Nzc10pXG4gICAgICAgICAgICAgICAgdmlld0NsYXNzW2l0ZW1dID8gdmlld0NsYXNzW2l0ZW1dLnB1c2goY3NzKSA6IHZpZXdDbGFzc1tpdGVtXSA9IFtjc3NdO1xuXG4gICAgICAgIHJldHVybiBtKGBkaXYjJHtpZH1gLCBhdHRyc0FsbCwgaXRlbXMubWFwKChpdGVtKSA9PlxuICAgICAgICAgICAgbShgZGl2IyR7aWQgKyBpdGVtLnJlcGxhY2UoL1xcVy9nLCAnXycpfWAsIG1lcmdlQXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFyZ2luLXRvcCc6ICc1cHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQtYWxpZ24nOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiB2aWV3Q29sb3JbaXRlbV0gfHwgdmFyQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogdmlld0NsYXNzW2l0ZW1dLFxuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiAoY2FsbGJhY2sgfHwgRnVuY3Rpb24pKGl0ZW0pXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIC8vIGFkZCBwb3B1cCBpZiBkZWZpbmVkXG4gICAgICAgICAgICAgICAgcG9wdXAgPyB7XG4gICAgICAgICAgICAgICAgICAgIG9ubW91c2VvdmVyOiBmdW5jdGlvbigpIHskKHRoaXMpLnBvcG92ZXIoJ3RvZ2dsZScpfSxcbiAgICAgICAgICAgICAgICAgICAgb25tb3VzZW91dDogZnVuY3Rpb24oKSB7JCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKX0sXG4gICAgICAgICAgICAgICAgICAgICdkYXRhLWNvbnRhaW5lcic6ICdib2R5JyxcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtY29udGVudCc6IHBvcHVwKGl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1odG1sJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1vcmlnaW5hbC10aXRsZSc6IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICdkYXRhLXBsYWNlbWVudCc6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdG9nZ2xlJzogJ3BvcG92ZXInLFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS10cmlnZ2VyJzogJ2hvdmVyJ1xuICAgICAgICAgICAgICAgIH0gOiB7fSxcblxuICAgICAgICAgICAgICAgIC8vIGFkZCBhbnkgYWRkaXRpb25hbCBhdHRyaWJ1dGVzIGlmIHBhc3NlZFxuICAgICAgICAgICAgICAgIGF0dHJzSXRlbXMpLCBpdGVtKSkpO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9jb21tb24vYXBwL3ZpZXdzL1BhbmVsTGlzdC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Interface specification\n//\n// ```\n// m(Table, {\n//     id: id (String),\n//     headers: ['col1Header', 'col2Header'],\n//     data: [['row1col1', 'row1col2'], ['row2col1', 'row2col2']] or function\n//     activeRow: 'row1col1', (optional)\n//     onclick: (uid, colID) => console.log(uid + \" row was clicked, column number \" + colID + \" was clicked\"), (optional)\n//     showUID: true | false, (optional)\n//\n//     attrsAll: { apply attributes to all divs },(optional)\n//     attrsRows: { apply attributes to each row }, (optional)\n//     attrsCells: { apply attributes to each cell } (optional)\n//     tableTags: [ m('colgroup', ...), m('caption', ...), m('tfoot', ...)]\n//     })\n// ```\n\n// The UID for the table is the key for identifying a certain row.\n// The UID is the first column, and its value is passed in the onclick callback.\n// The first column may be hidden via showUID: false. This does not remove the first header\n\n// Table tags allows passing colgroups, captions, etc. into the table manually. Can be a single element or list\n\nvar Table = function () {\n    function Table() {\n        _classCallCheck(this, Table);\n    }\n\n    _createClass(Table, [{\n        key: 'view',\n        value: function view(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                id = _vnode$attrs.id,\n                data = _vnode$attrs.data,\n                headers = _vnode$attrs.headers,\n                activeRow = _vnode$attrs.activeRow,\n                _onclick = _vnode$attrs.onclick,\n                showUID = _vnode$attrs.showUID;\n            // Interface custom attributes\n\n            var _vnode$attrs2 = vnode.attrs,\n                attrsAll = _vnode$attrs2.attrsAll,\n                attrsRows = _vnode$attrs2.attrsRows,\n                attrsCells = _vnode$attrs2.attrsCells,\n                tableTags = _vnode$attrs2.tableTags;\n\n\n            showUID = showUID !== false; // Default is 'true'\n            if (typeof data === 'function') data = data();\n\n            return (0, _mithril2.default)('table.table#' + id, (0, _common.mergeAttributes)({ style: { width: '100%' } }, attrsAll), [tableTags, headers ? (0, _mithril2.default)('tr', { style: { width: '100%', background: _common.menuColor } }, [].concat(_toConsumableArray((showUID ? headers : headers.slice(1)).map(function (header) {\n                return (0, _mithril2.default)('th', header);\n            })))) : undefined].concat(_toConsumableArray(data.map(function (row, i) {\n                return (0, _mithril2.default)('tr', (0, _common.mergeAttributes)(i % 2 === 1 ? { style: { 'background': '#fcfcfc' } } : {}, row[0] === activeRow ? { style: { 'background': _common.selVarColor } } : {}, attrsRows), row.filter(function (item, j) {\n                    return j !== 0 || showUID;\n                }).map(function (item, j) {\n                    return (0, _mithril2.default)('td', (0, _common.mergeAttributes)(_onclick ? { onclick: function onclick() {\n                            return _onclick(row[0], j);\n                        } } : {}, attrsCells), item);\n                }));\n            }))));\n        }\n    }]);\n\n    return Table;\n}();\n\nexports.default = Table;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9UYWJsZS5qcz9hYTQ1Il0sIm5hbWVzIjpbIlRhYmxlIiwidm5vZGUiLCJhdHRycyIsImlkIiwiZGF0YSIsImhlYWRlcnMiLCJhY3RpdmVSb3ciLCJvbmNsaWNrIiwic2hvd1VJRCIsImF0dHJzQWxsIiwiYXR0cnNSb3dzIiwiYXR0cnNDZWxscyIsInRhYmxlVGFncyIsInN0eWxlIiwid2lkdGgiLCJiYWNrZ3JvdW5kIiwic2xpY2UiLCJtYXAiLCJoZWFkZXIiLCJ1bmRlZmluZWQiLCJyb3ciLCJpIiwiZmlsdGVyIiwiaXRlbSIsImoiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7SUFFcUJBLEs7Ozs7Ozs7NkJBQ1pDLEssRUFBTztBQUFBLCtCQUMrQ0EsTUFBTUMsS0FEckQ7QUFBQSxnQkFDSEMsRUFERyxnQkFDSEEsRUFERztBQUFBLGdCQUNDQyxJQURELGdCQUNDQSxJQUREO0FBQUEsZ0JBQ09DLE9BRFAsZ0JBQ09BLE9BRFA7QUFBQSxnQkFDZ0JDLFNBRGhCLGdCQUNnQkEsU0FEaEI7QUFBQSxnQkFDMkJDLFFBRDNCLGdCQUMyQkEsT0FEM0I7QUFBQSxnQkFDb0NDLE9BRHBDLGdCQUNvQ0EsT0FEcEM7QUFFUjs7QUFGUSxnQ0FHMkNQLE1BQU1DLEtBSGpEO0FBQUEsZ0JBR0hPLFFBSEcsaUJBR0hBLFFBSEc7QUFBQSxnQkFHT0MsU0FIUCxpQkFHT0EsU0FIUDtBQUFBLGdCQUdrQkMsVUFIbEIsaUJBR2tCQSxVQUhsQjtBQUFBLGdCQUc4QkMsU0FIOUIsaUJBRzhCQSxTQUg5Qjs7O0FBS1JKLHNCQUFVQSxZQUFZLEtBQXRCLENBTFEsQ0FLcUI7QUFDN0IsZ0JBQUksT0FBT0osSUFBUCxLQUFnQixVQUFwQixFQUFnQ0EsT0FBT0EsTUFBUDs7QUFFaEMsbUJBQU8sd0NBQWlCRCxFQUFqQixFQUF1Qiw2QkFBZ0IsRUFBQ1UsT0FBTyxFQUFDQyxPQUFPLE1BQVIsRUFBUixFQUFoQixFQUEwQ0wsUUFBMUMsQ0FBdkIsR0FDSEcsU0FERyxFQUVIUCxVQUFVLHVCQUFFLElBQUYsRUFBUSxFQUFDUSxPQUFPLEVBQUNDLE9BQU8sTUFBUixFQUFnQkMsNkJBQWhCLEVBQVIsRUFBUiwrQkFDSCxDQUFDUCxVQUFVSCxPQUFWLEdBQW9CQSxRQUFRVyxLQUFSLENBQWMsQ0FBZCxDQUFyQixFQUF1Q0MsR0FBdkMsQ0FBMkMsVUFBQ0MsTUFBRDtBQUFBLHVCQUFZLHVCQUFFLElBQUYsRUFBUUEsTUFBUixDQUFaO0FBQUEsYUFBM0MsQ0FERyxHQUFWLEdBRUtDLFNBSkYsNEJBTUFmLEtBQUthLEdBQUwsQ0FBUyxVQUFDRyxHQUFELEVBQU1DLENBQU47QUFBQSx1QkFBWSx1QkFBRSxJQUFGLEVBQVEsNkJBQzVCQSxJQUFJLENBQUosS0FBVSxDQUFWLEdBQWMsRUFBQ1IsT0FBTyxFQUFDLGNBQWMsU0FBZixFQUFSLEVBQWQsR0FBbUQsRUFEdkIsRUFFNUJPLElBQUksQ0FBSixNQUFXZCxTQUFYLEdBQXVCLEVBQUNPLE9BQU8sRUFBQyxpQ0FBRCxFQUFSLEVBQXZCLEdBQThELEVBRmxDLEVBRzVCSCxTQUg0QixDQUFSLEVBSXBCVSxJQUFJRSxNQUFKLENBQVcsVUFBQ0MsSUFBRCxFQUFPQyxDQUFQO0FBQUEsMkJBQWFBLE1BQU0sQ0FBTixJQUFXaEIsT0FBeEI7QUFBQSxpQkFBWCxFQUE0Q1MsR0FBNUMsQ0FBZ0QsVUFBQ00sSUFBRCxFQUFPQyxDQUFQO0FBQUEsMkJBQWEsdUJBQUUsSUFBRixFQUN6RCw2QkFBZ0JqQixXQUFVLEVBQUNBLFNBQVM7QUFBQSxtQ0FBTUEsU0FBUWEsSUFBSSxDQUFKLENBQVIsRUFBZ0JJLENBQWhCLENBQU47QUFBQSx5QkFBVixFQUFWLEdBQWdELEVBQWhFLEVBQW9FYixVQUFwRSxDQUR5RCxFQUN3QlksSUFEeEIsQ0FBYjtBQUFBLGlCQUFoRCxDQUpvQixDQUFaO0FBQUEsYUFBVCxDQU5BLEdBQVA7QUFlSDs7Ozs7O2tCQXhCZ0J2QixLIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCB7c2VsVmFyQ29sb3IsIG1lcmdlQXR0cmlidXRlcywgbWVudUNvbG9yfSBmcm9tIFwiLi4vY29tbW9uXCI7XG5cbi8vIEludGVyZmFjZSBzcGVjaWZpY2F0aW9uXG4vL1xuLy8gYGBgXG4vLyBtKFRhYmxlLCB7XG4vLyAgICAgaWQ6IGlkIChTdHJpbmcpLFxuLy8gICAgIGhlYWRlcnM6IFsnY29sMUhlYWRlcicsICdjb2wySGVhZGVyJ10sXG4vLyAgICAgZGF0YTogW1sncm93MWNvbDEnLCAncm93MWNvbDInXSwgWydyb3cyY29sMScsICdyb3cyY29sMiddXSBvciBmdW5jdGlvblxuLy8gICAgIGFjdGl2ZVJvdzogJ3JvdzFjb2wxJywgKG9wdGlvbmFsKVxuLy8gICAgIG9uY2xpY2s6ICh1aWQsIGNvbElEKSA9PiBjb25zb2xlLmxvZyh1aWQgKyBcIiByb3cgd2FzIGNsaWNrZWQsIGNvbHVtbiBudW1iZXIgXCIgKyBjb2xJRCArIFwiIHdhcyBjbGlja2VkXCIpLCAob3B0aW9uYWwpXG4vLyAgICAgc2hvd1VJRDogdHJ1ZSB8IGZhbHNlLCAob3B0aW9uYWwpXG4vL1xuLy8gICAgIGF0dHJzQWxsOiB7IGFwcGx5IGF0dHJpYnV0ZXMgdG8gYWxsIGRpdnMgfSwob3B0aW9uYWwpXG4vLyAgICAgYXR0cnNSb3dzOiB7IGFwcGx5IGF0dHJpYnV0ZXMgdG8gZWFjaCByb3cgfSwgKG9wdGlvbmFsKVxuLy8gICAgIGF0dHJzQ2VsbHM6IHsgYXBwbHkgYXR0cmlidXRlcyB0byBlYWNoIGNlbGwgfSAob3B0aW9uYWwpXG4vLyAgICAgdGFibGVUYWdzOiBbIG0oJ2NvbGdyb3VwJywgLi4uKSwgbSgnY2FwdGlvbicsIC4uLiksIG0oJ3Rmb290JywgLi4uKV1cbi8vICAgICB9KVxuLy8gYGBgXG5cbi8vIFRoZSBVSUQgZm9yIHRoZSB0YWJsZSBpcyB0aGUga2V5IGZvciBpZGVudGlmeWluZyBhIGNlcnRhaW4gcm93LlxuLy8gVGhlIFVJRCBpcyB0aGUgZmlyc3QgY29sdW1uLCBhbmQgaXRzIHZhbHVlIGlzIHBhc3NlZCBpbiB0aGUgb25jbGljayBjYWxsYmFjay5cbi8vIFRoZSBmaXJzdCBjb2x1bW4gbWF5IGJlIGhpZGRlbiB2aWEgc2hvd1VJRDogZmFsc2UuIFRoaXMgZG9lcyBub3QgcmVtb3ZlIHRoZSBmaXJzdCBoZWFkZXJcblxuLy8gVGFibGUgdGFncyBhbGxvd3MgcGFzc2luZyBjb2xncm91cHMsIGNhcHRpb25zLCBldGMuIGludG8gdGhlIHRhYmxlIG1hbnVhbGx5LiBDYW4gYmUgYSBzaW5nbGUgZWxlbWVudCBvciBsaXN0XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlIHtcbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7aWQsIGRhdGEsIGhlYWRlcnMsIGFjdGl2ZVJvdywgb25jbGljaywgc2hvd1VJRH0gPSB2bm9kZS5hdHRycztcbiAgICAgICAgLy8gSW50ZXJmYWNlIGN1c3RvbSBhdHRyaWJ1dGVzXG4gICAgICAgIGxldCB7YXR0cnNBbGwsIGF0dHJzUm93cywgYXR0cnNDZWxscywgdGFibGVUYWdzfSA9IHZub2RlLmF0dHJzO1xuXG4gICAgICAgIHNob3dVSUQgPSBzaG93VUlEICE9PSBmYWxzZTsgLy8gRGVmYXVsdCBpcyAndHJ1ZSdcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSBkYXRhID0gZGF0YSgpO1xuXG4gICAgICAgIHJldHVybiBtKGB0YWJsZS50YWJsZSMke2lkfWAsIG1lcmdlQXR0cmlidXRlcyh7c3R5bGU6IHt3aWR0aDogJzEwMCUnfX0sIGF0dHJzQWxsKSwgW1xuICAgICAgICAgICAgdGFibGVUYWdzLFxuICAgICAgICAgICAgaGVhZGVycyA/IG0oJ3RyJywge3N0eWxlOiB7d2lkdGg6ICcxMDAlJywgYmFja2dyb3VuZDogbWVudUNvbG9yfX0sIFtcbiAgICAgICAgICAgICAgICAuLi4oc2hvd1VJRCA/IGhlYWRlcnMgOiBoZWFkZXJzLnNsaWNlKDEpKS5tYXAoKGhlYWRlcikgPT4gbSgndGgnLCBoZWFkZXIpKVxuICAgICAgICAgICAgXSkgOiB1bmRlZmluZWQsXG5cbiAgICAgICAgICAgIC4uLmRhdGEubWFwKChyb3csIGkpID0+IG0oJ3RyJywgbWVyZ2VBdHRyaWJ1dGVzKFxuICAgICAgICAgICAgICAgIGkgJSAyID09PSAxID8ge3N0eWxlOiB7J2JhY2tncm91bmQnOiAnI2ZjZmNmYyd9fSA6IHt9LFxuICAgICAgICAgICAgICAgIHJvd1swXSA9PT0gYWN0aXZlUm93ID8ge3N0eWxlOiB7J2JhY2tncm91bmQnOiBzZWxWYXJDb2xvcn19IDoge30sXG4gICAgICAgICAgICAgICAgYXR0cnNSb3dzKSxcbiAgICAgICAgICAgICAgICByb3cuZmlsdGVyKChpdGVtLCBqKSA9PiBqICE9PSAwIHx8IHNob3dVSUQpLm1hcCgoaXRlbSwgaikgPT4gbSgndGQnLFxuICAgICAgICAgICAgICAgICAgICBtZXJnZUF0dHJpYnV0ZXMob25jbGljayA/IHtvbmNsaWNrOiAoKSA9PiBvbmNsaWNrKHJvd1swXSwgail9IDoge30sIGF0dHJzQ2VsbHMpLCBpdGVtKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXVxuICAgICAgICApO1xuICAgIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9UYWJsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// ```\n// m(TextField, {\n//     id: string,\n//     cancellable: Bool NOT IMPLEMENTED\n//     *: any attribute may be passed\n//     })\n// ```\n\n// Can pass attributes directly, for example 'placeholder' or 'oninput'\n\nvar TextField = function () {\n    function TextField() {\n        _classCallCheck(this, TextField);\n    }\n\n    _createClass(TextField, [{\n        key: 'view',\n        value: function view(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                id = _vnode$attrs.id,\n                cancellable = _vnode$attrs.cancellable;\n\n\n            return (0, _mithril2.default)('input#' + id + '.form-control', (0, _common.mergeAttributes)({\n                style: { 'margin': '5px 0', 'width': '100%' }\n            }, vnode.attrs, { oninput: _mithril2.default.withAttr('value', vnode.attrs.oninput) }));\n        }\n    }]);\n\n    return TextField;\n}();\n\nexports.default = TextField;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9UZXh0RmllbGQuanM/OWFkMSJdLCJuYW1lcyI6WyJUZXh0RmllbGQiLCJ2bm9kZSIsImF0dHJzIiwiaWQiLCJjYW5jZWxsYWJsZSIsInN0eWxlIiwib25pbnB1dCIsIndpdGhBdHRyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztJQUVxQkEsUzs7Ozs7Ozs2QkFDWkMsSyxFQUFPO0FBQUEsK0JBQ2dCQSxNQUFNQyxLQUR0QjtBQUFBLGdCQUNIQyxFQURHLGdCQUNIQSxFQURHO0FBQUEsZ0JBQ0NDLFdBREQsZ0JBQ0NBLFdBREQ7OztBQUdSLG1CQUFPLGtDQUFXRCxFQUFYLG9CQUE4Qiw2QkFBZ0I7QUFDN0NFLHVCQUFPLEVBQUMsVUFBVSxPQUFYLEVBQW9CLFNBQVMsTUFBN0I7QUFEc0MsYUFBaEIsRUFHakNKLE1BQU1DLEtBSDJCLEVBSWpDLEVBQUNJLFNBQVMsa0JBQUVDLFFBQUYsQ0FBVyxPQUFYLEVBQW9CTixNQUFNQyxLQUFOLENBQVlJLE9BQWhDLENBQVYsRUFKaUMsQ0FBOUIsQ0FBUDtBQU1IOzs7Ozs7a0JBVmdCTixTIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCdcbmltcG9ydCB7bWVyZ2VBdHRyaWJ1dGVzfSBmcm9tIFwiLi4vY29tbW9uXCI7XG5cbi8vIGBgYFxuLy8gbShUZXh0RmllbGQsIHtcbi8vICAgICBpZDogc3RyaW5nLFxuLy8gICAgIGNhbmNlbGxhYmxlOiBCb29sIE5PVCBJTVBMRU1FTlRFRFxuLy8gICAgICo6IGFueSBhdHRyaWJ1dGUgbWF5IGJlIHBhc3NlZFxuLy8gICAgIH0pXG4vLyBgYGBcblxuLy8gQ2FuIHBhc3MgYXR0cmlidXRlcyBkaXJlY3RseSwgZm9yIGV4YW1wbGUgJ3BsYWNlaG9sZGVyJyBvciAnb25pbnB1dCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dEZpZWxkIHtcbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7aWQsIGNhbmNlbGxhYmxlfSA9IHZub2RlLmF0dHJzO1xuXG4gICAgICAgIHJldHVybiBtKGBpbnB1dCMke2lkfS5mb3JtLWNvbnRyb2xgLCBtZXJnZUF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7J21hcmdpbic6ICc1cHggMCcsICd3aWR0aCc6ICcxMDAlJ31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2bm9kZS5hdHRycyxcbiAgICAgICAgICAgIHtvbmlucHV0OiBtLndpdGhBdHRyKCd2YWx1ZScsIHZub2RlLmF0dHJzLm9uaW5wdXQpfSlcbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9UZXh0RmllbGQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY3NzL2FwcC5jc3M/MmY3ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvY3NzL2FwcC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvcGtncy9MYWRkYS9kaXN0L2xhZGRhLXRoZW1lbGVzcy5taW4uY3NzP2E2ZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXNzZXRzL3BrZ3MvTGFkZGEvZGlzdC9sYWRkYS10aGVtZWxlc3MubWluLmNzc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvcGtncy9ib290c3RyYXAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzP2ZiNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXNzZXRzL3BrZ3MvYm9vdHN0cmFwL2Nzcy9ib290c3RyYXAtdGhlbWUubWluLmNzc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2hvcHNjb3RjaC9kaXN0L2Nzcy9ob3BzY290Y2guY3NzPzYyZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9ob3BzY290Y2gvZGlzdC9jc3MvaG9wc2NvdGNoLmNzc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(21);\n\n__webpack_require__(23);\n\n__webpack_require__(22);\n\n__webpack_require__(24);\n\nvar _hopscotch = __webpack_require__(8);\n\nvar _hopscotch2 = _interopRequireDefault(_hopscotch);\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _explore = __webpack_require__(10);\n\nvar exp = _interopRequireWildcard(_explore);\n\nvar _layout = __webpack_require__(11);\n\nvar layout = _interopRequireWildcard(_layout);\n\nvar _results = __webpack_require__(12);\n\nvar results = _interopRequireWildcard(_results);\n\nvar _PanelButton = __webpack_require__(5);\n\nvar _PanelButton2 = _interopRequireDefault(_PanelButton);\n\nvar _PanelList = __webpack_require__(6);\n\nvar _PanelList2 = _interopRequireDefault(_PanelList);\n\nvar _Search = __webpack_require__(4);\n\nvar _Search2 = _interopRequireDefault(_Search);\n\nvar _Subpanel = __webpack_require__(13);\n\nvar _Subpanel2 = _interopRequireDefault(_Subpanel);\n\nvar _Table = __webpack_require__(19);\n\nvar _Table2 = _interopRequireDefault(_Table);\n\nvar _common = __webpack_require__(1);\n\nvar common = _interopRequireWildcard(_common);\n\nvar _Panel = __webpack_require__(17);\n\nvar _Panel2 = _interopRequireDefault(_Panel);\n\nvar _MenuTabbed = __webpack_require__(16);\n\nvar _MenuTabbed2 = _interopRequireDefault(_MenuTabbed);\n\nvar _ButtonRadio = __webpack_require__(7);\n\nvar _ButtonRadio2 = _interopRequireDefault(_ButtonRadio);\n\nvar _Footer = __webpack_require__(14);\n\nvar _Footer2 = _interopRequireDefault(_Footer);\n\nvar _Header = __webpack_require__(15);\n\nvar _Header2 = _interopRequireDefault(_Header);\n\nvar _PanelList3 = __webpack_require__(18);\n\nvar _PanelList4 = _interopRequireDefault(_PanelList3);\n\nvar _TextField = __webpack_require__(20);\n\nvar _TextField2 = _interopRequireDefault(_TextField);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar state = {\n    pipelines: [],\n    get_pipelines: async function get_pipelines() {\n        this.pipelines = await app.listpipelines();\n        _mithril2.default.redraw();\n    }\n};\n\nfunction setBackgroundColor(color) {\n    return function () {\n        this.style['background-color'] = color;\n    };\n}\n\nfunction leftpanel(mode) {\n    var _colors;\n\n    if (mode === 'results') {\n        return results.leftpanel(Object.keys(app.allPipelineInfo));\n    }\n\n    var discoveryAllCheck = (0, _mithril2.default)('input#discoveryAllCheck[type=checkbox]', {\n        onclick: _mithril2.default.withAttr(\"checked\", function (checked) {\n            return app.setCheckedDiscoveryProblem(checked);\n        }),\n        checked: app.probtable.length === app.checkedDiscoveryProblems.size\n    });\n\n    var discoveryTableData = app.probtable.map(function (problem) {\n        return [].concat(_toConsumableArray(problem), [(0, _mithril2.default)('input[type=checkbox]', {\n            onclick: _mithril2.default.withAttr(\"checked\", function (checked) {\n                return app.setCheckedDiscoveryProblem(checked, problem[0]);\n            }),\n            checked: app.checkedDiscoveryProblems.has(problem[0])\n        })]);\n    });\n\n    return (0, _mithril2.default)(_Panel2.default, {\n        side: 'left',\n        label: 'Data Selection',\n        hover: true,\n        width: app.modelLeftPanelWidths[app.leftTab],\n        attrsAll: { style: { 'z-index': 101 } },\n        contents: (0, _mithril2.default)(_MenuTabbed2.default, {\n            id: 'leftpanelMenu',\n            attrsAll: { style: { height: 'calc(100% - 39px)' } },\n            currentTab: app.leftTab,\n            callback: app.setLeftTab,\n            sections: [{\n                value: 'Variables',\n                title: 'Click variable name to add or remove the variable pebble from the modeling space.',\n                contents: [(0, _mithril2.default)(_TextField2.default, {\n                    id: 'searchVar',\n                    placeholder: 'Search variables and labels',\n                    oninput: app.searchVariables\n                }), (0, _mithril2.default)(_PanelList4.default, {\n                    id: 'varList',\n                    items: app.valueKey,\n                    colors: (_colors = {}, _defineProperty(_colors, app.hexToRgba(common.selVarColor), app.nodes.map(function (n) {\n                        return n.name;\n                    })), _defineProperty(_colors, app.hexToRgba(common.nomColor), app.zparams.znom), _defineProperty(_colors, app.hexToRgba(common.dvColor), app.zparams.zdv), _colors),\n                    classes: { 'item-bordered': app.matchedVariables },\n                    callback: app.clickVar,\n                    popup: function popup(variable) {\n                        return app.popoverContent(app.findNodeIndex(variable, true));\n                    },\n                    attrsItems: { 'data-placement': 'right', 'data-original-title': 'Summary Statistics' }\n                })]\n            }, {\n                value: 'Discovery',\n                contents: [(0, _mithril2.default)(_Table2.default, {\n                    id: 'discoveryTable',\n                    headers: ['Hidden_UID', 'Target', 'Predictors', 'Task', 'Metric', discoveryAllCheck],\n                    data: discoveryTableData,\n                    activeRow: app.selectedProblem,\n                    onclick: app.setSelectedProblem,\n                    showUID: false,\n                    attrsAll: { style: { height: '80%', overflow: 'auto', display: 'block', 'margin-right': '16px', 'margin-bottom': 0, 'max-width': window.innerWidth - 90 + 'px' } }\n                }), (0, _mithril2.default)('textarea#discoveryInput[style=display:block; float: left; width: 100%; height:calc(20% - 35px); overflow: auto; background-color: white]', {\n                    value: app.disco[app.selectedProblem] === undefined ? '' : app.disco[app.selectedProblem].description\n                }), (0, _mithril2.default)(_PanelButton2.default, { id: 'btnSave', onclick: function onclick(_) {\n                        return app.saveDisc('btnSave');\n                    }, title: 'Saves your revised problem description.' }, 'Save Desc.'), (0, _mithril2.default)(_PanelButton2.default, { id: 'btnSubmitDisc', classes: 'btn-success', style: 'float: right', onclick: function onclick(_) {\n                        return app.submitDiscProb();\n                    }, title: 'Submit all checked discovered problems.' }, 'Submit Disc. Probs.')]\n            }, {\n                value: 'Summary',\n                title: 'Select a variable from within the visualization in the center panel to view its summary statistics.',\n                contents: [(0, _mithril2.default)('center', (0, _mithril2.default)('b', app.summary.name), (0, _mithril2.default)('br'), (0, _mithril2.default)('i', app.summary.labl)), (0, _mithril2.default)('table', app.summary.data.map(function (tr) {\n                    return (0, _mithril2.default)('tr', tr.map(function (td) {\n                        return (0, _mithril2.default)('td', {\n                            onmouseover: setBackgroundColor('aliceblue'),\n                            onmouseout: setBackgroundColor('f9f9f9')\n                        }, td);\n                    }));\n                }))],\n                display: 'none'\n            }]\n        })\n    });\n}\n\nvar righttab = function righttab(id, task, title, probDesc) {\n    return (0, _mithril2.default)(_PanelList4.default, {\n        id: id,\n        items: Object.keys(task || {}),\n        colors: _defineProperty({}, app.hexToRgba(common.selVarColor), [app.d3mProblemDescription[probDesc]]),\n        classes: {\n            'item-lineout': Object.keys(task || {}).filter(function (item) {\n                return app.locktoggle && item !== app.d3mProblemDescription[probDesc];\n            })\n        },\n        callback: function callback(value) {\n            return app.setD3mProblemDescription(probDesc, value);\n        },\n        popup: function popup(v) {\n            return task[v][1];\n        },\n        attrsItems: { 'data-placement': 'top', 'data-original-title': title + ' Description' }\n    });\n};\n\nfunction rightpanel(mode) {\n    var thumb = function thumb(idx, id, title) {\n        return (0, _mithril2.default)(\"th\", (0, _mithril2.default)(\"figure\", { style: { float: \"left\" } }, (0, _mithril2.default)('img#' + id + '_img[alt=' + id + '][src=/static/images/thumb' + idx + '.png]', { style: { width: \"75%\", height: \"75%\", border: \"1px solid #ddd\", \"border-radius\": \"3px\", padding: \"5px\", margin: \"3%\", cursor: \"pointer\" } }), (0, _mithril2.default)(\"figcaption\", { style: { \"text-align\": \"center\" } }, title)));\n    };\n    /*let unique_link_names = () => {\n        let names = [];\n        for (let link of app.links) {\n            if (!names.includes(link.source.name)) {\n                names.push(link.source.name);\n            }\n            if (!names.includes(link.target.name)) {\n                names.push(link.target.name);\n            }\n        }\n        return names;\n    };*/\n\n    if (mode === 'results') return [];\n    if (mode === 'explore') {\n        // let link_names = unique_link_names();\n        var sectionsExplore = [{\n            value: 'Univariate',\n            contents: [(0, _mithril2.default)('#decision_prompt', 'Right click pebble variables to draw links between them. Select a variable in the list of linked pebbles below to draw a decision tree for that variable.'), (0, _mithril2.default)('#decisionTree[style=width: 100%; height:80%; overflow-y:scroll; float: left; white-space: nowrap; margin-top: 2px;]'), (0, _mithril2.default)(_PanelList4.default, {\n                id: 'varListExplore',\n                items: app.nodes.map(function (n) {\n                    return n.name;\n                }),\n                colors: _defineProperty({}, app.hexToRgba(common.selVarColor), [exp.exploreVar]),\n                callback: function callback(variable) {\n                    return exp.callTreeApp(variable, app);\n                },\n                attrsAll: { style: { float: 'left', width: '100%', height: '20%' } }\n            })\n            // m('#varList[style=display: block]',\n            //     unique_link_names().map(x => m(`p#${x.replace(/\\W/g, '_')}`, {onclick: _=> exp.callTreeApp(x, app), style: {'background-color': app.varColor}}, x))))\n            ]\n        }, {\n            value: 'Bivariate',\n            contents: [(0, _mithril2.default)('#result_prompt', { style: { display: app.explored ? 'none' : 'block' } }, 'Click \\'Explore\\' for interactive plots.'), (0, _mithril2.default)('#modelView_Container', { style: 'width: 100%; float: left; white-space: nowrap;' }, (0, _mithril2.default)('#modelView', { style: 'width: 100%; float: left' })), app.pipelineTable ? (0, _mithril2.default)(_Table2.default, {\n                id: 'pipelineTableExplore',\n                headers: app.pipelineHeader,\n                data: app.pipelineTable,\n                activeRow: app.selectedPipeline[app.currentMode],\n                onclick: app.setSelectedPipeline,\n                showUID: false\n            }) : undefined, (0, _mithril2.default)('#result_left', { style: { display: app.explored ? 'block' : 'none',\n                    \"width\": \"50%\", \"height\": \"100%\",\n                    \"float\": \"left\", \"overflow-y\": \"auto\",\n                    \"white-space\": \"nowrap\", \"padding-right\": \"10px\" } }, (0, _mithril2.default)('#left_thumbnail', { style: { \"width\": \"100%\", \"white-space\": \"nowrap\" } }, thumb(1, 'scatterplot', \"Scatter Plot\"), thumb(2, 'heatmap', \"Heatmap\"), thumb(3, 'linechart', \"Linechart\")), (0, _mithril2.default)('#result_left1', { style: { width: \"100%\", \"text-align\": \"center\", \"white-space\": \"nowrap\" } }, (0, _mithril2.default)(\".container3[id=scatterplot]\", { style: { \"width\": \"500px\", \"height\": \"80%\", \"float\": \"left\", \"overflow\": \"hidden\" } }), (0, _mithril2.default)(\".container4[id=heatchart]\", { style: { \"display\": \"none\", \"width\": \"500px\", \"height\": \"80%\", \"float\": \"left\", \"overflow\": \"hidden\" } }), (0, _mithril2.default)(\".container4[id=linechart]\", { style: { \"display\": \"none\", \"width\": \"500px\", \"height\": \"80%\", \"float\": \"left\", \"overflow\": \"hidden\" } })), (0, _mithril2.default)(\"div\", { style: { \"display\": \"inline-block\", \"width\": \"100%\", \"float\": \"left\", \"text-align\": \"center\" } }, (0, _mithril2.default)(\"h5#NAcount\", { style: { \" margin-bottom\": \"0\" } })), (0, _mithril2.default)(\".container2[id='resultsView_statistics']\", { style: { \"width\": \"100%\", \"float\": \"left\", \"white-space\": \"nowrap\" } })), (0, _mithril2.default)('#result_right', { style: { display: app.explored ? 'block' : 'none',\n                    width: \"50%\", height: \"100%\",\n                    float: \"right\", \"white-space\": \"nowrap\", \"padding-left\": \"10px\" } }, (0, _mithril2.default)('#resultsView_tabular.container1', { style: { width: \"100%\", height: \"100%\", float: \"left\", overflow: \"auto\", \"white-space\": \"nowrap\" } }, (0, _mithril2.default)('#SelectionData', { style: { width: \"100%\" } }, (0, _mithril2.default)(\"fieldset\", (0, _mithril2.default)(\"h4\", { style: { \"text-align\": \"center\" } }, \"Data Distribution Selection\"), (0, _mithril2.default)(\"p\", \"Enter number for each variable to specify the break points, and select between Equidistant/Equimass\")), (0, _mithril2.default)('#plotBreakInputs', { style: { height: '60px' } }, (0, _mithril2.default)('#forPlotA', { style: { display: 'inline', float: \"left\", width: '50%' } }, (0, _mithril2.default)(\"input#input1[name='fname'][type='text']\", { style: { \"margin-left\": \"2%\" } }), (0, _mithril2.default)('span#tooltipPlotA.tooltiptext[style=visibility: hidden]'), (0, _mithril2.default)(\"button.btn.btn-default.btn-xs#Equidistance1[type='button']\", { style: { float: \"left\", \"margin-left\": \"2%\" } }, \"EQUIDISTANCE\"), (0, _mithril2.default)(\"button.btn.btn-default.btn-xs#Equimass1[type='button']\", { style: { float: \"left\", \"margin-left\": \"2%\" } }, \"EQUIMASS\")), (0, _mithril2.default)('#forPlotB', { style: { display: 'inline', float: \"right\", width: '50%' } }, (0, _mithril2.default)(\"input#input2[name='fname1'][type='text']\", { style: { \"margin-left\": \"2%\" } }), (0, _mithril2.default)('span#tooltipPlotB.tooltiptext1[style=visibility: hidden]'), (0, _mithril2.default)(\"button.btn.btn-default.btn-xs#Equidistance2[type='button']\", { style: { float: \"left\", \"margin-left\": \"2%\" } }, \"EQUIDISTANCE\"), (0, _mithril2.default)(\"button.btn.btn-default.btn-xs#Equimass2[type='button']\", { style: { float: \"left\", \"margin-left\": \"2%\" } }, \"EQUIMASS\"))), (0, _mithril2.default)('div#statusesBivariate', (0, _mithril2.default)(\"div#plotA_status\", { style: { width: '100%' } }), (0, _mithril2.default)(\"div#plotB_status\", { style: { width: '100%' } }), (0, _mithril2.default)('h5[style=color: #ac2925; margin-top: 1%; margin-left: 2%]', 'Selection History')), (0, _mithril2.default)(\"button.btn.btn-default.btn-sm[id='SelectionData1'][type='button']\", { style: { display: \"block\", margin: \"0 auto\", position: \"relative\" } }, \"Create\")), (0, _mithril2.default)('#tabular_1', { style: { width: \"100%\", height: \"200px\" } }, (0, _mithril2.default)('#plotA', { style: { width: exp.get_width('plotA') + '%', height: \"100%\", float: \"left\", overflow: \"hidden\" } }, \"plotA\"), (0, _mithril2.default)('#plotB', { style: { width: exp.get_width('plotB') + '%', height: \"100%\", float: \"right\", overflow: \"hidden\" } }, \"plotB\")), (0, _mithril2.default)('#tabular_2', { style: { width: \"100%\" } })))]\n        }];\n\n        return (0, _mithril2.default)(_Panel2.default, {\n            side: 'right',\n            label: 'Result Exploration',\n            hover: true,\n            width: app.exploreRightPanelWidths[app.rightTabExplore],\n            contents: (0, _mithril2.default)(_MenuTabbed2.default, {\n                id: 'rightPanelMenuExplore',\n                currentTab: app.rightTabExplore,\n                callback: app.setRightTabExplore,\n                sections: sectionsExplore,\n                attrsAll: { style: { height: 'calc(100% - 39px)' } }\n            })\n            // m('#setx[style=display: none; margin-top: .5em]')\n        });\n    }\n\n    // mode == null (model mode)\n\n    var sections = [\n    // {\n    //     value: 'Models',\n    //     display: app.IS_D3M_DOMAIN ? 'block' : 'none',\n    //     contents: righttab('models')\n    // },\n    {\n        value: 'Task Type',\n        idSuffix: 'Type',\n        contents: righttab('types', app.d3mTaskType, 'Task', 'taskType')\n    }, {\n        value: 'Subtype',\n        contents: righttab('subtypes', app.d3mTaskSubtype, 'Task Subtype', 'taskSubtype')\n    }, {\n        value: 'Metrics',\n        contents: righttab('metrics', app.d3mMetrics, 'Metric', 'metric')\n    }, {\n        value: 'Results',\n        display: !app.swandive || app.IS_D3M_DOMAIN ? 'block' : 'none',\n        idSuffix: 'Setx',\n        contents: [(0, _mithril2.default)('#setxRight[style=display:block; float: right; width: 25%; height:100%; background-color: white]', app.pipelineTable ? (0, _mithril2.default)(_Table2.default, {\n            id: 'pipelineTable',\n            headers: app.pipelineHeader,\n            data: app.pipelineTable,\n            activeRow: app.selectedPipeline[app.currentMode],\n            onclick: app.setSelectedPipeline,\n            showUID: false\n        }) : undefined), (0, _mithril2.default)('#setxTop[style=display:block; float: left; width: 75%; height:10%; overflow: auto; background-color: white]', (0, _mithril2.default)(\"button.btn.btn-default.btn-xs#btnPredPlot[type='button']\", {\n            onclick: function onclick() {\n                return app.showPredPlot('btnPredPlot');\n            },\n            style: { float: \"left\", \"margin-left\": \"2%\" }\n        }, \"Prediction Summary\"), (0, _mithril2.default)(\"button.btn.btn-default.btn-xs#btnGenPreds[type='button']\", {\n            onclick: function onclick() {\n                return app.showGenPreds('btnGenPreds');\n            },\n            style: { float: \"left\", \"margin-left\": \"2%\" }\n        }, \"Generate New Predictions\")), (0, _mithril2.default)('#setxLeftPlot[style=display:block; float: left; width: 75%; height:95%; overflow: auto; background-color: white]'), (0, _mithril2.default)('#setxLeft[style=display:none; float: left; width: 75%; height:95%; overflow: auto; background-color: white]'), (0, _mithril2.default)('#setxLeftGen[style=display:none; float: left; width: 75%; height:95%; overflow: auto; background-color: white]', (0, _mithril2.default)('#setxLeftTop[style=display:block; float: left; width: 100%; height:50%; overflow: auto; background-color: white]', (0, _mithril2.default)('#setxLeftTopLeft[style=display:block; float: left; width: 30%; height:100%; overflow: auto; background-color: white]'), (0, _mithril2.default)('#setxLeftTopRight[style=display:block; float: left; width: 70%; height:100%; overflow: auto; background-color: white]')), (0, _mithril2.default)('#setxLeftBottomLeft[style=display:block; float: left; width: 70%; height:50%; overflow: auto; background-color: white]'), (0, _mithril2.default)('#setxLeftBottomRightTop[style=display:block; float: left; width: 30%; height:10%; overflow: auto; background-color: white]', (0, _mithril2.default)(_PanelButton2.default, {\n            id: 'btnExecutePipe',\n            classes: 'btn-default.ladda-button[data-spinner-color=#000000][data-style=zoom-in]',\n            onclick: function onclick() {\n                return app.executepipeline('btnExecutePipe');\n            },\n            style: 'display:inline; float: left; margin-right: 10px',\n            title: 'Execute pipeline.'\n        }, (0, _mithril2.default)('span.ladda-label[style=pointer-events: none]', 'Execute Generation'))), (0, _mithril2.default)('#setxLeftBottomRightBottom[style=display:block; float: left; width: 30%; height:40%; overflow: auto; background-color: white]'))]\n    }];\n\n    return (0, _mithril2.default)(_Panel2.default, {\n        side: 'right',\n        label: 'Model Selection',\n        hover: true,\n        width: app.modelRightPanelWidths[app.rightTab],\n        contents: (0, _mithril2.default)(_MenuTabbed2.default, {\n            id: 'rightpanelMenu',\n            currentTab: app.rightTab,\n            callback: app.setRightTab,\n            hoverBonus: 10,\n            selectWidth: 30,\n            sections: sections,\n            attrsAll: { style: { height: 'calc(100% - 39px)' } }\n        })\n    });\n}\n\nvar glyph = function glyph(icon, unstyled) {\n    return (0, _mithril2.default)('span.glyphicon.glyphicon-' + icon + (unstyled ? '' : '[style=color: #818181; font-size: 1em; pointer-events: none]'));\n};\n\nvar Body = function () {\n    function Body() {\n        _classCallCheck(this, Body);\n    }\n\n    _createClass(Body, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            if (vnode.attrs.mode) {\n                _mithril2.default.route.set('/model');\n                vnode.attrs.mode = null;\n            };\n            this.about = false;\n            this.usertasks = false;\n            this.cite = false;\n            this.citeHidden = false;\n            this.last_mode = null;\n        }\n    }, {\n        key: 'oncreate',\n        value: function oncreate() {\n            var extract = function extract(name, key, offset, replace) {\n                key = key + '=';\n                var loc = window.location.toString();\n                var val = loc.indexOf(key) > 0 ? loc.substring(loc.indexOf(key) + offset) : '';\n                var idx = val.indexOf('&');\n                val = idx > 0 ? val.substring(0, idx) : val;\n                val = val.replace('#!/model', '');\n                console.log(name, ': ', val);\n                return replace ? val.replace(/%25/g, '%').replace(/%3A/g, ':').replace(/%2F/g, '/') : val;\n            };\n            app.main(extract('fileid', 'dfId', 5), extract('hostname', 'host', 5), extract('ddiurl', 'ddiurl', 7, true), extract('dataurl', 'dataurl', 8, true), extract('apikey', 'key', 4));\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var mode = vnode.attrs.mode;\n\n            var explore_mode = mode === 'explore';\n            var results_mode = mode === 'results';\n\n            var spaceBtn = function spaceBtn(id, onclick, title, icon) {\n                return (0, _mithril2.default)('button#' + id + '.btn.btn-default', { onclick: onclick, title: title }, glyph(icon, true));\n            };\n\n            if (mode != this.last_mode) {\n                app.set_mode(mode);\n                if (explore_mode) {\n                    app.explored = false;\n                    app.univariate_finished = false;\n                    app.setRightTabExplore('Univariate');\n                } else if (results_mode) {\n                    app.setRightTab(IS_D3M_DOMAIN ? 'Task Type' : 'Models');\n                } else if (!mode) {\n                    app.setRightTab(IS_D3M_DOMAIN ? 'Task Type' : 'Models');\n                }\n                app.restart && app.restart();\n                this.last_mode = mode;\n            }\n\n            return (0, _mithril2.default)('main', this.modal(), this.header(mode), this.footer(mode), (0, _mithril2.default)('#main.left.carousel.slide.svg-leftpanel.svg-rightpanel[style=overflow: hidden]', (0, _mithril2.default)(\"#innercarousel.carousel-inner\", { style: { height: 'calc(100% + ' + app.marginTopCarousel + 'px)' } }, (0, _mithril2.default)('#m0.item.active', { style: { height: '100%', 'text-align': \"center\" } }, (0, _mithril2.default)('svg#whitespace'))), (0, _mithril2.default)(\"#spacetools.spaceTool\", { style: { right: app.panelWidth['right'], 'z-index': 16 } }, (0, _mithril2.default)('button#btnLock.btn.btn-default', {\n                class: app.locktoggle ? 'active' : '',\n                onclick: function onclick() {\n                    return app.lockDescription(!app.locktoggle);\n                },\n                title: 'Lock selection of problem description'\n            }, glyph(app.locktoggle ? 'lock' : 'pencil', true)), spaceBtn('btnJoin', function (_) {\n                var _ref;\n\n                var links = [];\n                console.log(\"doing connect all\");\n                if (explore_mode) {\n                    var _iteratorNormalCompletion = true;\n                    var _didIteratorError = false;\n                    var _iteratorError = undefined;\n\n                    try {\n                        var _loop = function _loop() {\n                            var node = _step.value;\n                            var _iteratorNormalCompletion2 = true;\n                            var _didIteratorError2 = false;\n                            var _iteratorError2 = undefined;\n\n                            try {\n                                var _loop2 = function _loop2() {\n                                    var node1 = _step2.value;\n\n                                    if (node !== node1 && links.filter(function (l) {\n                                        return l.target === node1 && l.source === node;\n                                    }).length === 0) {\n                                        links.push({ left: false, right: false, target: node, source: node1 });\n                                    }\n                                };\n\n                                for (var _iterator2 = app.nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                                    _loop2();\n                                }\n                            } catch (err) {\n                                _didIteratorError2 = true;\n                                _iteratorError2 = err;\n                            } finally {\n                                try {\n                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                        _iterator2.return();\n                                    }\n                                } finally {\n                                    if (_didIteratorError2) {\n                                        throw _iteratorError2;\n                                    }\n                                }\n                            }\n                        };\n\n                        for (var _iterator = app.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                            _loop();\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                            }\n                        } finally {\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                } else {\n                    var dvs = app.nodes.filter(function (n) {\n                        return app.zparams.zdv.includes(n.name);\n                    });\n                    var nolink = app.zparams.zdv.concat(app.zparams.zgroup1).concat(app.zparams.zgroup2);\n                    var ivs = app.nodes.filter(function (n) {\n                        return !nolink.includes(n.name);\n                    });\n\n                    links = dvs.map(function (dv) {\n                        return ivs.map(function (iv) {\n                            return {\n                                left: true,\n                                right: false,\n                                target: iv,\n                                source: dv\n                            };\n                        });\n                    });\n                }\n                app.restart((_ref = []).concat.apply(_ref, _toConsumableArray(links)));\n            }, 'Make all possible connections between nodes', 'link'), spaceBtn('btnDisconnect', function (_) {\n                return app.restart([]);\n            }, 'Delete all connections between nodes', 'remove-circle'), spaceBtn('btnForce', app.forceSwitch, 'Pin the variable pebbles to the page', 'pushpin'), spaceBtn('btnEraser', app.erase, 'Wipe all variables from the modeling space', 'magnet')), (0, _mithril2.default)(_Subpanel2.default, { title: \"Legend\",\n                buttons: [['timeButton', 'ztime', 'Time'], ['csButton', 'zcross', 'Cross Sec'], ['dvButton', 'zdv', 'Dep Var'], ['nomButton', 'znom', 'Nom Var'], ['gr1Button', 'zgroup1', 'Group 1'], ['gr2Button', 'zgroup2', 'Group 2']] }), (0, _mithril2.default)(_Subpanel2.default, { title: \"History\" }),\n            //footer(),\n            leftpanel(mode), rightpanel(mode)));\n        }\n    }, {\n        key: 'header',\n        value: function header(mode) {\n            var _this = this;\n\n            var userlinks = username === 'no logged in user' ? [{ title: \"Log in\", url: login_url }, { title: \"Sign up\", url: signup_url }] : [{ title: \"Workspaces\", url: workspaces_url }, { title: \"Settings\", url: settings_url }, { title: \"Links\", url: devlinks_url }, { title: \"Logout\", url: logout_url }];\n\n            var _navBtn = function _navBtn(id, left, right, onclick, args, min) {\n                return (0, _mithril2.default)('button#' + id + '.btn.navbar-right', { onclick: onclick,\n                    style: { 'margin-left': left + 'em',\n                        'margin-right': right + 'em',\n                        'min-width': min } }, args);\n            };\n\n            var navBtn = function navBtn(id, left, right, onclick, args, min) {\n                return _navBtn(id + '.ladda-button[data-spinner-color=#000000][data-style=zoom-in]', left, right, onclick, args, min);\n            };\n            var navBtnGroup = function navBtnGroup(id, onclick, args, min) {\n                return (0, _mithril2.default)('button#' + id + '.btn.navbar-left', { onclick: onclick,\n                    style: { 'min-width': min } }, args);\n            };\n            var navBtn1 = function navBtn1(id, onclick, args, title) {\n                return _navBtn(id + '.btn-default[title=' + title + ']', 2, 0, onclick, args);\n            };\n            var transformation = function transformation(id, list) {\n                return (0, _mithril2.default)('ul#' + id, {\n                    style: { display: 'none', 'background-color': app.varColor },\n                    onclick: function onclick(evt) {\n                        // if interact is selected, show variable list again\n                        if ($(this).text() === 'interact(d,e)') {\n                            $('#tInput').val(tvar.concat('*'));\n                            selInteract = true;\n                            $(this).parent().fadeOut(100);\n                            $('#transSel').fadeIn(100);\n                            evt.stopPropagation();\n                            return;\n                        }\n\n                        var tvar = $('#tInput').val();\n                        var tfunc = $(this).text().replace(\"d\", \"_transvar0\");\n                        var tcall = $(this).text().replace(\"d\", tvar);\n                        $('#tInput').val(tcall);\n                        $(this).parent().fadeOut(100);\n                        evt.stopPropagation();\n                        transform(tvar, tfunc, typeTransform = false);\n                    }\n                }, list.map(function (x) {\n                    return (0, _mithril2.default)('li', x);\n                }));\n            };\n\n            return (0, _mithril2.default)(_Header2.default, {\n                attrsInterface: { style: mode === 'explore' ? { 'background-image': '-webkit-linear-gradient(top, #fff 0, rgb(227, 242, 254) 100%)' } : {} },\n                contents: (0, _mithril2.default)('#dataField.field[style=text-align: center]', [(0, _mithril2.default)('h4#dataName[style=display: inline-block; margin-right:2em; margin-top: 7px]', {\n                    onclick: function onclick(_) {\n                        return _this.cite = _this.citeHidden = !_this.citeHidden;\n                    },\n                    onmouseout: function onmouseout(_) {\n                        return _this.citeHidden || (_this.cite = false);\n                    },\n                    onmouseover: function onmouseover(_) {\n                        return _this.cite = true;\n                    }\n                }, \"Dataset Name\"), (0, _mithril2.default)('#cite.panel.panel-default', {\n                    style: 'display: ' + (this.cite ? 'block' : 'none') + '; position: absolute; right: 50%; width: 380px; text-align: left; z-index: 50'\n                }, (0, _mithril2.default)(\".panel-body\")), (0, _mithril2.default)('span', (0, _mithril2.default)('.dropdown[style=float: right; padding-right: 1em]', (0, _mithril2.default)('#drop.button.btn[type=button][data-toggle=dropdown][aria-haspopup=true][aria-expanded=false]', [username, \" \", glyph('triangle-bottom')]), (0, _mithril2.default)('ul.dropdown-menu[role=menu][aria-labelledby=drop]', userlinks.map(function (link) {\n                    return (0, _mithril2.default)('a[style=padding: 0.5em]', { href: link.url }, link.title, (0, _mithril2.default)('br'));\n                }))), navBtn('btnEstimate.btn-default', 2, 1, mode === 'explore' ? function (_) {\n                    if (app.links.length === 0) {\n                        app.setModal('Please link pebbles first.', 'Warning', true, 'Ok', true);\n                        return;\n                    }\n\n                    exp.explore();\n                    app.setRightTabExplore('Bivariate');\n                } : app.estimate, (0, _mithril2.default)(\"span.ladda-label\", mode === 'explore' ? 'Explore' : 'Solve This Problem'), '150px'), (0, _mithril2.default)('div.btn-group[role=group][aria-label=\"...\"]', { style: { \"float\": \"right\", \"margin-left\": \"2em\" } }, navBtnGroup('btnTA2.btn-default', function (_) {\n                    return _hopscotch2.default.startTour(app.mytour, 0);\n                }, ['Help Tour ', glyph('road')]), navBtnGroup('btnTA2.btn-default', function (_) {\n                    return app.helpmaterials('video');\n                }, ['Video ', glyph('expand')]), navBtnGroup('btnTA2.btn-default', function (_) {\n                    return app.helpmaterials('manual');\n                }, ['Manual ', glyph('book')])), navBtn1(\"btnReset\", app.reset, glyph('repeat'), 'Reset'), navBtn1('btnEndSession', app.endsession, (0, _mithril2.default)(\"span.ladda-label\", 'Mark Problem Finished'), 'Mark Problem Finished')), (0, _mithril2.default)('#tInput', {\n                    style: { display: 'none' },\n                    onclick: function onclick(_) {\n                        if (byId('transSel').style.display !== 'none') {\n                            // if variable list is displayed when input is clicked...\n                            $('#transSel').fadeOut(100);\n                            return false;\n                        }\n                        if (byId('transList').style.display !== 'none') {\n                            // if function list is displayed when input is clicked...\n                            $('#transList').fadeOut(100);\n                            return false;\n                        }\n\n                        // highlight the text\n                        $(_this).select();\n                        var pos = $('#tInput').offset();\n                        pos.top += $('#tInput').width();\n                        $('#transSel').fadeIn(100);\n                        return false;\n                    },\n                    keyup: function keyup(evt) {\n                        var t = byId('transSel').style.display;\n                        var t1 = byId('transList').style.display;\n                        if (t !== 'none') {\n                            $('#transSel').fadeOut(100);\n                        } else if (t1 !== 'none') {\n                            $('#transList').fadeOut(100);\n                        }\n\n                        if (evt.keyCode == 13) {\n                            // keyup on Enter\n                            var _t = transParse($('#tInput').val());\n                            if (!_t) {\n                                return;\n                            }\n\n                            transform(_t.slice(0, _t.length - 1), _t[_t.length - 1], typeTransform = false);\n                        }\n                    }\n                }), (0, _mithril2.default)('#transformations.transformTool', {\n                    title: 'Construct transformations of existing variables using valid R syntax.\\n                              For example, assuming a variable named d, you can enter \"log(d)\" or \"d^2\".'\n                }, [transformation('transSel', ['a', 'b']), transformation('transList', app.transformList)])])\n            });\n        }\n    }, {\n        key: 'footer',\n        value: function footer(mode) {\n            return (0, _mithril2.default)(_Footer2.default, {\n                contents: [(0, _mithril2.default)(_ButtonRadio2.default, {\n                    id: 'modeButtonBar',\n                    attrsAll: { style: { width: '200px', margin: '0 .2em' }, class: 'navbar-left btn-sm' },\n                    onclick: app.set_mode,\n                    activeSection: mode === undefined ? 'model' : mode,\n                    sections: [{ value: 'Model' }, { value: 'Explore' }] // {value: 'Results', id: 'btnResultsMode'}] VJD: commenting out the results mode button since we don't have this yet\n                }), (0, _mithril2.default)(\"a#logID[href=somelink][target=_blank]\", \"Replication\"), (0, _mithril2.default)(\"span[style=color:#337ab7]\", \" | \"),\n                // dev links...\n                (0, _mithril2.default)(\"a[href='/dev-raven-links'][target=_blank]\", \"raven-links\"),\n                //m(\"a[style=margin-right: 0.5em]\",\n                //  {onclick: app.record_user_metadata},\n                //  \"record-metadata\"),\n                (0, _mithril2.default)(\"span[style=color:#337ab7]\", \" | \"), (0, _mithril2.default)(\"span[style=color:#337ab7]\", \"TA2: \" + TA2_SERVER), (0, _mithril2.default)(\"span[style=color:#337ab7]\", \" | \"), (0, _mithril2.default)(\"span[style=color:#337ab7]\", \"TA3TA2 api: \" + TA3TA2_API_VERSION)]\n            });\n        }\n    }, {\n        key: 'modal',\n        value: function modal() {\n            return (0, _mithril2.default)(\".modal.fade[id='myModal'][role='dialog']\", [(0, _mithril2.default)(\".modal-dialog\", (0, _mithril2.default)(\".modal-content\", [(0, _mithril2.default)(\".modal-header\",\n            //  m(\"button.close[data-dismiss='modal'][type='button']\",\n            //  m.trust(\"&times;\")),\n            (0, _mithril2.default)(\"h4.modal-title\", app.modalHeader)), (0, _mithril2.default)(\".modal-body\", (0, _mithril2.default)(\"p\", app.modalText)), (0, _mithril2.default)(\".modal-footer\",\n            // m(\"button.btn.btn-default[data-dismiss='modal'][type='button']\",{\n            // onclick: () => app.reset}, app.modalButton))\n            (0, _mithril2.default)(\"button.btn.btn-default[type='button']\", {\n                style: { display: app.modalBtnDisplay, float: 'right' },\n                onclick: function onclick(_) {\n                    if (app.modalClose) {\n                        app.modalClose = false;\n                        $('#myModal').modal('hide');\n                        return;\n                    } else {\n                        eval(app.modalFunc);\n                    }\n                    location.reload();\n                }\n            }, app.modalButton))]))]);\n        }\n    }]);\n\n    return Body;\n}();\n\n_mithril2.default.route(document.body, '/model', {\n    '/model': { render: function render() {\n            return (0, _mithril2.default)(Body);\n        } },\n    '/explore': { render: function render() {\n            return (0, _mithril2.default)(Body, { mode: 'explore' });\n        } },\n    '/results': {\n        onmatch: function onmatch() {\n            app.set_mode('results');\n            state.get_pipelines();\n            layout.init();\n        },\n        render: function render() {\n            return (0, _mithril2.default)(Body, { mode: 'results' });\n        }\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getClasses = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(2);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar getClasses = exports.getClasses = function getClasses(cls, panel, attrs) {\n    if (panel.closed) {\n        cls += '.closepanel';\n    } else if (attrs.is_explore_mode) {\n        if (app.righttab === 'btnUnivariate' && attrs.univariate_finished) {\n            cls += '[style=width: ' + 45 + '%]';\n        } else if (app.righttab === 'btnBivariate') {\n            cls += '[style=width: ' + 75 + '%]';\n        }\n    } else if (attrs.side === 'left' && app.lefttab === 'tab2') {\n        cls += '.expandpanelfull';\n    }\n    return cls;\n    ;\n};\n\nvar Panel = function () {\n    function Panel() {\n        _classCallCheck(this, Panel);\n    }\n\n    _createClass(Panel, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            this.closed = false;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var _vnode$attrs = vnode.attrs,\n                side = _vnode$attrs.side,\n                title = _vnode$attrs.title,\n                buttons = _vnode$attrs.buttons,\n                is_explore_mode = _vnode$attrs.is_explore_mode;\n\n            var btns = buttons || [];\n            var dot = [_mithril2.default.trust('&#9679;'), (0, _mithril2.default)('br')];\n            var width = 100 / btns.length;\n            var expandwidth = 35;\n            var shrinkwidth = 65 / (btns.length - 1);\n            return (0, _mithril2.default)(getClasses('#' + side + 'panel.sidepanel.container.clearfix', this, vnode.attrs), (0, _mithril2.default)('#toggle' + (side === 'left' ? 'L' : 'R') + 'panelicon.panelbar[style=height: 100%]', (0, _mithril2.default)('span', { onclick: function onclick(_) {\n                    return _this.closed = !_this.closed;\n                } }, dot, dot, dot, dot)), (0, _mithril2.default)('#' + side + 'paneltitle.panel-heading.text-center', (0, _mithril2.default)(\"h3.panel-title\", title)), btns.length === 0 ? null : (0, _mithril2.default)('ul' + (side === 'right' ? '#rightpanelbuttons' : '') + '.accordion', btns.map(function (b) {\n                b.attrs.style = b.attrs.style + '; width: 100%';\n                b.attrs.is_explore_mode = is_explore_mode;\n                var id = b.attrs.id;\n                //let w = this.active_btn === id ? shrinkwidth :\n                //this.active_btn === null ? width :\n                //expandwidth;\n                return (0, _mithril2.default)('li', { style: { width: width + '%', 'max-width': '150px' },\n                    onmouseover: function onmouseover(_) {\n                        return _this.active_btn = id;\n                    },\n                    onmouseout: function onmouseout(_) {\n                        return _this.active_btn = null;\n                    } }, b);\n            })), (0, _mithril2.default)('.row-fluid', (0, _mithril2.default)('#' + side + 'panelcontent', (0, _mithril2.default)('#' + side + 'ContentArea[style=height: calc(100vh - 213px); overflow: auto]', vnode.children))));\n        }\n    }]);\n\n    return Panel;\n}();\n\nexports.default = Panel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1BhbmVsLmpzPzkyNGYiXSwibmFtZXMiOlsiYXBwIiwiZ2V0Q2xhc3NlcyIsImNscyIsInBhbmVsIiwiYXR0cnMiLCJjbG9zZWQiLCJpc19leHBsb3JlX21vZGUiLCJyaWdodHRhYiIsInVuaXZhcmlhdGVfZmluaXNoZWQiLCJzaWRlIiwibGVmdHRhYiIsIlBhbmVsIiwidm5vZGUiLCJ0aXRsZSIsImJ1dHRvbnMiLCJidG5zIiwiZG90IiwidHJ1c3QiLCJ3aWR0aCIsImxlbmd0aCIsImV4cGFuZHdpZHRoIiwic2hyaW5rd2lkdGgiLCJvbmNsaWNrIiwibWFwIiwiYiIsInN0eWxlIiwiaWQiLCJvbm1vdXNlb3ZlciIsImFjdGl2ZV9idG4iLCJvbm1vdXNlb3V0IiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7O0FBRUE7O0lBQVlBLEc7Ozs7Ozs7O0FBRUwsSUFBSUMsa0NBQWEsU0FBYkEsVUFBYSxDQUFTQyxHQUFULEVBQWNDLEtBQWQsRUFBcUJDLEtBQXJCLEVBQTRCO0FBQ2hELFFBQUlELE1BQU1FLE1BQVYsRUFBa0I7QUFDZEgsZUFBTyxhQUFQO0FBQ0gsS0FGRCxNQUVPLElBQUlFLE1BQU1FLGVBQVYsRUFBMkI7QUFDOUIsWUFBSU4sSUFBSU8sUUFBSixLQUFpQixlQUFqQixJQUFvQ0gsTUFBTUksbUJBQTlDLEVBQW1FO0FBQy9ETixzQ0FBd0IsRUFBeEI7QUFDSCxTQUZELE1BRU8sSUFBSUYsSUFBSU8sUUFBSixLQUFpQixjQUFyQixFQUFxQztBQUN4Q0wsc0NBQXdCLEVBQXhCO0FBQ0g7QUFDSixLQU5NLE1BTUEsSUFBSUUsTUFBTUssSUFBTixLQUFlLE1BQWYsSUFBeUJULElBQUlVLE9BQUosS0FBZ0IsTUFBN0MsRUFBcUQ7QUFDeERSLGVBQU8sa0JBQVA7QUFDSDtBQUNELFdBQU9BLEdBQVA7QUFDSjtBQUNDLENBZE07O0lBZ0JEUyxLOzs7Ozs7OytCQUNLQyxLLEVBQU87QUFDVixpQkFBS1AsTUFBTCxHQUFjLEtBQWQ7QUFDSDs7OzZCQUVJTyxLLEVBQU87QUFBQTs7QUFBQSwrQkFDc0NBLE1BQU1SLEtBRDVDO0FBQUEsZ0JBQ0hLLElBREcsZ0JBQ0hBLElBREc7QUFBQSxnQkFDR0ksS0FESCxnQkFDR0EsS0FESDtBQUFBLGdCQUNVQyxPQURWLGdCQUNVQSxPQURWO0FBQUEsZ0JBQ21CUixlQURuQixnQkFDbUJBLGVBRG5COztBQUVSLGdCQUFJUyxPQUFPRCxXQUFXLEVBQXRCO0FBQ0EsZ0JBQUlFLE1BQU0sQ0FBQyxrQkFBRUMsS0FBRixDQUFRLFNBQVIsQ0FBRCxFQUFxQix1QkFBRSxJQUFGLENBQXJCLENBQVY7QUFDQSxnQkFBSUMsUUFBUSxNQUFNSCxLQUFLSSxNQUF2QjtBQUNBLGdCQUFJQyxjQUFjLEVBQWxCO0FBQ0EsZ0JBQUlDLGNBQWMsTUFBTU4sS0FBS0ksTUFBTCxHQUFjLENBQXBCLENBQWxCO0FBQ0EsbUJBQU8sdUJBQ0hsQixpQkFBZVEsSUFBZix5Q0FBeUQsSUFBekQsRUFBK0RHLE1BQU1SLEtBQXJFLENBREcsRUFFSCxvQ0FBWUssU0FBUyxNQUFULEdBQWtCLEdBQWxCLEdBQXdCLEdBQXBDLDhDQUNFLHVCQUFFLE1BQUYsRUFBVSxFQUFDYSxTQUFTO0FBQUEsMkJBQUssTUFBS2pCLE1BQUwsR0FBYyxDQUFDLE1BQUtBLE1BQXpCO0FBQUEsaUJBQVYsRUFBVixFQUFzRFcsR0FBdEQsRUFBMkRBLEdBQTNELEVBQWdFQSxHQUFoRSxFQUFxRUEsR0FBckUsQ0FERixDQUZHLEVBSUgsNkJBQU1QLElBQU4sMkNBQ0UsdUJBQUUsZ0JBQUYsRUFBb0JJLEtBQXBCLENBREYsQ0FKRyxFQU1IRSxLQUFLSSxNQUFMLEtBQWdCLENBQWhCLEdBQW9CLElBQXBCLEdBQTJCLCtCQUFPVixTQUFTLE9BQVQsR0FBbUIsb0JBQW5CLEdBQTBDLEVBQWpELGtCQUN6Qk0sS0FBS1EsR0FBTCxDQUFTLGFBQUs7QUFDVkMsa0JBQUVwQixLQUFGLENBQVFxQixLQUFSLEdBQWdCRCxFQUFFcEIsS0FBRixDQUFRcUIsS0FBUixHQUFnQixlQUFoQztBQUNBRCxrQkFBRXBCLEtBQUYsQ0FBUUUsZUFBUixHQUEwQkEsZUFBMUI7QUFDQSxvQkFBSW9CLEtBQUtGLEVBQUVwQixLQUFGLENBQVFzQixFQUFqQjtBQUNBO0FBQ0k7QUFDQTtBQUNKLHVCQUFPLHVCQUNILElBREcsRUFFSCxFQUFDRCxPQUFPLEVBQUNQLE9BQU9BLFFBQVEsR0FBaEIsRUFBcUIsYUFBYSxPQUFsQyxFQUFSO0FBQ0NTLGlDQUFhO0FBQUEsK0JBQUssTUFBS0MsVUFBTCxHQUFrQkYsRUFBdkI7QUFBQSxxQkFEZDtBQUVDRyxnQ0FBWTtBQUFBLCtCQUFLLE1BQUtELFVBQUwsR0FBa0IsSUFBdkI7QUFBQSxxQkFGYixFQUZHLEVBS0hKLENBTEcsQ0FBUDtBQU1ILGFBYkQsQ0FEeUIsQ0FOeEIsRUFxQkgsdUJBQUUsWUFBRixFQUNFLDZCQUFNZixJQUFOLG1CQUNFLDZCQUFNQSxJQUFOLHFFQUE0RUcsTUFBTWtCLFFBQWxGLENBREYsQ0FERixDQXJCRyxDQUFQO0FBd0JIOzs7Ozs7a0JBR1VuQixLIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCAqIGFzIGFwcCBmcm9tICcuLi9hcHAnO1xuXG5leHBvcnQgbGV0IGdldENsYXNzZXMgPSBmdW5jdGlvbihjbHMsIHBhbmVsLCBhdHRycykge1xuICAgIGlmIChwYW5lbC5jbG9zZWQpIHtcbiAgICAgICAgY2xzICs9ICcuY2xvc2VwYW5lbCc7XG4gICAgfSBlbHNlIGlmIChhdHRycy5pc19leHBsb3JlX21vZGUpIHtcbiAgICAgICAgaWYgKGFwcC5yaWdodHRhYiA9PT0gJ2J0blVuaXZhcmlhdGUnICYmIGF0dHJzLnVuaXZhcmlhdGVfZmluaXNoZWQpIHtcbiAgICAgICAgICAgIGNscyArPSBgW3N0eWxlPXdpZHRoOiAkezQ1fSVdYDtcbiAgICAgICAgfSBlbHNlIGlmIChhcHAucmlnaHR0YWIgPT09ICdidG5CaXZhcmlhdGUnKSB7XG4gICAgICAgICAgICBjbHMgKz0gYFtzdHlsZT13aWR0aDogJHs3NX0lXWA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGF0dHJzLnNpZGUgPT09ICdsZWZ0JyAmJiBhcHAubGVmdHRhYiA9PT0gJ3RhYjInKSB7XG4gICAgICAgIGNscyArPSAnLmV4cGFuZHBhbmVsZnVsbCc7XG4gICAgfVxuICAgIHJldHVybiBjbHM7XG47XG59O1xuXG5jbGFzcyBQYW5lbCB7XG4gICAgb25pbml0KHZub2RlKSB7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICBsZXQge3NpZGUsIHRpdGxlLCBidXR0b25zLCBpc19leHBsb3JlX21vZGV9ID0gdm5vZGUuYXR0cnM7XG4gICAgICAgIGxldCBidG5zID0gYnV0dG9ucyB8fCBbXTtcbiAgICAgICAgbGV0IGRvdCA9IFttLnRydXN0KCcmIzk2Nzk7JyksIG0oJ2JyJyldO1xuICAgICAgICBsZXQgd2lkdGggPSAxMDAgLyBidG5zLmxlbmd0aDtcbiAgICAgICAgbGV0IGV4cGFuZHdpZHRoID0gMzU7XG4gICAgICAgIGxldCBzaHJpbmt3aWR0aCA9IDY1IC8gKGJ0bnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiBtKFxuICAgICAgICAgICAgZ2V0Q2xhc3NlcyhgIyR7c2lkZX1wYW5lbC5zaWRlcGFuZWwuY29udGFpbmVyLmNsZWFyZml4YCwgdGhpcywgdm5vZGUuYXR0cnMpLFxuICAgICAgICAgICAgbShgI3RvZ2dsZSR7c2lkZSA9PT0gJ2xlZnQnID8gJ0wnIDogJ1InfXBhbmVsaWNvbi5wYW5lbGJhcltzdHlsZT1oZWlnaHQ6IDEwMCVdYCxcbiAgICAgICAgICAgICAgbSgnc3BhbicsIHtvbmNsaWNrOiBfID0+IHRoaXMuY2xvc2VkID0gIXRoaXMuY2xvc2VkfSwgZG90LCBkb3QsIGRvdCwgZG90KSksXG4gICAgICAgICAgICBtKGAjJHtzaWRlfXBhbmVsdGl0bGUucGFuZWwtaGVhZGluZy50ZXh0LWNlbnRlcmAsXG4gICAgICAgICAgICAgIG0oXCJoMy5wYW5lbC10aXRsZVwiLCB0aXRsZSkpLFxuICAgICAgICAgICAgYnRucy5sZW5ndGggPT09IDAgPyBudWxsIDogbShgdWwke3NpZGUgPT09ICdyaWdodCcgPyAnI3JpZ2h0cGFuZWxidXR0b25zJyA6ICcnfS5hY2NvcmRpb25gLFxuICAgICAgICAgICAgICBidG5zLm1hcChiID0+IHtcbiAgICAgICAgICAgICAgICAgIGIuYXR0cnMuc3R5bGUgPSBiLmF0dHJzLnN0eWxlICsgJzsgd2lkdGg6IDEwMCUnO1xuICAgICAgICAgICAgICAgICAgYi5hdHRycy5pc19leHBsb3JlX21vZGUgPSBpc19leHBsb3JlX21vZGU7XG4gICAgICAgICAgICAgICAgICBsZXQgaWQgPSBiLmF0dHJzLmlkO1xuICAgICAgICAgICAgICAgICAgLy9sZXQgdyA9IHRoaXMuYWN0aXZlX2J0biA9PT0gaWQgPyBzaHJpbmt3aWR0aCA6XG4gICAgICAgICAgICAgICAgICAgICAgLy90aGlzLmFjdGl2ZV9idG4gPT09IG51bGwgPyB3aWR0aCA6XG4gICAgICAgICAgICAgICAgICAgICAgLy9leHBhbmR3aWR0aDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtKFxuICAgICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgICAge3N0eWxlOiB7d2lkdGg6IHdpZHRoICsgJyUnLCAnbWF4LXdpZHRoJzogJzE1MHB4J30sXG4gICAgICAgICAgICAgICAgICAgICAgIG9ubW91c2VvdmVyOiBfID0+IHRoaXMuYWN0aXZlX2J0biA9IGlkLFxuICAgICAgICAgICAgICAgICAgICAgICBvbm1vdXNlb3V0OiBfID0+IHRoaXMuYWN0aXZlX2J0biA9IG51bGx9LFxuICAgICAgICAgICAgICAgICAgICAgIGIpO1xuICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBtKCcucm93LWZsdWlkJyxcbiAgICAgICAgICAgICAgbShgIyR7c2lkZX1wYW5lbGNvbnRlbnRgLFxuICAgICAgICAgICAgICAgIG0oYCMke3NpZGV9Q29udGVudEFyZWFbc3R5bGU9aGVpZ2h0OiBjYWxjKDEwMHZoIC0gMjEzcHgpOyBvdmVyZmxvdzogYXV0b11gLCB2bm9kZS5jaGlsZHJlbikpKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYW5lbDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvUGFuZWwuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _common = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Interface specification\n\n// ```\n// m(Dropdown, {\n//     id: 'dropdownID' (applied to button and selectors)\n//     items: ['Item 1', 'Item 2', 'Item 3'],\n//     onclickChild: (value) => console.log(value + \" was clicked.\")\n//     dropWidth: 100 (sets the width of the dropdown)\n//     })\n//  ```\n\nvar Dropdown = function () {\n    function Dropdown() {\n        _classCallCheck(this, Dropdown);\n    }\n\n    _createClass(Dropdown, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            this.activeItem = vnode.attrs.items[0];\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var _vnode$attrs = vnode.attrs,\n                id = _vnode$attrs.id,\n                items = _vnode$attrs.items,\n                onclickChild = _vnode$attrs.onclickChild,\n                dropWidth = _vnode$attrs.dropWidth;\n\n\n            return (0, _mithril2.default)('.dropdown[style=display: block]', [(0, _mithril2.default)('button.btn.btn-default.dropdown-toggle', Object.assign(vnode.attrs, { 'data-toggle': 'dropdown' }), [this.activeItem, (0, _mithril2.default)('b.caret', { style: { 'margin-left': '5px' } })]), (0, _mithril2.default)('ul.dropdown-menu', { 'aria-labelledby': id, style: { width: dropWidth, 'min-width': 0 } }, items.map(function (item) {\n                return (0, _mithril2.default)('li.dropdown-item', {\n                    value: item,\n                    onclick: function onclick() {\n                        _this.activeItem = item;\n                        onclickChild(item);\n                    },\n                    style: { 'padding-left': '10px' }\n                }, item);\n            }))]);\n        }\n    }]);\n\n    return Dropdown;\n}();\n\nexports.default = Dropdown;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2FwcC92aWV3cy9Ecm9wZG93bi5qcz9kN2E4Il0sIm5hbWVzIjpbIkRyb3Bkb3duIiwidm5vZGUiLCJhY3RpdmVJdGVtIiwiYXR0cnMiLCJpdGVtcyIsImlkIiwib25jbGlja0NoaWxkIiwiZHJvcFdpZHRoIiwiT2JqZWN0IiwiYXNzaWduIiwic3R5bGUiLCJ3aWR0aCIsIm1hcCIsIml0ZW0iLCJ2YWx1ZSIsIm9uY2xpY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7Ozs7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFcUJBLFE7Ozs7Ozs7K0JBQ1ZDLEssRUFBTztBQUNWLGlCQUFLQyxVQUFMLEdBQWtCRCxNQUFNRSxLQUFOLENBQVlDLEtBQVosQ0FBa0IsQ0FBbEIsQ0FBbEI7QUFDSDs7OzZCQUVJSCxLLEVBQU87QUFBQTs7QUFBQSwrQkFDbUNBLE1BQU1FLEtBRHpDO0FBQUEsZ0JBQ0hFLEVBREcsZ0JBQ0hBLEVBREc7QUFBQSxnQkFDQ0QsS0FERCxnQkFDQ0EsS0FERDtBQUFBLGdCQUNRRSxZQURSLGdCQUNRQSxZQURSO0FBQUEsZ0JBQ3NCQyxTQUR0QixnQkFDc0JBLFNBRHRCOzs7QUFHUixtQkFBTyx1QkFBRSxpQ0FBRixFQUFxQyxDQUN4Qyx1QkFBRSx3Q0FBRixFQUNJQyxPQUFPQyxNQUFQLENBQWNSLE1BQU1FLEtBQXBCLEVBQTJCLEVBQUMsZUFBZSxVQUFoQixFQUEzQixDQURKLEVBQzZELENBQ3JELEtBQUtELFVBRGdELEVBRXJELHVCQUFFLFNBQUYsRUFBYSxFQUFDUSxPQUFPLEVBQUMsZUFBZSxLQUFoQixFQUFSLEVBQWIsQ0FGcUQsQ0FEN0QsQ0FEd0MsRUFNeEMsdUJBQUUsa0JBQUYsRUFBc0IsRUFBQyxtQkFBbUJMLEVBQXBCLEVBQXdCSyxPQUFPLEVBQUNDLE9BQU9KLFNBQVIsRUFBbUIsYUFBYSxDQUFoQyxFQUEvQixFQUF0QixFQUNJSCxNQUFNUSxHQUFOLENBQVUsVUFBQ0MsSUFBRDtBQUFBLHVCQUFVLHVCQUFFLGtCQUFGLEVBQXNCO0FBQ3RDQywyQkFBT0QsSUFEK0I7QUFFdENFLDZCQUFTLG1CQUFNO0FBQ1gsOEJBQUtiLFVBQUwsR0FBa0JXLElBQWxCO0FBQ0FQLHFDQUFhTyxJQUFiO0FBQ0gscUJBTHFDO0FBTXRDSCwyQkFBTyxFQUFDLGdCQUFnQixNQUFqQjtBQU4rQixpQkFBdEIsRUFPakJHLElBUGlCLENBQVY7QUFBQSxhQUFWLENBREosQ0FOd0MsQ0FBckMsQ0FBUDtBQWlCSDs7Ozs7O2tCQXpCZ0JiLFEiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSBmcm9tICdtaXRocmlsJ1xuXG5pbXBvcnQge21lcmdlQXR0cmlidXRlc30gZnJvbSBcIi4uL2NvbW1vblwiO1xuXG4vLyBJbnRlcmZhY2Ugc3BlY2lmaWNhdGlvblxuXG4vLyBgYGBcbi8vIG0oRHJvcGRvd24sIHtcbi8vICAgICBpZDogJ2Ryb3Bkb3duSUQnIChhcHBsaWVkIHRvIGJ1dHRvbiBhbmQgc2VsZWN0b3JzKVxuLy8gICAgIGl0ZW1zOiBbJ0l0ZW0gMScsICdJdGVtIDInLCAnSXRlbSAzJ10sXG4vLyAgICAgb25jbGlja0NoaWxkOiAodmFsdWUpID0+IGNvbnNvbGUubG9nKHZhbHVlICsgXCIgd2FzIGNsaWNrZWQuXCIpXG4vLyAgICAgZHJvcFdpZHRoOiAxMDAgKHNldHMgdGhlIHdpZHRoIG9mIHRoZSBkcm9wZG93bilcbi8vICAgICB9KVxuLy8gIGBgYFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wZG93biB7XG4gICAgb25pbml0KHZub2RlKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlSXRlbSA9IHZub2RlLmF0dHJzLml0ZW1zWzBdXG4gICAgfVxuXG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICBsZXQge2lkLCBpdGVtcywgb25jbGlja0NoaWxkLCBkcm9wV2lkdGh9ID0gdm5vZGUuYXR0cnM7XG5cbiAgICAgICAgcmV0dXJuIG0oJy5kcm9wZG93bltzdHlsZT1kaXNwbGF5OiBibG9ja10nLCBbXG4gICAgICAgICAgICBtKCdidXR0b24uYnRuLmJ0bi1kZWZhdWx0LmRyb3Bkb3duLXRvZ2dsZScsXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih2bm9kZS5hdHRycywgeydkYXRhLXRvZ2dsZSc6ICdkcm9wZG93bid9KSwgW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIG0oJ2IuY2FyZXQnLCB7c3R5bGU6IHsnbWFyZ2luLWxlZnQnOiAnNXB4J319KV0pLFxuXG4gICAgICAgICAgICBtKCd1bC5kcm9wZG93bi1tZW51JywgeydhcmlhLWxhYmVsbGVkYnknOiBpZCwgc3R5bGU6IHt3aWR0aDogZHJvcFdpZHRoLCAnbWluLXdpZHRoJzogMH19LFxuICAgICAgICAgICAgICAgIGl0ZW1zLm1hcCgoaXRlbSkgPT4gbSgnbGkuZHJvcGRvd24taXRlbScsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSXRlbSA9IGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7J3BhZGRpbmctbGVmdCc6ICcxMHB4J31cbiAgICAgICAgICAgICAgICB9LCBpdGVtKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2NvbW1vbi9hcHAvdmlld3MvRHJvcGRvd24uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY29tbW9uL2Nzcy9jb21tb24uY3NzPzhjNTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXNzZXRzL2NvbW1vbi9jc3MvY29tbW9uLmNzc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb2Nlc3MvYnJvd3Nlci5qcz84MmU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVUiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9), __webpack_require__(29)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n')},function(module,exports,__webpack_require__){eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(30);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanM/YjA4OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n")}]);