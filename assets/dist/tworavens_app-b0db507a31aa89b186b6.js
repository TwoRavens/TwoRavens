!function(Q){function I(B){if(F[B])return F[B].exports;var C=F[B]={i:B,l:!1,exports:{}};return Q[B].call(C.exports,C,C.exports,I),C.l=!0,C.exports}var F={};I.m=Q,I.c=F,I.i=function(Q){return Q},I.d=function(Q,F,B){I.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:B})},I.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(F,"a",F),F},I.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},I.p="",I(I.s=11)}([function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(setImmediate, global) {;(function() {\n"use strict"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== "object") return Vnode("#", undefined, undefined, node === false ? "" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*("|\'|)((?:\\\\["\'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction compileSelector(selector) {\n\tvar match, tag = "div", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === "" && value !== "") tag = value\n\t\telse if (type === "#") attrs.id = value\n\t\telse if (type === ".") classes.push(value)\n\t\telse if (match[3][0] === "[") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\(["\'])/g, "$1").replace(/\\\\\\\\/g, "\\\\")\n\t\t\tif (match[4] === "class") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(" ")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + " " + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== "key") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {\n\t\tthrow Error("The selector must be either a string or a component.");\n\t}\n\tif (typeof selector === "string") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === "string") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = ""\n\treturn Vnode("<", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode("[", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")\n\tif (typeof executor !== "function") throw new TypeError("executor must be a function")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {\n\t\t\t\t\tif (value === self) throw new TypeError("Promise can\'t be resolved w/ itself")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== "function") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === "function" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== "undefined") {\n\tif (typeof window.Promise === "undefined") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== "undefined") {\n\tif (typeof global.Promise === "undefined") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== "[object Object]") return ""\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join("&")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === "[object Object]") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp("^file://", "i")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === "function") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === "string") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = "GET"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === "GET" || args.method === "TRACE") ? false : (typeof args.useBody === "boolean" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== "function") args.serialize = typeof FormData !== "undefined" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== "function") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== "function") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === "boolean" ? args.async : true, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody) {\n\t\t\t\txhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize) {\n\t\t\t\txhr.setRequestHeader("Accept", "application/json, text/*")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === "function") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don\'t throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++\n\t\t\tvar script = $window.document.createElement("script")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error("JSONP request failed"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || "callback"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== "") {\n\t\t\tvar prefix = url.indexOf("?") < 0 ? "?" : "&"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== "" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === "function") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar nameSpace = {\n\t\tsvg: "http://www.w3.org/2000/svg",\n\t\tmath: "http://www.w3.org/1998/Math/MathML"\n\t}\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === "string") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase "#": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase "<": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase "[": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}[match1[1]] || "div"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tns = getNameSpace(vnode) || ns\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== "") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === "function") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === "string") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase "#": updateText(old, vnode); break\n\t\t\t\t\tcase "<": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase "[": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\t\tif (vnode.tag === "textarea") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== "") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === "<") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeremove === "function") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === "string") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === "function") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onremove === "function") vnode._state.onremove.call(vnode.state, vnode)\n\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\telse {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === "key" || key2 === "is" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== "object" || typeof value === "undefined" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(":")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === "xlink") {\n\t\t\telement.setAttributeNS("http://www.w3.org/1999/xlink", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === "o" && key2[1] === "n" && typeof value === "function") updateEvent(vnode, key2, value)\n\t\telse if (key2 === "style") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\tif (key2 === "value") {\n\t\t\t\tvar normalized0 = "" + value // eslint-disable-line no-implicit-coercion\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "select") {\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tif (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "option" && old != null && vnode.dom.value === normalized0) return\n\t\t\t}\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === "input" && key2 === "type") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === "boolean") {\n\t\t\t\tif (value) element.setAttribute(key2, "")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === "className" ? "class" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === "select" && attrs2 != null) {\n\t\t\tif ("value" in attrs2) setAttr(vnode, "value", null, attrs2.value, undefined)\n\t\t\tif ("selectedIndex" in attrs2) setAttr(vnode, "selectedIndex", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === "className") key2 = "class"\n\t\t\t\t\tif (key2[0] === "o" && key2[1] === "n" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== "key") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === "href" || attr === "list" || attr === "form" || attr === "width" || attr === "height"// || attr === "type"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf("-") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = "", old = null\n\t\tif (style == null) element.style.cssText = ""\n\t\telse if (typeof style === "string") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === "string") element.style.cssText = ""\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== "string") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = ""\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== "function" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === "function" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === "function") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === "function") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === "function") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === "function") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeupdate === "function") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\tvar namespace = dom.namespaceURI\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = ""\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)\n\t\tdom.vnodes = vnodes\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t\tif ($doc.activeElement !== active) active.focus()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === "function" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw === false) e.redraw = undefined\n\t\telse redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== "function") throw new Error("m.mount(element, component) expects a component, not a vnode")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === "" || string == null) return {}\n\tif (string.charAt(0) === "?") string = string.slice(1)\n\tvar entries = string.split("&"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split("=")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""\n\t\tif (value === "true") value = true\n\t\telse if (value === "false") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf("[") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === "") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === "function"\n\tvar callAsync0 = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === "pathname" && data[0] !== "/") data = "/" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf("?")\n\t\tvar hashIndex = path.indexOf("#")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: "#!"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase "#": return normalize1("hash").slice(router.prefix.length)\n\t\t\tcase "?": return normalize1("search").slice(router.prefix.length) + normalize1("hash")\n\t\t\tdefault: return normalize1("pathname").slice(router.prefix.length) + normalize1("search") + normalize1("hash")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += "?" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += "#" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp("^" + route0.replace(/:[^\\/]+?\\.{3}/g, "(.*?)").replace(/:[^\\/]+/g, "([^\\\\/]+)") + "\\/?$")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, "")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === "#") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error("Could not resolve default route " + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === "function") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, "div")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute("href", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute("href")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== "undefined" && typeof key3 !== "undefined") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = "1.1.3"\nm.vnode = Vnode\nif (true) module["exports"] = m\nelse window.m = m\n}());\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14).setImmediate, __webpack_require__(3)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\nexports.fakeClick = exports.hexToRgba = exports.popoverContent = exports.summary = exports.legend = exports.ta2stuff = exports.spliceLinksForNode = exports.findNode = exports.findNodeIndex = exports.clickVar = exports.reset = exports.nodes = exports.allNodes = exports.valueKey = exports.zparams = exports.logArray = exports.righttab = exports.summaryHold = exports.subset = exports.lefttab = exports.timeColor = exports.varColor = exports.nomColor = exports.gr2Color = exports.gr1Color = exports.dvColor = exports.csColor = exports.cdb = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();\n\nvar _arguments = arguments;\nexports.main = main;\nexports.getVariableData = getVariableData;\nexports.forceSwitch = forceSwitch;\nexports.lockDescription = lockDescription;\nexports.estimate = estimate;\nexports.runPreprocess = runPreprocess;\nexports.erase = erase;\nexports.tabLeft = tabLeft;\nexports.tabRight = tabRight;\nexports.panelPlots = panelPlots;\nexports.borderState = borderState;\nexports.subsetSelect = subsetSelect;\nexports.endsession = endsession;\nexports.listpipelines = listpipelines;\nexports.executepipeline = executepipeline;\nexports.expandrightpanel = expandrightpanel;\nexports.bivariatePlot = bivariatePlot;\nexports.setxTable = setxTable;\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _plots = __webpack_require__(2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// hostname default - the app will use it to obtain the variable metadata\n// (ddi) and pre-processed data info if the file id is supplied as an\n// argument (for ex., gui.html?dfId=17), but hostname isn\'t.\n// Edit it to suit your installation.\n// (NOTE that if the file id isn\'t supplied, the app will default to the\n// local files specified below!)\n// NEW: it is also possible now to supply complete urls for the ddi and\n// the tab-delimited data file; the parameters are ddiurl and dataurl.\n// These new parameters are optional. If they are not supplied, the app\n// will go the old route - will try to cook standard dataverse urls\n// for both the data and metadata, if the file id is supplied; or the\n// local files if nothing is supplied.\n\n\n//-------------------------------------------------\n// NOTE: global variables are now set in the index.html file.\n//    Developers, see /template/index.html\n//-------------------------------------------------\n\n// for debugging - if in production, prints args and returns them\nvar cdb = exports.cdb = function cdb(_) {\n    return production || console.log.apply(undefined, _arguments) && _arguments;\n};\n\nvar k = 4; // strength parameter for group attraction/repulsion\n\n// initial color scale used to establish the initial colors of nodes\n// allNodes.push() below establishes a field for the master node array allNodes called "nodeCol" and assigns a color from this scale to that field\n// everything there after should refer to the nodeCol and not the color scale, this enables us to update colors and pass the variable type to R based on its coloring\nvar colors = d3.scale.category20();\nvar csColor = exports.csColor = \'#419641\';\nvar dvColor = exports.dvColor = \'#28a4c9\';\nvar gr1Color = exports.gr1Color = \'#14bdcc\'; // initially was #24a4c9\', but that is dvColor, and we track some properties by color assuming them unique\nvar gr1Opacity = [0, 1];\nvar gr2Color = exports.gr2Color = \'#ffcccc\';\nvar gr2Opacity = [0, 1];\n\nvar grayColor = \'#c0c0c0\';\nvar nomColor = exports.nomColor = \'#ff6600\';\nvar varColor = exports.varColor = \'#f0f8ff\'; // d3.rgb("aliceblue");\nvar taggedColor = \'#f5f5f5\'; // d3.rgb("whitesmoke");\nvar timeColor = exports.timeColor = \'#2d6ca2\';\n\nvar lefttab = exports.lefttab = \'tab1\'; // current tab in left panel\nvar subset = exports.subset = false;\nvar summaryHold = exports.summaryHold = false;\nvar righttab = exports.righttab = \'btnModels\'; // current tab in right panel\n\n// transformation toolbar options\nvar t = void 0,\n    typeTransform = void 0;\nvar transformList = \'log(d) exp(d) d^2 sqrt(d) interact(d,e)\'.split(\' \');\nvar transformVar = \'\';\n\n// var list for each space contain variables in original data\n// plus trans in that space\nvar trans = [];\nvar preprocess = {}; // hold pre-processed data\nvar spaces = [];\n\n// layout function constants\nvar layoutAdd = "add";\nvar layoutMove = "move";\n\n// Radius of circle\nvar allR = 40;\n\nvar ind1 = [(allR + 30) * Math.cos(1.3), -1 * (allR + 30) * Math.sin(1.3), 5]; // cx, cy, r  values for indicator lights\nvar ind2 = [(allR + 30) * Math.cos(1.1), -1 * (allR + 30) * Math.sin(1.1), 5]; // cx, cy, r  values for indicator lights\n\n\n// space index\nvar myspace = 0;\n\nvar forcetoggle = ["true"];\nvar locktoggle = true;\nvar priv = true;\n\nvar logArray = exports.logArray = [];\nvar zparams = exports.zparams = {\n    zdata: [],\n    zedges: [],\n    ztime: [],\n    znom: [],\n    zcross: [],\n    zmodel: "",\n    zvars: [],\n    zdv: [],\n    zgroup1: [],\n    zgroup2: [], // hard coding to two groups for present experiments, but will eventually make zgroup array of arrays, with zgroup.lenght the number of groups\n    zdataurl: "",\n    zd3mdata: "", //these take the place of zdataurl for d3m, because data is in two placees. eventually will generalize\n    zd3mtarget: "",\n    zsubset: [],\n    zsetx: [],\n    zmodelcount: 0,\n    zplot: [],\n    zsessionid: "",\n    zdatacite: ""\n};\n\nvar modelCount = 0;\nvar valueKey = exports.valueKey = [];\nvar allNodes = exports.allNodes = [];\nvar allResults = [];\nvar nodes = exports.nodes = [];\nvar links = [];\nvar mods = {};\nvar estimated = false;\nvar rightClickLast = false;\nvar selInteract = false;\nvar callHistory = []; // transform and subset calls\nvar mytarget = "";\n\n//eventually read this from the schema with real descriptions\n// metrics, tasks, and subtasks as specified in D3M schemas\n// MEAN SQUARED ERROR IS SET TO SAME AS RMSE. MSE is in schema but not proto\nvar d3mMetrics = { metricUndefined: ["description", "METRIC_UNDEFINED", 0],\n    accuracy: ["description", "ACCURACY", 1],\n    f1: ["description", "F1", 2],\n    f1Micro: ["description", "F1_MICRO", 3],\n    f1Macro: ["description", "F1_MACRO", 4],\n    rocAuc: ["description", "ROC_AUC", 5],\n    rocAucMicro: ["description", "ROC_AUC_MICRO", 6],\n    rocAucMacro: ["description", "ROC_AUC_MACRO", 7],\n    meanSquaredError: ["description", "MEAN_SQUARED_ERROR", 8],\n    rootMeanSquaredError: ["description", "ROOT_MEAN_SQUARED_ERROR", 8],\n    rootMeanSquaredErrorAvg: ["description", "ROOT_MEAN_SQUARED_ERROR_AVG", 9],\n    meanAbsoluteError: ["description", "MEAN_ABSOLUTE_ERROR", 10],\n    rSquared: ["description", "R_SQUARED", 11],\n    normalizedMutualInformation: ["description", "NORMALIZED_MUTUAL_INFORMATION", 12],\n    jaccardSimilarityScore: ["description", "JACCARD_SIMILARITY_SCORE", 13],\n    executionTime: ["description", "EXECUTION_TIME", 14] };\n\nvar d3mTaskType = { taskTypeUndefined: ["description", "TASK_TYPE_UNDEFINED", 0], classification: ["description", "CLASSIFICATION", 1],\n    regression: ["description", "REGRESSION", 2],\n    similarityMatching: ["description", "SIMILARITY_MATCHING", 3],\n    linkPrediction: ["description", "LINK_PREDICTION", 4],\n    vertexNomination: ["description", "VERTEX_NOMINATION", 5],\n    communityDetection: ["description", "COMMUNITY_DETECTION", 6],\n    graphMatching: ["description", "GRAPH_MATCHING", 7],\n    timeseriesForecasting: ["description", "TIMESERIES_FORECASTING", 8],\n    collaborativeFiltering: ["description", "COLLABORATIVE_FILTERING", 9] };\n\nvar d3mTaskSubtype = { taskSubtypeUndefined: ["description", "TASK_SUBTYPE_UNDEFINED", 0],\n    subtypeNone: ["description", "NONE", 1],\n    binary: ["description", "BINARY", 2],\n    multiClass: ["description", "MULTICLASS", 3],\n    multiLabel: ["description", "MULTILABEL", 4],\n    uniVariate: ["description", "UNIVARIATE", 5],\n    multiVariate: ["description", "MULTIVARIATE", 6],\n    overlapping: ["description", "OVERLAPPING", 7],\n    nonOverlapping: ["description", "NONOVERLAPPING", 8] };\n\nvar d3mOutputType = { outputUndefined: ["description", "OUTPUT_TYPE_UNDEFINED ", 0],\n    classLabel: ["description", "CLASS_LABEL", 1],\n    probability: ["description", "PROBABILITY", 2],\n    real: ["description", "REAL", 3],\n    nodeID: ["description", "NODE_ID", 4],\n    vectorClassLabel: ["description", "VECTOR_CLASS_LABEL", 5],\n    vectorStochastic: ["description", "VECTOR_STOCHASTIC", 6],\n    vectorReal: ["description", "VECTOR_REAL", 7],\n    file: ["description", "FILE", 8] };\n\nvar d3mProblemDescription = {\n    taskType: [2, "DEFAULT"],\n    taskSubtype: [1, "DEFAFULT"],\n    outputType: [3, "DEFAULT"],\n    metric: [4, "DEFAULT"],\n    taskDescription: "" };\n\nvar svg, width, height, div, estimateLadda, selectLadda;\nvar arc1, arc3, arc4, arcInd1, arcInd2;\n\nvar arcInd1Limits = [0, 0.3];\nvar arcInd2Limits = [0.35, 0.65];\n\nvar byId = function byId(id) {\n    return document.getElementById(id);\n};\n\n// page reload linked to btnReset\nvar reset = exports.reset = function reloadPage() {\n    location.reload();\n};\n\nvar dataurl = "";\nfunction main(fileid, hostname, ddiurl, dataurl, apikey) {\n    dataurl = dataurl;\n    if (production && fileid == "") {\n        alert("Error: No fileid has been provided.");\n        throw new Error("Error: No fileid has been provided.");\n    }\n\n    var dataverseurl = hostname ? "https://" + hostname : production ? DATAVERSE_URL : "http://localhost:8080";\n\n    if (fileid && !dataurl) {\n        // file id supplied; assume we are dealing with dataverse and cook a standard dataverse data access url\n        // with the fileid supplied and the hostname we have supplied or configured\n        dataurl = dataverseurl + "/api/access/datafile/" + fileid;\n        // rp; temporarily remove this\n        dataurl = dataurl + "?key=" + apikey;\n    }\n    cdb(\'--dataurl: \' + dataurl);\n    cdb(\'--dataverseurl: \' + dataverseurl);\n    svg = d3.select("#whitespace");\n\n    var tempWidth = d3.select("#main.left").style("width");\n    width = tempWidth.substring(0, tempWidth.length - 2);\n    height = $(window).height() - 120; // Hard coding for header and footer and bottom margin.\n\n    estimateLadda = Ladda.create(byId("btnEstimate"));\n    selectLadda = Ladda.create(byId("btnSelect"));\n\n    var colorTime = false;\n    var colorCS = false;\n\n    var depVar = false;\n    var subsetdiv = false;\n    var setxdiv = false;\n\n    // width and height for histgrams\n    var barwidth = 1.3 * allR;\n    var barheight = 0.5 * allR;\n    var barPadding = 0.35;\n    var barnumber = 7;\n\n    // arcs for denoting pebble characteristics\n    var arc = function arc(start, end) {\n        return d3.svg.arc().innerRadius(allR + 5).outerRadius(allR + 20).startAngle(start).endAngle(end);\n    };\n    var arcInd = function arcInd(arclimits) {\n        return d3.svg.arc().innerRadius(allR + 22).outerRadius(allR + 37).startAngle(arclimits[0]).endAngle(arclimits[1]);\n    };\n\n    var _ref = [arc(0, 3.2), arc(1.1, 2.2)],\n        arc0 = _ref[0],\n        arc2 = _ref[1];\n    //arc1 = arc(1.3, 2.3);\n\n    arc1 = arc(0, 1);\n    arc3 = arc(2.3, 3.3);\n    arc4 = arc(4.3, 5.3);\n\n    arcInd1 = arcInd(arcInd1Limits);\n    arcInd2 = arcInd(arcInd2Limits);\n\n    // indicators for showing membership above arcs\n    // let indicator = (degree) => d3.svg.circle()\n    //     .cx( allR )//(allR+35) * Math.sin(degree))\n    //     .cy( allR )//(allR+35) * Math.cos(degree))\n    //     .r(3);\n    // ind1 = indicator(1);\n    // ind2 = indicator(1.2);\n\n    // from .csv\n    var dataset2 = [];\n    var lablArray = [];\n    var hold = [];\n    var subsetNodes = [];\n\n    // collapsable user log\n    $(\'#collapseLog\').on(\'shown.bs.collapse\', function () {\n        return d3.select("#collapseLog div.panel-body").selectAll("p").data(logArray).enter().append("p").text(function (d) {\n            return d;\n        });\n    });\n    $(\'#collapseLog\').on(\'hidden.bs.collapse\', function () {\n        return d3.select("#collapseLog div.panel-body").selectAll("p").remove();\n    });\n\n    //set start from user input, then assume locations are consistent based on d3m directory structure (alternatively can make each of these locations be set by user)\n    var configurations = {};\n    var d3mRootPath = "";\n    var d3mDataName = "";\n    var d3mData = "";\n    var d3mTarget = "";\n    var d3mPreprocess = "";\n    var d3mPS = "";\n    var d3mDS = "";\n\n    // default to California PUMS subset (should, doesn\'t actually do that)\n    var data = \'data/\' + (false ? \'PUMS5small\' : \'fearonLaitin\');\n    var metadataurl = ddiurl || (fileid ? dataverseurl + \'/api/meta/datafile/\' + fileid : data + \'.xml\');\n    // read pre-processed metadata and data\n    var pURL = dataurl ? dataurl + \'&format=prep\' : data + \'.json\';\n    cdb(\'pURL: \' + pURL);\n\n    console.log("pURL is: " + pURL);\n\n    if (d3m_mode) {\n        pURL = d3mPreprocess;\n        // zparams.zdataurl = start+\'/data/trainDatamerged.tsv\';\n        zparams.zdata = d3mDataName;\n    } else if (!production) {\n        zparams.zdataurl = \'data/fearonLaitin.tsv\';\n    }\n\n    // loads all external data: metadata (DVN\'s ddi), preprocessed (for plotting distributions), and zeligmodels (produced by Zelig) and initiates the data download to the server\n    Promise.resolve(d3m_mode && _mithril2.default.request({\n        method: "POST",\n        url: "/config/d3m-config/json/latest"\n    }).then(function (result) {\n        configurations = JSON.parse(JSON.stringify(result));\n        d3mRootPath = configurations.training_data_root;\n        d3mRootPath = d3mRootPath.replace(/\\/data/, \'\');\n        d3mDataName = configurations.name;\n        d3mData = configurations.training_data_root + "/trainData.csv";\n        d3mTarget = result.training_data_root + "/trainTargets.csv";\n        d3mPS = configurations.problem_schema;\n        d3mDS = configurations.dataset_schema;\n\n        // doing this for now, assuming everything after TwoRavens is readable\n        d3mPS = d3mPS.split("TwoRavens/").pop();\n        d3mDS = d3mDS.split("TwoRavens/").pop();\n        d3mTarget = d3mTarget.split("TwoRavens/").pop();\n        d3mData = d3mData.split("TwoRavens/").pop();\n        d3mRootPath = d3mRootPath.split("TwoRavens/").pop();\n        pURL = \'rook-custom/rook-files/\' + d3mDataName + \'/preprocess/preprocess.json\';\n        d3mPreprocess = pURL;\n        zparams.zd3mdata = d3mData;\n        zparams.zd3mtarget = d3mTarget;\n    })).then(function (_) {\n        return _mithril2.default.request(pURL);\n    })\n    // do nothing if preprocess.json already exists, else runPreprocess\n    .then(null, function (_) {\n        return runPreprocess(d3mData, d3mTarget, d3mDataName);\n    }).then(function (data) {\n        return readPreprocess(data);\n    }).then(function () {\n        return new Promise(function (resolve, reject) {\n            return d3.xml(metadataurl, \'application/xml\', function (xml) {\n                var vars = Object.keys(preprocess); // this doesn\'t come from xml, but from preprocessed json\n                // the labels, citations, and file name come from the \'xml\' (metadataurl), which is the file from the data repo\n                // however, TwoRavens should function using only the data that comes from our preprocess script, which is the \'json\' (pURL)\n                // for now the metadataurl is still Fearon & Laitin\n                var temp = xml.documentElement.getElementsByTagName("fileName");\n                if (!d3m_mode) zparams.zdata = temp[0].childNodes[0].nodeValue;\n\n                var cite = xml.documentElement.getElementsByTagName("biblCit");\n                // clean citation so POST is valid json\n                zparams.zdatacite = cite[0].childNodes[0].nodeValue.replace(/\\&/g, "and").replace(/\\;/g, ",").replace(/\\%/g, "-");\n                $(\'#cite div.panel-body\').text(zparams.zdatacite);\n\n                // dataset name trimmed to 12 chars\n                var dataname = zparams.zdata;\n                if (!d3m_mode) dataname = zparams.zdata.replace(/\\.(.*)/, \'\'); // drop file extension\n                d3.select("#dataName").html(dataname);\n\n                // Put dataset name, from meta-data, into page title\n                d3.select("title").html("TwoRavens " + dataname);\n                // temporary values for hold that correspond to histogram bins\n                hold = [.6, .2, .9, .8, .1, .3, .4];\n                for (var i = 0; i < vars.length; i++) {\n                    // valueKey[i] = vars[i].attributes.name.nodeValue;\n                    // lablArray[i] = varsXML[i].getElementsByTagName("labl").length == 0 ?\n                    // "no label" :\n                    // varsXML[i].getElementsByTagName("labl")[0].childNodes[0].nodeValue;\n                    // let datasetcount = d3.layout.histogram()\n                    //     .bins(barnumber).frequency(false)\n                    //     ([0, 0, 0, 0, 0]);\n                    valueKey[i] = vars[i];\n                    lablArray[i] = "no label";\n                    // contains all the preprocessed data we have for the variable, as well as UI data pertinent to that variable,\n                    // such as setx values (if the user has selected them) and pebble coordinates\n                    var obj = {\n                        id: i,\n                        reflexive: false,\n                        name: valueKey[i],\n                        labl: lablArray[i],\n                        data: [5, 15, 20, 0, 5, 15, 20],\n                        count: hold,\n                        nodeCol: colors(i),\n                        baseCol: colors(i),\n                        strokeColor: _plots.selVarColor,\n                        strokeWidth: "1",\n                        subsetplot: false,\n                        subsetrange: ["", ""],\n                        setxplot: false,\n                        setxvals: ["", ""],\n                        grayout: false,\n                        group1: false,\n                        group2: false,\n                        forefront: false\n                    };\n                    jQuery.extend(true, obj, preprocess[valueKey[i]]);\n                    allNodes.push(obj);\n                };\n                resolve();\n            });\n        });\n    }).then(function () {\n        return new Promise(function (resolve, reject) {\n            // read zelig models and populate model list in right panel\n            d3.json("data/zelig5models.json", function (err, data) {\n                if (err) return reject(err);\n                cdb("zelig models json: ", data);\n                for (var key in data.zelig5models) {\n                    if (data.zelig5models.hasOwnProperty(key)) mods[data.zelig5models[key].name[0]] = data.zelig5models[key].description[0];\n                }resolve();\n            });\n        });\n    }).then(function () {\n        return new Promise(function (resolve, reject) {\n            if (d3m_mode) return resolve();\n            d3.json("data/zelig5choicemodels.json", function (err, data) {\n                if (err) return reject(err);\n                cdb("zelig choice models json: ", data);\n                for (var key in data.zelig5choicemodels) {\n                    if (data.zelig5choicemodels.hasOwnProperty(key)) mods[data.zelig5choicemodels[key].name[0]] = data.zelig5choicemodels[key].description[0];\n                }scaffolding(layout);\n                dataDownload();\n                resolve();\n            });\n        });\n    }).then(function () {\n        return new Promise(function (resolve, reject) {\n            // read in problem schema and we\'ll make a call to start the session with TA2. if we get this far, data are guaranteed to exist for the frontend\n            if (!d3m_mode) return resolve();\n\n            d3.json(d3mPS, function (_, data) {\n                console.log("prob schema data: ", data);\n                mytarget = data.target.field;\n                var aTag = document.createElement(\'a\');\n                aTag.setAttribute(\'href\', d3mRootPath + \'/\' + data.descriptionFile);\n                aTag.setAttribute(\'id\', "probdesc");\n                aTag.setAttribute(\'target\', "_blank");\n                aTag.textContent = "Problem Description";\n                document.getElementById("ticker").appendChild(aTag);\n\n                if (data.taskType in d3mTaskType) {\n                    d3mProblemDescription.taskType = data.taskType; //[d3mTaskType[data.taskType][2],d3mTaskType[data.taskType][1]]; console.log(d3mProblemDescription);\n                } else {\n                    d3mProblemDescription.taskType = "taskTypeUndefined";\n                    //   alert("Specified task type, " + data.taskType + ", is not valid.");\n                }\n\n                if (data.taskSubType in d3mTaskSubtype) {\n                    d3mProblemDescription.taskSubtype = data.taskSubType;\n                    //[d3mTaskSubtype[data.taskSubType][2],d3mTaskSubtype[data.taskSubType][1]];\n                } else {\n                    d3mProblemDescription.taskSubtype = "taskSubtypeUndefined";\n                    //     alert("Specified task subtype, " + data.taskSubType + ", is not valid.")\n                }\n                if (data.metric in d3mMetrics) {\n                    d3mProblemDescription.metric = data.metric; //[d3mMetrics[data.metric][2],d3mMetrics[data.metric][1]];\n                } else {\n                    d3mProblemDescription.metric = "metricUndefined";\n                    // alert("Specified metric type, " + data.metric + ", is not valid.");\n                }\n                if (data.outputType in d3mOutputType) {\n                    d3mProblemDescription.outputType = data.outputType; //[d3mOutputType[data.outputType][2],d3mOutputType[data.outputType][1]];\n                } else {\n                    d3mProblemDescription.outputType = "outputUndefined";\n                    //  alert("Specified output type, " + data.outputType + ", is not valid.");\n                }\n\n                d3mProblemDescription.taskDescription = data.descriptionFile;\n\n                document.getElementById("btnType").click();\n                resolve();\n            });\n        });\n    }).then(function () {\n        return new Promise(function (resolve, reject) {\n            if (!d3m_mode) return resolve();\n            // this is our call to django to start the session\n            //rpc StartSession(SessionRequest) returns (SessionResponse) {}\n            var user_agent = "some agent";\n            var version = "some version";\n            var SessionRequest = { user_agent: user_agent, version: version };\n\n            var jsonout = JSON.stringify(SessionRequest);\n            var urlcall = d3mURL + "/startsession";\n            var solajsonout = "grpcrequest=" + jsonout;\n            console.log("SessionRequest: ");\n            console.log(solajsonout);\n            console.log("urlcall: ", urlcall);\n\n            function ssSuccess(btn, SessionResponse) {\n                zparams.zsessionid = SessionResponse.context.sessionId;\n                console.log("startsession: ", SessionResponse);\n\n                scaffolding(layout);\n                zPop(); // called in dataDownload, but required to be called so moved here for d3m_mode\n                //dataDownload();  we do not call dataDownload in d3m_mode. we assume we have the path to the data already\n                resolve();\n            }\n\n            function ssFail(btn) {\n                alert("StartSession has failed.");\n                resolve();\n            }\n\n            makeCorsRequest(urlcall, "nobutton", ssSuccess, ssFail, solajsonout);\n        });\n    });\n}\n\nvar $fill = function $fill(obj, op, d1, d2) {\n    return d3.select(obj).transition().attr(\'fill-opacity\', op).delay(d1).duration(d2);\n};\nvar fill = function fill(d, id, op, d1, d2) {\n    return $fill(\'#\' + id + d.id, op, d1, d2);\n};\nvar fillThis = function fillThis(self, op, d1, d2) {\n    return $fill(self, op, d1, d2);\n};\n\n// scaffolding is called after all external data are guaranteed to have been read to completion. this populates the left panel with variable names, the right panel with model names, the transformation tool, an the associated mouseovers. its callback is layout(), which initializes the modeling space\nfunction scaffolding(callback) {\n    var _this = this;\n\n    // establishing the transformation element\n    d3.select("#transformations").append("input").attr("id", "tInput").attr("class", "form-control").attr("type", "text").attr("value", "Variable transformation");\n\n    // variable dropdown\n    d3.select("#transformations").append("ul").attr("id", "transSel").style("display", "none").style("background-color", varColor).selectAll(\'li\').data(["a", "b"]) //set to variables in model space as they\'re added\n    .enter().append("li").text(function (d) {\n        return d;\n    });\n\n    // function dropdown\n    d3.select("#transformations").append("ul").attr("id", "transList").style("display", "none").style("background-color", varColor).selectAll(\'li\').data(transformList).enter().append("li").text(function (d) {\n        return d;\n    });\n\n    $(\'#tInput\').click(function () {\n        var t = byId(\'transSel\').style.display;\n        if (t !== "none") {\n            // if variable list is displayed when input is clicked...\n            $(\'#transSel\').fadeOut(100);\n            return false;\n        }\n        var t1 = byId(\'transList\').style.display;\n        if (t1 !== "none") {\n            // if function list is displayed when input is clicked...\n            $(\'#transList\').fadeOut(100);\n            return false;\n        }\n\n        // highlight the text\n        $(_this).select();\n        var pos = $(\'#tInput\').offset();\n        pos.top += $(\'#tInput\').width();\n        $(\'#transSel\').fadeIn(100);\n        return false;\n    });\n\n    var n;\n    $(\'#tInput\').keyup(function (evt) {\n        var t = byId(\'transSel\').style.display;\n        var t1 = byId(\'transList\').style.display;\n        if (t != "none") $(\'#transSel\').fadeOut(100);else if (t1 != "none") $(\'#transList\').fadeOut(100);\n\n        if (evt.keyCode == 13) {\n            // keyup on Enter\n            n = $(\'#tInput\').val();\n            var t = transParse(n = n);\n            if (!t) return;\n            transform(n = t.slice(0, t.length - 1), t = t[t.length - 1], typeTransform = false);\n        }\n    });\n\n    var t;\n    $(\'#transList li\').click(function (evt) {\n        // if interact is selected, show variable list again\n        if ($(this).text() == "interact(d,e)") {\n            $(\'#tInput\').val(tvar.concat(\'*\'));\n            selInteract = true;\n            $(this).parent().fandeOut(100);\n            $(\'#transSel\').fadeIn(100);\n            evt.stopPropagation();\n            return;\n        }\n\n        var tvar = $(\'#tInput\').val();\n        var tfunc = $(this).text().replace("d", "_transvar0");\n        var tcall = $(this).text().replace("d", tvar);\n        $(\'#tInput\').val(tcall);\n        $(this).parent().fadeOut(100);\n        evt.stopPropagation();\n        transform(n = tvar, t = tfunc, typeTransform = false);\n    });\n\n    d3.select("#models").style(\'height\', 2000).style(\'overfill\', \'scroll\');\n\n    if (!d3m_mode) {\n        d3.select("#models").selectAll("p").data(Object.keys(mods)).enter().append("p").attr("id", "_model_".concat).text(function (d) {\n            return d;\n        }).style(\'background-color\', function (d) {\n            return varColor;\n        }).attr("data-container", "body").attr("data-toggle", "popover").attr("data-trigger", "hover").attr("data-placement", "top").attr("data-html", "true").attr("onmouseover", "$(this).popover(\'toggle\');").attr("onmouseout", "$(this).popover(\'toggle\');").attr("data-original-title", "Model Description").attr("data-content", function (d) {\n            return mods[d];\n        });\n    }\n    if (d3m_mode) {\n\n        //\n\n        toggleRightButtons("tasks");\n\n        d3.select("#types").selectAll("p").data(Object.keys(d3mTaskType)).enter().append("p").attr("id", function (d) {\n            return d + ".types";\n        }).text(function (d) {\n            return d;\n        }).attr(\'class\', function (d) {\n            if (d3mProblemDescription.taskType == d.toString()) {\n                return \'item-select\';\n            } else {\n                if (locktoggle) return \'item-default item-lineout\';\n                return \'item-default\';\n            }\n        }).attr("data-container", "body").attr("data-toggle", "popover").attr("data-trigger", "hover").attr("data-placement", "top").attr("data-html", "true").attr("onmouseover", "$(this).popover(\'toggle\');").attr("onmouseout", "$(this).popover(\'toggle\');").attr("data-original-title", "Task Description").attr("data-content", function (d) {\n            return d3mTaskType[d][1];\n        });\n\n        d3.select("#subtypes").selectAll("p").data(Object.keys(d3mTaskSubtype)).enter().append("p").attr("id", function (d) {\n            return d + ".subtypes";\n        }).text(function (d) {\n            return d;\n        }).attr(\'class\', function (d) {\n            if (d3mProblemDescription.taskSubtype == d.toString()) {\n                return \'item-select\';\n            } else {\n                if (locktoggle) return \'item-default item-lineout\';\n                return \'item-default\';\n            }\n        }).attr("data-container", "body").attr("data-toggle", "popover").attr("data-trigger", "hover").attr("data-placement", "top").attr("data-html", "true").attr("onmouseover", "$(this).popover(\'toggle\');").attr("onmouseout", "$(this).popover(\'toggle\');").attr("data-original-title", "Task Subtype Desc.").attr("data-content", function (d) {\n            return d3mTaskSubtype[d][1];\n        });\n\n        d3.select("#metrics").selectAll("p").data(Object.keys(d3mMetrics)).enter().append("p").attr("id", function (d) {\n            return d + ".metrics";\n        }).text(function (d) {\n            return d;\n        }).attr(\'class\', function (d) {\n            if (d3mProblemDescription.metric == d.toString()) {\n                return \'item-select\';\n            } else {\n                if (locktoggle) return \'item-default item-lineout\';\n                return \'item-default\';\n            }\n        }).attr("data-container", "body").attr("data-toggle", "popover").attr("data-trigger", "hover").attr("data-placement", "top").attr("data-html", "true").attr("onmouseover", "$(this).popover(\'toggle\');").attr("onmouseout", "$(this).popover(\'toggle\');").attr("data-original-title", "Metric Description").attr("data-content", function (d) {\n            return d3mMetrics[d][1];\n        });\n\n        d3.select("#outputs").selectAll("p").data(Object.keys(d3mOutputType)).enter().append("p").attr("id", function (d) {\n            return d + ".outputs";\n        }).text(function (d) {\n            return d;\n        }).attr(\'class\', function (d) {\n            if (d3mProblemDescription.outputType == d.toString()) {\n                return \'item-select\';\n            } else {\n                if (locktoggle) return \'item-default item-lineout\';\n                return \'item-default\';\n            }\n        }).attr("data-container", "body").attr("data-toggle", "popover").attr("data-trigger", "hover").attr("data-placement", "top").attr("data-html", "true").attr("onmouseover", "$(this).popover(\'toggle\');").attr("onmouseout", "$(this).popover(\'toggle\');").attr("data-original-title", "Output Description").attr("data-content", function (d) {\n            return d3mOutputType[d][1];\n        });\n    }\n\n    // call layout() because at this point all scaffolding is up and ready\n    if (typeof callback == "function") {\n        callback(false, true);\n        _mithril2.default.redraw();\n    }\n}\n\nvar splice = function splice(color, text) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n    }\n\n    args.forEach(function (x) {\n        if (color != x[0]) return;\n        var idx = zparams[x[1]].indexOf(text);\n        idx > -1 && zparams[x[1]].splice(idx, 1);\n    });\n};\n\nvar clickVar = exports.clickVar = void 0;\n\nfunction layout(v, v2) {\n    var myValues = [];\n    exports.nodes = nodes = [];\n    links = [];\n\n    svg.append("svg:defs").append("svg:marker").attr("id", "group1-arrow").attr(\'viewBox\', \'0 -5 15 15\').attr("refX", 2.5).attr("refY", 0).attr("markerWidth", 3).attr("markerHeight", 3).attr("orient", "auto").append("path").attr(\'d\', \'M0,-5L10,0L0,5\').style("fill", gr1Color);\n\n    svg.append("svg:defs").append("svg:marker").attr("id", "group2-arrow").attr(\'viewBox\', \'0 -5 15 15\').attr("refX", 2.5).attr("refY", 0).attr("markerWidth", 3).attr("markerHeight", 3).attr("orient", "auto").append("path").attr(\'d\', \'M0,-5L10,0L0,5\').style("fill", gr2Color);\n\n    var line = svg.append("line").style(\'fill\', \'none\').style(\'stroke\', gr1Color).style(\'stroke-width\', 5).attr("marker-end", "url(#group1-arrow)");\n\n    var line2 = svg.append("line").style(\'fill\', \'none\').style(\'stroke\', gr2Color).style(\'stroke-width\', 5).attr("marker-end", "url(#group2-arrow)");;\n\n    var visbackground = d3.select("#whitespace").append("svg").attr("width", width).attr("height", height);\n\n    visbackground.append("path") // note lines, are behind group hulls of which there is a white and colored semi transparent layer\n    .attr("id", \'gr1background\').style("fill", \'#ffffff\').style("stroke", \'#ffffff\').style("stroke-width", 2.5 * allR).style(\'stroke-linejoin\', \'round\').style("opacity", 1);\n\n    var vis2background = d3.select("#whitespace").append("svg").attr("width", width).attr("height", height);\n\n    vis2background.append("path").attr("id", \'gr1background\').style("fill", \'#ffffff\').style("stroke", \'#ffffff\').style("stroke-width", 2.5 * allR).style(\'stroke-linejoin\', \'round\').style("opacity", 1);\n\n    var vis = d3.select("#whitespace").append("svg").attr("width", width).attr("height", height);\n\n    vis.append("path").attr("id", \'gr1hull\').style("fill", gr1Color).style("stroke", gr1Color).style("stroke-width", 2.5 * allR).style(\'stroke-linejoin\', \'round\');\n\n    var vis2 = d3.select("#whitespace").append("svg").attr("width", width).attr("height", height);\n\n    vis2.append("path").style("fill", gr2Color).style("stroke", gr2Color).style("stroke-width", 2.5 * allR).style(\'stroke-linejoin\', \'round\');\n\n    if (v == layoutAdd || v == layoutMove) {\n        for (var j = 0; j < zparams.zvars.length; j++) {\n            var ii = findNodeIndex(zparams.zvars[j]);\n            if (allNodes[ii].grayout) continue;\n            nodes.push(allNodes[ii]);\n            var selectMe = zparams.zvars[j].replace(/\\W/g, "_");\n            selectMe = "#".concat(selectMe);\n            d3.select(selectMe).style(\'background-color\', function () {\n                return hexToRgba(nodes[j].strokeColor);\n            });\n        }\n\n        for (var j = 0; j < zparams.zedges.length; j++) {\n            var mysrc = nodeIndex(zparams.zedges[j][0]);\n            var mytgt = nodeIndex(zparams.zedges[j][1]);\n            links.push({\n                source: nodes[mysrc],\n                target: nodes[mytgt],\n                left: false,\n                right: true\n            });\n        }\n    } else {\n        if (d3m_mode) {\n            //nodes = [findNode(mytarget)];               // Only add dependent variable on startup\n            exports.nodes = nodes = allNodes.slice(1, allNodes.length); // Add all but first variable on startup (assumes 0 position is d3m index variable)\n            for (var _j = 0; _j < nodes.length; _j++) {\n                //populate zvars array\n                if (nodes[_j].name != mytarget) {\n                    nodes[_j].group1 = true;\n                    zparams.zgroup1.push(nodes[_j].name); // write all names (except d3m index and the dependent variable) to zgroup1 array\n                };\n            };\n        } else if (allNodes.length > 2) {\n            exports.nodes = nodes = [allNodes[0], allNodes[1], allNodes[2]];\n            links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }, {\n                source: nodes[0],\n                target: nodes[2],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 2) {\n            exports.nodes = nodes = [allNodes[0], allNodes[1]];\n            links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 1) {\n            exports.nodes = nodes = [allNodes[0]];\n        } else {\n            alert("There are zero variables in the metadata.");\n            return;\n        }\n    }\n\n    panelPlots(); // after nodes is populated, add subset and (if !d3m_mode) setx panels\n\n\n    var force = d3.layout.force().nodes(nodes).links(links).size([width, height]).linkDistance(150).charge(-800).on(\'tick\', tick);\n\n    // define arrow markers for graph links\n    svg.append(\'svg:defs\').append(\'svg:marker\').attr(\'id\', \'end-arrow\').attr(\'viewBox\', \'0 -5 10 10\').attr(\'refX\', 6).attr(\'markerWidth\', 3).attr(\'markerHeight\', 3).attr(\'orient\', \'auto\').append(\'svg:path\').attr(\'d\', \'M0,-5L10,0L0,5\').style(\'fill\', \'#000\');\n\n    svg.append(\'svg:defs\').append(\'svg:marker\').attr(\'id\', \'start-arrow\').attr(\'viewBox\', \'0 -5 10 10\').attr(\'refX\', 4).attr(\'markerWidth\', 3).attr(\'markerHeight\', 3).attr(\'orient\', \'auto\').append(\'svg:path\').attr(\'d\', \'M10,-5L0,0L10,5\').style(\'fill\', \'#000\');\n\n    // line displayed when dragging new nodes\n    var drag_line = svg.append(\'svg:path\').attr(\'class\', \'link dragline hidden\').attr(\'d\', \'M0,0L0,0\');\n\n    // handles to link and node element groups\n    var path = svg.append(\'svg:g\').selectAll(\'path\'),\n        circle = svg.append(\'svg:g\').selectAll(\'g\');\n    //line = svg.append(\'svg:g\').selectAll(\'line\');\n\n    // mouse event vars\n    var selected_node = null,\n        selected_link = null,\n        mousedown_link = null,\n        mousedown_node = null,\n        mouseup_node = null;\n\n    function resetMouseVars() {\n        mousedown_node = null;\n        mouseup_node = null;\n        mousedown_link = null;\n    }\n\n    // update force layout (called automatically each iteration)\n    function tick() {\n\n        function findcoords(findnames, allnames, coords, lengthen) {\n            var fcoords = new Array(findnames.length); // found coordinates\n            var addlocation = 0;\n            if (findnames.length > 0) {\n                for (var j = 0; j < findnames.length; j++) {\n                    addlocation = allnames.indexOf(findnames[j]);\n                    fcoords[j] = coords[addlocation];\n                };\n            };\n\n            if (lengthen) {\n                // d3.geom.hull returns null for two points, and fails if three points are in a line,\n                // so this puts a couple points slightly off the line for two points, or around a singleton.\n                if (fcoords.length == 2) {\n                    var deltax = fcoords[0][0] - fcoords[1][0];\n                    var deltay = fcoords[0][1] - fcoords[1][1];\n                    fcoords.push([(fcoords[0][0] + fcoords[1][0]) / 2 + deltay / 20, (fcoords[0][1] + fcoords[1][1]) / 2 + deltax / 20]);\n                    fcoords.push([(fcoords[0][0] + fcoords[1][0]) / 2 - deltay / 20, (fcoords[0][1] + fcoords[1][1]) / 2 - deltax / 20]);\n                }\n                if (fcoords.length == 1) {\n                    var delta = allR * 0.2;\n                    fcoords.push([fcoords[0][0] + delta, fcoords[0][1]]);\n                    fcoords.push([fcoords[0][0] - delta, fcoords[0][1]]);\n                    fcoords.push([fcoords[0][0], fcoords[0][1] + delta]);\n                    fcoords.push([fcoords[0][0], fcoords[0][1] - delta]);\n                }\n            }\n            return fcoords;\n        };\n\n        // d3.geom.hull returns null for two points, and fails if three points are in a line,\n        // so this puts a couple points slightly off the line for two points, or around a singleton.\n        function lengthencoords(coords) {\n            if (coords.length == 2) {\n                var deltax = coords[0][0] - coords[1][0];\n                var deltay = coords[0][1] - coords[1][1];\n                coords.push([(coords[0][0] + coords[1][0]) / 2 + deltay / 20, (coords[0][1] + coords[1][1]) / 2 + deltax / 20]);\n                coords.push([(coords[0][0] + coords[1][0]) / 2 - deltay / 20, (coords[0][1] + coords[1][1]) / 2 - deltax / 20]);\n            }\n            if (coords.length == 1) {\n                var delta = allR * 0.2;\n                coords.push([coords[0][0] + delta, coords[0][1]]);\n                coords.push([coords[0][0] - delta, coords[0][1]]);\n                coords.push([coords[0][0], coords[0][1] + delta]);\n                coords.push([coords[0][0], coords[0][1] - delta]);\n            }\n            return coords;\n        };\n\n        var coords = nodes.map(function (d) {\n            return [d.x, d.y];\n        });\n        var gr1coords = findcoords(zparams.zgroup1, zparams.zvars, coords, true);\n        var gr2coords = findcoords(zparams.zgroup2, zparams.zvars, coords, true);\n        var depcoords = findcoords(zparams.zdv, zparams.zvars, coords, false);\n\n        // draw convex hull around independent variables, if three or more coordinates given\n        // note, d3.geom.hull returns null if shorter coordinate set than 3,\n        // so findcoords() function has option to lengthen the coordinates returned to bypass this\n        if (gr1coords.length > 2) {\n            line.style("opacity", 1);\n            visbackground.style("opacity", 1);\n            vis.style("opacity", 0.3);\n            var myhull = d3.geom.hull(gr1coords);\n\n            vis.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n            visbackground.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n\n            //var p = d3.geom.polygon(indcoords).centroid();  // Seems to go strange sometimes\n            var p = jamescentroid(gr1coords);\n\n            if (depcoords.length > 0) {\n                var q = depcoords[0]; // Note, only using first dep var currently\n                //var r = findboundary(p,q,gr1coords);        // An approach to find the exact boundary, not presently working\n                var ldeltaX = q[0] - p[0],\n                    ldeltaY = q[1] - p[1],\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY),\n                    lnormX = 0,\n                    lnormY = 0,\n                    lsourcePadding = allR + 7,\n                    ltargetPadding = allR + 10;\n\n                if (ldist > 0) {\n                    lnormX = ldeltaX / ldist;\n                    lnormY = ldeltaY / ldist;\n                };\n\n                line.attr("x1", p[0] + lsourcePadding * lnormX) // or r[0] if findboundary works\n                .attr("y1", p[1] + lsourcePadding * lnormY) // or r[1] if findboundary works\n                .attr("x2", q[0] - ltargetPadding * lnormX).attr("y2", q[1] - ltargetPadding * lnormY);\n            };\n\n            // group members attract each other, repulse non-group members\n            nodes.forEach(function (n) {\n                var sign = n.group1 ? 1 : -1; //was: Math.sign( zparams.zgroup1.indexOf(n.name) +0.5 );  // 1 if n in group, -1 if n not in group;\n                var ldeltaX = p[0] - n.x,\n                    ldeltaY = p[1] - n.y,\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY);\n                lnormX = 0, lnormY = 0;\n\n                if (ldist > 0) {\n                    lnormX = ldeltaX / ldist;\n                    lnormY = ldeltaY / ldist;\n                };\n\n                n.x += Math.min(lnormX, ldeltaX / 100) * k * sign * force.alpha();\n                n.y += Math.min(lnormY, ldeltaY / 100) * k * sign * force.alpha();\n            });\n        } else {\n            visbackground.style("opacity", 0);\n\n            vis.style("opacity", 0);\n            //            vis.style("opacity", 0);\n            line.style("opacity", 0);\n        };\n\n        if (gr2coords.length > 2) {\n            line2.style("opacity", 1);\n            vis2background.style("opacity", 1);\n            vis2.style("opacity", 0.3);\n            var myhull = d3.geom.hull(gr2coords);\n            vis2.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n            vis2background.selectAll("path").data([myhull]) // returns null if less than three coordinates\n            .attr("d", function (d) {\n                return "M" + d.join("L") + "Z";\n            });\n\n            //var p = d3.geom.polygon(indcoords).centroid();  // Seems to go strange sometimes\n            var p = jamescentroid(gr2coords);\n\n            if (depcoords.length > 0) {\n                var q = depcoords[0]; // Note, only using first dep var currently\n                var ldeltaX = q[0] - p[0],\n                    ldeltaY = q[1] - p[1],\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY),\n                    lnormX = ldeltaX / ldist,\n                    lnormY = ldeltaY / ldist,\n                    lsourcePadding = allR + 7,\n                    ltargetPadding = allR + 10;\n\n                line2.attr("x1", p[0] + lsourcePadding * lnormX).attr("y1", p[1] + lsourcePadding * lnormY).attr("x2", q[0] - ltargetPadding * lnormX).attr("y2", q[1] - ltargetPadding * lnormY);\n            };\n\n            // group members attract each other, repulse non-group members\n            nodes.forEach(function (n) {\n                var sign = n.group2 ? 1 : -1; // was: Math.sign( zparams.zgroup2.indexOf(n.name) +0.5 );  // 1 if n in group, -1 if n not in group;\n                var ldeltaX = p[0] - n.x,\n                    ldeltaY = p[1] - n.y,\n                    ldist = Math.sqrt(ldeltaX * ldeltaX + ldeltaY * ldeltaY),\n                    lnormX = 0,\n                    lnormY = 0;\n\n                if (ldist > 0) {\n                    lnormX = ldeltaX / ldist;\n                    lnormY = ldeltaY / ldist;\n                };\n\n                n.x += Math.min(lnormX, ldeltaX / 100) * k * sign * force.alpha();\n                n.y += Math.min(lnormY, ldeltaY / 100) * k * sign * force.alpha();\n            });\n        } else {\n            vis2background.style("opacity", 0);\n            vis2.style("opacity", 0);\n            line2.style("opacity", 0);\n        };\n\n        // draw directed edges with proper padding from node centers\n        path.attr(\'d\', function (d) {\n            var deltaX = d.target.x - d.source.x,\n                deltaY = d.target.y - d.source.y,\n                dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n                normX = deltaX / dist,\n                normY = deltaY / dist,\n                sourcePadding = d.left ? allR + 5 : allR,\n                targetPadding = d.right ? allR + 5 : allR,\n                sourceX = d.source.x + sourcePadding * normX,\n                sourceY = d.source.y + sourcePadding * normY,\n                targetX = d.target.x - targetPadding * normX,\n                targetY = d.target.y - targetPadding * normY;\n            return \'M\' + sourceX + \',\' + sourceY + \'L\' + targetX + \',\' + targetY;\n        });\n\n        circle.attr(\'transform\', function (d) {\n            return \'translate(\' + d.x + \',\' + d.y + \')\';\n        });\n\n        circle.selectAll(\'circle\') // Shrink/expand pebbles that join/leave groups\n        .transition().duration(100).attr(\'r\', function (d) {\n            return setPebbleRadius(d);\n        });\n    }\n\n    exports.clickVar = clickVar = function clickVar() {\n        // every time a variable in leftpanel is clicked, nodes updates and background color changes\n        if (findNodeIndex(this.id, true).grayout) return;\n        zparams.zvars = [];\n        var text = d3.select(this).text();\n        var node = findNode(text);\n        if (nodes.map(function (n) {\n            return n.name;\n        }).includes(text)) {\n            nodes.splice(node.index, 1);\n            spliceLinksForNode(node);\n            splice(node.strokeColor, text, [dvColor, \'zdv\'], [csColor, \'zcross\'], [timeColor, \'ztime\'], [nomColor, \'znom\']);\n\n            if (node.group1) {\n                // remove node name from group lists (should use adaptation of splice-by-color)\n                node.group1 = false;\n                zparams.zgroup1.splice(zparams.zgroup1.indexOf(node.name), 1);\n            };\n            if (node.group2) {\n                node.group2 = false;\n                zparams.zgroup2.splice(zparams.zgroup2.indexOf(node.name), 1);\n            };\n\n            nodeReset(node);\n            legend();\n        } else {\n            nodes.push(node);\n            if (nodes.length === 0) nodes[0].reflexive = true;\n        }\n        zparams.zvars = nodes.map(function (n) {\n            return n.name;\n        }); // adding this to keep it current (or should we rely on nodes.map(n => n.name) for variable list?)\n        panelPlots();\n        restart();\n    };\n\n    d3.select("#models").selectAll("p") // models tab\n    //  d3.select("#Display_content")\n    .on("click", function () {\n        var myColor = d3.select(this).style(\'background-color\');\n        d3.select("#models").selectAll("p").style(\'background-color\', varColor);\n        d3.select(this).style(\'background-color\', function (d) {\n            if (d3.rgb(myColor).toString() === varColor.toString()) {\n                zparams.zmodel = d.toString();\n                return hexToRgba(_plots.selVarColor);\n            } else {\n                zparams.zmodel = \'\';\n                return varColor;\n            }\n        });\n        restart();\n    });\n\n    d3.select("#types").selectAll("p") // models tab\n    //  d3.select("#Display_content")\n    .on("click", function () {\n        if (locktoggle) return;\n        if (this.className == "item-select") {\n            return;\n        } else {\n            d3.select("#types").select("p.item-select").attr(\'class\', \'item-default\');\n            d3mProblemDescription.taskType = this.innerHTML.toString();\n            d3.select(this).attr(\'class\', "item-select");\n        }\n        restart();\n        updateSchema("taskType", d3mProblemDescription, d3mTaskType);\n    });\n\n    d3.select("#subtypes").selectAll("p").on("click", function () {\n        if (locktoggle) return;\n        if (this.className == "item-select") {\n            return;\n        } else {\n            d3.select("#subtypes").select("p.item-select").attr(\'class\', \'item-default\');\n            d3mProblemDescription.taskSubtype = this.innerHTML.toString();\n            d3.select(this).attr(\'class\', "item-select");\n        }\n        restart();\n        updateSchema("taskSubtype", d3mProblemDescription, d3mTaskSubtype);\n    });\n\n    d3.select("#metrics").selectAll("p").on("click", function () {\n        if (locktoggle) return;\n        if (this.className == "item-select") {\n            return;\n            //         d3mProblemDescription.metric = ["",""];\n            //        this.className="item-default";\n        } else {\n            d3.select("#metrics").select("p.item-select").attr(\'class\', \'item-default\');\n            d3mProblemDescription.metric = this.innerHTML.toString();\n            d3.select(this).attr(\'class\', "item-select");\n        }\n        restart();\n        updateSchema("metric", d3mProblemDescription, d3mMetrics);\n    });\n\n    d3.select("#outputs").selectAll("p").on("click", function () {\n        if (locktoggle) return;\n        if (this.className == "item-select") {\n            return;\n        } else {\n            d3.select("#outputs").select("p.item-select").attr(\'class\', \'item-default\');\n            d3mProblemDescription.outputType = this.innerHTML.toString();\n            d3.select(this).attr(\'class\', "item-select");\n        }\n        restart();\n        updateSchema("outputType", d3mProblemDescription, d3mOutputType);\n    });\n\n    // update graph (called when needed)\n    function restart() {\n        // nodes.id is pegged to allNodes, i.e. the order in which variables are read in\n        // nodes.index is floating and depends on updates to nodes.  a variables index changes when new variables are added.\n        circle.call(force.drag);\n        if (forcetoggle[0] == "true") {\n            force.gravity(0.1);\n            force.charge(function (d) {\n                return setPebbleCharge(d);\n            });\n            force.start();\n            force.linkStrength(1);\n            k = 4; // strength parameter for group attraction/repulsion\n            if (zparams.zgroup1.length > 0 & zparams.zgroup2.length > 0) {\n                // scale down by number of active groups\n                k = 2.5;\n            }\n        } else {\n            force.gravity(0);\n            force.charge(0);\n            force.linkStrength(0);\n            k = 0;\n        }\n        force.resume();\n\n        // path (link) group\n        path = path.data(links);\n\n        // update existing links\n        // VJD: dashed links between pebbles are "selected". this is disabled for now\n        path.classed(\'selected\', function (x) {\n            return null;\n        }).style(\'marker-start\', function (x) {\n            return x.left ? \'url(#start-arrow)\' : \'\';\n        }).style(\'marker-end\', function (x) {\n            return x.right ? \'url(#end-arrow)\' : \'\';\n        });\n\n        // add new links\n        path.enter().append(\'svg:path\').attr(\'class\', \'link\').classed(\'selected\', function (x) {\n            return null;\n        }).style(\'marker-start\', function (x) {\n            return x.left ? \'url(#start-arrow)\' : \'\';\n        }).style(\'marker-end\', function (x) {\n            return x.right ? \'url(#end-arrow)\' : \'\';\n        }).on(\'mousedown\', function (d) {\n            // do we ever need to select a link? make it delete..\n            var obj = JSON.stringify(d);\n            for (var j = 0; j < links.length; j++) {\n                if (obj === JSON.stringify(links[j])) links.splice(j, 1);\n            }\n        });\n\n        // remove old links\n        path.exit().remove();\n\n        // circle (node) group\n        circle = circle.data(nodes, function (x) {\n            return x.id;\n        });\n\n        // update existing nodes (reflexive & selected visual states)\n        // d3.rgb is the function adjusting the color here\n        circle.selectAll(\'circle\').classed(\'reflexive\', function (x) {\n            return x.reflexive;\n        }).style(\'fill\', function (x) {\n            return d3.rgb(x.nodeCol);\n        }).style(\'stroke\', function (x) {\n            return d3.rgb(x.strokeColor);\n        }).style(\'stroke-width\', function (x) {\n            return x.strokeWidth;\n        });\n\n        // add new nodes\n        var g = circle.enter().append(\'svg:g\').attr(\'id\', function (x) {\n            return x.name + \'biggroup\';\n        });\n\n        // add plot\n        g.each(function (d) {\n            d3.select(this);\n            if (d.plottype == \'continuous\') (0, _plots.densityNode)(d, this);else if (d.plottype == \'bar\') (0, _plots.barsNode)(d, this);\n        });\n\n        var append = function append(str, attr) {\n            return function (x) {\n                return str + x[attr || \'id\'];\n            };\n        };\n\n        g.append("path").attr("id", append(\'dvArc\')).attr("d", arc3).style("fill", dvColor).attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, \'dvText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, \'dvText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            setColors(d, dvColor);\n            legend(dvColor);\n            restart();\n        });\n\n        g.append("text").attr("id", append(\'dvText\')).attr("x", 6).attr("dy", 11.5).attr("fill-opacity", 0).append("textPath").attr("xlink:href", append(\'#dvArc\')).text("Dep Var");\n\n        g.append("path").attr("id", append(\'nomArc\')).attr("d", arc4).style("fill", nomColor).attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            if (d.defaultNumchar == "character") return;\n            fillThis(this, .3, 0, 100);\n            fill(d, "nomText", .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            if (d.defaultNumchar == "character") return;\n            fillThis(this, 0, 100, 500);\n            fill(d, "nomText", 0, 100, 500);\n        }).on(\'click\', function (d) {\n            if (d.defaultNumchar == "character") return;\n            setColors(d, nomColor);\n            legend(nomColor);\n            restart();\n        });\n\n        g.append("text").attr("id", append("nomText")).attr("x", 6).attr("dy", 11.5).attr("fill-opacity", 0).append("textPath").attr("xlink:href", append("#nomArc")).text("Nominal");\n\n        g.append("path").attr("id", append(\'grArc\')).attr("d", arc1).style("fill", gr1Color).attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fill(d, "gr1indicator", .3, 0, 100);\n            fill(d, "gr2indicator", .3, 0, 100);\n            fillThis(this, .3, 0, 100);\n            fill(d, \'grText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fill(d, "gr1indicator", 0, 100, 500);\n            fill(d, "gr2indicator", 0, 100, 500);\n            fillThis(this, 0, 100, 500);\n            fill(d, \'grText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            //d.group1 = !d.group1;      // This might be easier, but currently set in setColors()\n            setColors(d, gr1Color);\n            legend(gr1Color);\n            restart();\n        });\n\n        g.append("path").attr("id", append(\'gr1indicator\')).attr("d", arcInd1).style("fill", gr1Color) // something like: zparams.zgroup1.indexOf(node.name) > -1  ?  #FFFFFF : gr1Color)\n        .attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, "grArc", .1, 0, 100);\n            fill(d, \'grText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, "grArc", 0, 100, 500);\n            fill(d, \'grText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            //d.group1 = !d.group1;      // This might be easier, but currently set in setColors()\n            setColors(d, gr1Color);\n            legend(gr1Color);\n            restart();\n        });\n\n        g.append("path").attr("id", append(\'gr2indicator\')).attr("d", arcInd2).style("fill", gr2Color) // something like: zparams.zgroup1.indexOf(node.name) > -1  ?  #FFFFFF : gr1Color)\n        .attr("fill-opacity", 0).on(\'mouseover\', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, "grArc", .1, 0, 100);\n            fill(d, \'grText\', .9, 0, 100);\n        }).on(\'mouseout\', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, "grArc", 0, 100, 500);\n            fill(d, \'grText\', 0, 100, 500);\n        }).on(\'click\', function (d) {\n            //d.group2 = !d.group2;      // This might be easier, but currently set in setColors()\n            setColors(d, gr2Color);\n            legend(gr2Color);\n            restart();\n        });\n\n        g.append("text").attr("id", append(\'grText\')).attr("x", 6).attr("dy", 11.5).attr("fill-opacity", 0).append("textPath").attr("xlink:href", append(\'#grArc\')).text("Groups");\n\n        g.append(\'svg:circle\').attr(\'class\', \'node\').attr(\'r\', function (d) {\n            return setPebbleRadius(d);\n        }).style(\'pointer-events\', \'inherit\').style(\'fill\', function (d) {\n            return d.nodeCol;\n        }).style(\'opacity\', "0.5").style(\'stroke\', function (d) {\n            return d3.rgb(d.strokeColor).toString();\n        }).classed(\'reflexive\', function (d) {\n            return d.reflexive;\n        }).on(\'dblclick\', function (_) {\n            d3.event.stopPropagation(); // stop click from bubbling\n            exports.summaryHold = summaryHold = true;\n        }).on(\'contextmenu\', function (d) {\n            // right click on node\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n\n            rightClickLast = true;\n            mousedown_node = d;\n            selected_node = mousedown_node === selected_node ? null : mousedown_node;\n            selected_link = null;\n\n            // reposition drag line\n            drag_line.style(\'marker-end\', \'url(#end-arrow)\').classed(\'hidden\', false).attr(\'d\', \'M\' + mousedown_node.x + \',\' + mousedown_node.y + \'L\' + mousedown_node.x + \',\' + mousedown_node.y);\n\n            svg.on(\'mousemove\', mousemove);\n            restart();\n        }).on(\'mouseup\', function (d) {\n            d3.event.stopPropagation();\n\n            if (rightClickLast) {\n                rightClickLast = false;\n                return;\n            }\n            if (!mousedown_node) return;\n\n            // needed by FF\n            drag_line.classed(\'hidden\', true).style(\'marker-end\', \'\');\n\n            // check for drag-to-self\n            mouseup_node = d;\n            if (mouseup_node === mousedown_node) {\n                resetMouseVars();\n                return;\n            }\n\n            // unenlarge target node\n            d3.select(this).attr(\'transform\', \'\');\n\n            // add link to graph (update if exists)\n            // NB: links are strictly source < target; arrows separately specified by booleans\n            var source, target, direction;\n            if (mousedown_node.id < mouseup_node.id) {\n                source = mousedown_node;\n                target = mouseup_node;\n                direction = \'right\';\n            } else {\n                source = mouseup_node;\n                target = mousedown_node;\n                direction = \'left\';\n            }\n\n            var link = links.filter(function (x) {\n                return x.source == source && x.target == target;\n            })[0];\n            if (link) {\n                link[direction] = true;\n            } else {\n                link = {\n                    source: source,\n                    target: target,\n                    left: false,\n                    right: false\n                };\n                link[direction] = true;\n                links.push(link);\n            }\n\n            // select new link\n            selected_link = link;\n            selected_node = null;\n            svg.on(\'mousemove\', null);\n\n            resetMouseVars();\n            restart();\n        });\n\n        // show node names\n        g.append(\'svg:text\').attr(\'x\', 0).attr(\'y\', 15).attr(\'class\', \'id\').text(function (d) {\n            return d.name;\n        });\n\n        // show summary stats on mouseover\n        // SVG doesn\'t support text wrapping, use html instead\n        g.selectAll("circle.node").on("mouseover", function (d) {\n            tabLeft(\'tab3\');\n            varSummary(d);\n            d.forefront = true;\n\n            byId(\'transformations\').setAttribute(\'style\', \'display:block\');\n            byId("transSel").selectedIndex = d.id;\n            transformVar = valueKey[d.id];\n\n            fill(d, "dvArc", .1, 0, 100);\n            fill(d, "dvText", .5, 0, 100);\n            fill(d, "grArc", .1, 0, 100);\n            fill(d, "grText", .5, 0, 100);\n            //fill(d, "gr1indicator", .1, 0, 100);\n            //fill(d, "gr1indicatorText", .1, 0, 100);\n            //fill(d, "gr2indicator", .1, 0, 100);\n            //fill(d, "gr2indicatorText", .1, 0, 100);\n\n            if (d.defaultNumchar == "numeric") {\n                fill(d, "nomArc", .1, 0, 100);\n                fill(d, "nomText", .5, 0, 100);\n            }\n            fill(d, "csArc", .1, 0, 100);\n            fill(d, "csText", .5, 0, 100);\n            fill(d, "timeArc", .1, 0, 100);\n            fill(d, "timeText", .5, 0, 100);\n\n            _mithril2.default.redraw();\n        }).on(\'mouseout\', function (d) {\n            d.forefront = false;\n            summaryHold || tabLeft(subset ? \'tab2\' : \'tab1\');\n            \'csArc csText timeArc timeText dvArc dvText nomArc nomText grArc grText\'.split(\' \').map(function (x) {\n                return fill(d, x, 0, 100, 500);\n            });\n            _mithril2.default.redraw();\n        });\n\n        // the transformation variable list is silently updated as pebbles are added/removed\n        d3.select("#transSel").selectAll(\'li\').remove();\n\n        d3.select("#transSel").selectAll(\'li\').data(nodes.map(function (x) {\n            return x.name;\n        })) // set to variables in model space as they\'re added\n        .enter().append("li").text(function (d) {\n            return d;\n        });\n\n        $(\'#transSel li\').click(function (evt) {\n            // if \'interaction\' is the selected function, don\'t show the function list again\n            if (selInteract) {\n                var n = $(\'#tInput\').val().concat($(this).text());\n                $(\'#tInput\').val(n);\n                evt.stopPropagation();\n                var t = transParse(n = n);\n                if (!t) return;\n                $(this).parent().fadeOut(100);\n                transform(n = t.slice(0, t.length - 1), t = t[t.length - 1], typeTransform = false);\n                return;\n            }\n\n            $(\'#tInput\').val($(this).text());\n            $(this).parent().fadeOut(100);\n            $(\'#transList\').fadeIn(100);\n            evt.stopPropagation();\n        });\n\n        // remove old nodes\n        circle.exit().remove();\n        force.start();\n    }\n\n    function mousedown(d) {\n        // prevent I-bar on drag\n        d3.event.preventDefault();\n        // because :active only works in WebKit?\n        svg.classed(\'active\', true);\n        if (d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n        restart();\n    }\n\n    function mousemove(d) {\n        if (!mousedown_node) return;\n        // update drag line\n        drag_line.attr(\'d\', \'M\' + mousedown_node.x + \',\' + mousedown_node.y + \'L\' + d3.mouse(this)[0] + \',\' + d3.mouse(this)[1]);\n    }\n\n    function mouseup(d) {\n        if (mousedown_node) {\n            drag_line.classed(\'hidden\', true).style(\'marker-end\', \'\');\n        }\n        // because :active only works in WebKit?\n        svg.classed(\'active\', false);\n        // clear mouse event vars\n        resetMouseVars();\n    }\n\n    // app starts here\n    svg.attr(\'id\', function () {\n        return "whitespace".concat(myspace);\n    }).attr(\'height\', height).on(\'mousedown\', function () {\n        mousedown(this);\n    }).on(\'mouseup\', function () {\n        mouseup(this);\n    });\n\n    d3.select(window).on(\'click\', function () {\n        // all clicks will bubble here unless event.stopPropagation()\n        $(\'#transList\').fadeOut(100);\n        $(\'#transSel\').fadeOut(100);\n    });\n\n    restart(); // initializes force.layout()\n    fakeClick();\n\n    if (v2 & d3m_mode) {\n        var click_ev = document.createEvent("MouseEvents");\n        // initialize the event\n        click_ev.initEvent("click", true /* bubble */, true /* cancelable */);\n        // trigger the event\n        var clickID = "dvArc" + findNodeIndex(mytarget);\n        document.getElementById(clickID).dispatchEvent(click_ev);\n    }\n}\n\nvar find = function find($nodes, name) {\n    for (var i in $nodes) {\n        if ($nodes[i].name == name) return $nodes[i].id;\n    }\n};\n\n// returns id\nvar findNodeIndex = exports.findNodeIndex = function findNodeIndex(name, all) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = allNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var node = _step.value;\n\n            if (node.name === name) {\n                //cdb(\'Yes!\' + allNodes[i].id);\n                return all ? node : node.id;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n};\n\nvar nodeIndex = function nodeIndex(nodeName) {\n    for (var i in nodes) {\n        if (nodes[i].name == nodeName) return i;\n    }\n};\n\nvar findNode = exports.findNode = function findNode(nodeName) {\n    for (var i in allNodes) {\n        if (allNodes[i].name == nodeName) return allNodes[i];\n    }\n};\n\n/*\n    Retrieve the variable list from the preprocess data.\n    This helps handle the new format and (temporarily)\n    the older format in production (rp 8.14.2017)\n */\nfunction getVariableData(jsonData) {\n    /* "new" response:\n    {\n        "dataset" : {...}\n        "variables" : {\n            "var1" : {...}, (etc)\n        }\n    }\n    "old" response\n    {\n         "var1" : {...},\n         (etc)\n    }*/\n    return jsonData.hasOwnProperty(\'variables\') ? jsonData.variables : jsonData;\n}\n\n// function called by force button\nfunction forceSwitch() {\n    forcetoggle = [forcetoggle[0] == \'true\' ? \'false\' : \'true\'];\n    if (forcetoggle[0] === "false") {\n        byId(\'btnForce\').setAttribute("class", "btn active");\n    } else {\n        byId(\'btnForce\').setAttribute("class", "btn btn-default");\n        fakeClick();\n    }\n}\n\nfunction lockDescription() {\n    locktoggle = locktoggle ? false : true;\n    var temp = void 0;\n    var i = void 0;\n    if (!locktoggle) {\n        document.getElementById(\'btnLock\').setAttribute("class", "btn btn-default");\n        temp = document.getElementById(\'rightContentArea\').querySelectorAll("p.item-lineout");\n        for (i = 0; i < temp.length; i++) {\n            temp[i].classList.remove("item-lineout");\n        }\n    } else {\n        document.getElementById(\'btnLock\').setAttribute("class", "btn active");\n        temp = document.getElementById(\'metrics\').querySelectorAll("p.item-default");\n        console.log(temp);\n        for (i = 0; i < temp.length; i++) {\n            temp[i].classList.add("item-lineout");\n        }\n        temp = document.getElementById(\'types\').querySelectorAll("p.item-default");\n        for (i = 0; i < temp.length; i++) {\n            temp[i].classList.add("item-lineout");\n        }\n        temp = document.getElementById(\'subtypes\').querySelectorAll("p.item-default");\n        for (i = 0; i < temp.length; i++) {\n            temp[i].classList.add("item-lineout");\n        }\n        temp = document.getElementById(\'outputs\').querySelectorAll("p.item-default");\n        for (i = 0; i < temp.length; i++) {\n            temp[i].classList.add("item-lineout");\n        }\n        fakeClick();\n    }\n}\n\nvar spliceLinksForNode = exports.spliceLinksForNode = function spliceLinksForNode(node) {\n    return links.filter(function (l) {\n        return l.source === node || l.target === node;\n    }).map(function (x) {\n        return links.splice(links.indexOf(x), 1);\n    });\n};\n\nfunction zPop() {\n    if (dataurl) zparams.zdataurl = dataurl;\n    zparams.zmodelcount = modelCount;\n    zparams.zedges = [];\n    zparams.zvars = [];\n    for (var j = 0; j < nodes.length; j++) {\n        //populate zvars array\n        zparams.zvars.push(nodes[j].name);\n        var temp = nodes[j].id;\n        zparams.zsetx[j] = allNodes[temp].setxvals;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n    }\n    for (var _j2 = 0; _j2 < links.length; _j2++) {\n        //populate zedges array\n        //correct the source target ordering for Zelig\n        var srctgt = links[_j2].left == false ? [links[_j2].source.name, links[_j2].target.name] : [links[_j2].target.name, links[_j2].source.name];\n        zparams.zedges.push(srctgt);\n    }\n}\n\nfunction estimate(btn) {\n    if (!d3m_mode) {\n        var estimateSuccess = function estimateSuccess(btn, json) {\n            //  toggleRightButtons("all");\n            estimateLadda.stop(); // stop spinner\n            allResults.push(json);\n            cdb("json in: ", json);\n\n            if (!estimated) byId("results").removeChild(byId("resultsHolder"));\n\n            estimated = true;\n            d3.select("#results").style("display", "block");\n\n            d3.select("#resultsView").style("display", "block");\n\n            d3.select("#modelView").style("display", "block");\n\n            // programmatic click on Results button\n            $("#btnResults").trigger("click");\n\n            var model = "Model".concat(modelCount = modelCount + 1);\n\n            function modCol() {\n                d3.select("#modelView").selectAll("p").style(\'background-color\', hexToRgba(varColor));\n            }\n            modCol();\n\n            d3.select("#modelView").insert("p", ":first-child") // top stack for results\n            .attr("id", model).text(model).style(\'background-color\', hexToRgba(_plots.selVarColor)).on("click", function () {\n                var a = this.style.backgroundColor.replace(/\\s*/g, "");\n                var b = hexToRgba(_plots.selVarColor).replace(/\\s*/g, "");\n                if (a.substr(0, 17) == b.substr(0, 17)) return; // escape function if displayed model is clicked\n                modCol();\n                d3.select(this).style(\'background-color\', hexToRgba(_plots.selVarColor));\n                viz(this.id);\n            });\n\n            var rCall = [];\n            rCall[0] = json.call;\n            showLog("estimate", rCall);\n\n            viz(model);\n        };\n\n        var estimateFail = function estimateFail(btn) {\n            estimateLadda.stop(); // stop spinner\n            estimated = true;\n        };\n\n        var selectorSuccess = function selectorSuccess(btn, json) {\n            d3.select("#ticker").text("Suggested variables and percent improvement on RMSE: " + json.vars);\n            cdb("selectorSuccess: ", json);\n        };\n\n        var selectorFail = function selectorFail(btn) {\n            alert("Selector Fail");\n        };\n\n        if (production && zparams.zsessionid == \'\') {\n            alert("Warning: Data download is not complete. Try again soon.");\n            return;\n        }\n\n        zPop();\n        // write links to file & run R CMD\n        // package the output as JSON\n        // add call history and package the zparams object as JSON\n        zparams.callHistory = callHistory;\n        var jsonout = JSON.stringify(zparams);\n\n        var urlcall = rappURL + "zeligapp"; //base.concat(jsonout);\n        var solajsonout = "solaJSON=" + jsonout;\n        cdb("urlcall out: ", urlcall);\n        cdb("POST out: ", solajsonout);\n        console.log("estimate: ", solajsonout);\n\n        zparams.allVars = valueKey.slice(10, 25); // because the URL is too long...\n        jsonout = JSON.stringify(zparams);\n        var selectorurlcall = rappURL + "selectorapp";\n\n        estimateLadda.start(); // start spinner\n        makeCorsRequest(urlcall, btn, estimateSuccess, estimateFail, solajsonout);\n    } else {\n        var createPipelineSuccess = function createPipelineSuccess(btn, json) {\n            estimateLadda.stop(); // stop spinner\n\n            var trainFeatures = apiFeature(json.predictors, uri.features);\n            var targetFeatures = apiFeature(json.depvar, uri.target);\n            var task = d3mTaskType[d3mProblemDescription.taskType][1];\n            var taskSubtype = d3mTaskSubtype[d3mProblemDescription.taskSubtype][1];\n            var output = d3mOutputType[d3mProblemDescription.outputType][1];\n            var metrics = [d3mMetrics[d3mProblemDescription.metric][1]];\n            var taskDescription = d3mProblemDescription.taskDescriptionription;\n            var maxPipelines = 10; //user to specify this eventually?\n\n            setxTable(json.predictors);\n            var dvvalues = json.dvvalues;\n\n            var PipelineCreateRequest = { context: context, trainFeatures: trainFeatures, task: task, taskSubtype: taskSubtype, taskDescription: taskDescription, output: output, metrics: metrics, targetFeatures: targetFeatures, maxPipelines: maxPipelines };\n\n            var jsonout = JSON.stringify(PipelineCreateRequest);\n\n            var urlcall = d3mURL + "/createpipeline";\n            var solajsonout = "grpcrequest=" + jsonout;\n\n            console.log(urlcall);\n            console.log(solajsonout);\n            function sendPipelineSuccess(btn, PipelineCreateResult) {\n                //rpc GetExecutePipelineResults(PipelineExecuteResultsRequest) returns (stream PipelineExecuteResult) {}\n                console.log(PipelineCreateResult);\n                toggleRightButtons("all");\n                document.getElementById("btnResults").click();\n\n                // this is our function for the ListPipelines of API\n                listpipelines();\n\n                // once we know what TA2 does we\'ll get the pipeline ids from there\n                //let pipelineid = PipelineCreateResult.pipelineid;\n                var pipelineid = "id1";\n                var PipelineExecuteResultsRequest = { context: context, pipelineid: pipelineid };\n                jsonout = JSON.stringify(PipelineExecuteResultsRequest);\n                var urlcall = d3mURL + "/getexecutepipelineresults";\n                var solajsonout = "grpcrequest=" + jsonout;\n                console.log("GetExecutePipelineResults: ");\n                console.log(solajsonout);\n                console.log(urlcall);\n\n                function getExecutePipeSuccess(btn, PipelineExecuteResult) {\n                    // presumably we\'ll be reading in results from a path\n                    // for now it\'s just hardcoded\n                    console.log(PipelineExecuteResult);\n                    var predvals = dvvalues;\n                    for (var i = 0; i < predvals.length; i++) {\n                        predvals[i] = predvals[i] * (Math.random() + .5);\n                    }\n                    var xdata = "Actual";\n                    var ydata = "Predicted";\n                    bivariatePlot(dvvalues, predvals, xdata, ydata);\n                }\n                function getExecutePipeFail(btn) {\n                    console.log("GetExecutePipelineResults failed");\n                }\n                makeCorsRequest(urlcall, "nobutton", getExecutePipeSuccess, getExecutePipeFail, solajsonout);\n            }\n\n            function sendPipelineFail(btn) {\n                console.log("pipeline to django failed");\n            }\n\n            makeCorsRequest(urlcall, "nobutton", sendPipelineSuccess, sendPipelineFail, solajsonout);\n        };\n\n        var createPipelineFail = function createPipelineFail(btn) {\n            estimateLadda.stop(); // stop spinner\n            estimated = true;\n        };\n\n        // we are in d3m_mode\n        // rpc CreatePipelines(PipelineCreateRequest) returns (stream PipelineCreateResult) {}\n        zPop();\n        zparams.callHistory = callHistory;\n        var jsonout = JSON.stringify(zparams);\n        console.log(jsonout);\n\n        var context = apiSession(zparams.zsessionid);\n        var uri = { features: zparams.zd3mdata, target: zparams.zd3mtarget };\n\n        var urlcall = rappURL + "pipelineapp";\n\n        var solajsonout = "solaJSON=" + jsonout;\n        cdb("urlcall out: ", urlcall);\n        cdb("POST out: ", solajsonout);\n\n        estimateLadda.start(); // start spinner\n        makeCorsRequest(urlcall, btn, createPipelineSuccess, createPipelineFail, solajsonout);\n    }\n}\n\nfunction runPreprocess(dataloc, targetloc, datastub) {\n    var url = rappURL + \'preprocessapp\';\n    console.log("GOING TO RUN THE PREPROCESSAPP");\n    var json = JSON.stringify({ data: dataloc, target: targetloc, datastub: datastub }); //, preprocess: preprocessloc});\n    console.log(\'urlcall out: \', url);\n    console.log(\'POST out: \', json);\n    var data = new FormData();\n    data.append(\'solaJSON\', json);\n    return _mithril2.default.request({ method: \'POST\', url: url, data: data }).then(function (data) {\n        console.log(\'json in RIGHT HERE: \', data);\n        return data;\n    }, function (_) {\n        return console.log(\'preprocess failed\');\n    });\n}\n\nvar ta2stuff = exports.ta2stuff = function ta2stuff(_) {\n    return console.log(d3mProblemDescription);\n};\n\nfunction dataDownload() {\n    zPop();\n    // write links to file & run R CMD\n\n    //package the output as JSON\n    // add call history and package the zparams object as JSON\n    var jsonout = JSON.stringify(zparams);\n    var btn = "nobutton";\n\n    var urlcall = rappURL + "dataapp";\n    var solajsonout = "solaJSON=" + jsonout;\n    cdb("urlcall out: ", urlcall);\n    cdb("POST out: ", solajsonout);\n\n    var downloadSuccess = function downloadSuccess(btn, json) {\n        console.log(\'datadownload: \', json);\n        cdb(\'dataDownload json in: \', json);\n        zparams.zsessionid = json.sessionid[0];\n        // set link URL\n        byId("logID").href = \'\' + (production ? rappURL + \'log_dir/log_\' : \'rook/log_\') + zparams.zsessionid + \'.txt\';\n    };\n    var downloadFail = function downloadFail(_) {\n        return cdb(\'Data have not been downloaded\');\n    };\n    makeCorsRequest(urlcall, btn, downloadSuccess, downloadFail, solajsonout);\n}\n\nfunction viz(mym) {\n    var mym = +mym.substr(5, 5) - 1;\n\n    function removeKids(parent) {\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild);\n        }\n    }\n\n    removeKids(byId("resultsView"));\n\n    var json = allResults[mym];\n\n    // pipe in figures to right panel\n    var filelist = new Array();\n    for (var i in json.images) {\n        var zfig = document.createElement("img");\n        zfig.setAttribute("src", json.images[i]);\n        zfig.setAttribute(\'width\', 200);\n        zfig.setAttribute(\'height\', 200);\n        byId("resultsView").appendChild(zfig);\n    }\n\n    // write the results table\n    var resultsArray = [];\n    for (var key in json.sumInfo) {\n        if (key == \'colnames\') continue;\n        resultsArray.push(json.sumInfo[key]);\n    }\n\n    var table = d3.select("#resultsView").append("p").append("table");\n\n    var thead = table.append("thead");\n    thead.append("tr").selectAll("th").data(json.sumInfo.colnames).enter().append("th").text(function (d) {\n        return d;\n    });\n\n    var tbody = table.append("tbody");\n    tbody.selectAll("tr").data(resultsArray).enter().append("tr").selectAll("td").data(function (d) {\n        return d;\n    }).enter().append("td").text(function (d) {\n        var myNum = Number(d);\n        if (isNaN(myNum)) return d;\n        return myNum.toPrecision(3);\n    }).on("mouseover", function () {\n        d3.select(this).style("background-color", "aliceblue");\n    }) // for no discernable reason\n    .on("mouseout", function () {\n        d3.select(this).style("background-color", "#F9F9F9");\n    }); //(but maybe we\'ll think of one)\n\n    d3.select("#resultsView").append("p").html(function () {\n        return "<b>Formula: </b>".concat(json.call[0]);\n    });\n\n    _mithril2.default.redraw();\n}\n\n// parses the transformation input. variable names are often nested inside one another, e.g., ethwar, war, wars, and so this is handled\nfunction transParse(n) {\n    var out2 = [];\n    var t2 = n;\n    var k2 = 0;\n    var subMe2 = "_transvar".concat(k2);\n    var indexed = [];\n\n    // out2 is all matched variables, indexed is an array, each element is an object that contains the matched variables starting index and finishing index.  e.g., n="wars+2", out2=[war, wars], indexed=[{0,2},{0,3}]\n    for (var i in valueKey) {\n        var m2 = n.match(valueKey[i]);\n        if (m2 != null) out2.push(m2[0]);\n\n        var re = new RegExp(valueKey[i], "g");\n        var s = n.search(re);\n        if (s != -1) indexed.push({ from: s, to: s + valueKey[i].length });\n    }\n\n    // nested loop not good, but indexed is not likely to be very large.\n    // if a variable is nested, it is removed from out2\n    // notice, loop is backwards so that index changes don\'t affect the splice\n    cdb("indexed ", indexed);\n    for (var i = indexed.length - 1; i > -1; i--) {\n        for (var j = indexed.length - 1; j > -1; j--) {\n            if (i === j) continue;\n            if (indexed[i].from >= indexed[j].from & indexed[i].to <= indexed[j].to) {\n                cdb(i, " is nested in ", j);\n                out2.splice(i, 1);\n            }\n        }\n    }\n\n    for (var i in out2) {\n        t2 = t2.replace(out2[i], subMe2); //something that\'ll never be a variable name\n        k2 = k2 + 1;\n        subMe2 = "_transvar".concat(k2);\n    }\n\n    if (out2.length > 0) {\n        out2.push(t2);\n        cdb("new out ", out2);\n        return out2;\n    } else {\n        alert("No variable name found. Perhaps check your spelling?");\n        return null;\n    }\n}\n\n/**\n  n = name of column/node\n  t = selected transformation\n */\nfunction transform(n, t, typeTransform) {\n    if (production && zparams.zsessionid == "") {\n        alert("Warning: Data download is not complete. Try again soon.");\n        return;\n    }\n    if (!typeTransform) t = t.replace("+", "_plus_"); // can\'t send the plus operator\n\n    cdb(\'name of col: \' + n);\n    cdb(\'transformation: \' + t);\n\n    var btn = byId(\'btnEstimate\');\n\n    // find the node by name\n    var myn = findNodeIndex(n[0], true);\n\n    if (typeof myn === "undefined") {\n        myn = findNodeIndex(n, true);\n    }\n\n    var outtypes = {\n        varnamesTypes: n,\n        interval: myn.interval,\n        numchar: myn.numchar,\n        nature: myn.nature,\n        binary: myn.binary\n    };\n\n    cdb(myn);\n    // if typeTransform but we already have the metadata\n    if (typeTransform) {\n        if (myn.nature == "nominal" & typeof myn.plotvalues !== "undefined") {\n            myn.plottype = "bar";\n            (0, _plots.barsNode)(myn);\n            panelPlots();\n            return;\n        } else if (myn.nature != "nominal" & typeof myn.plotx !== "undefined") {\n            myn.plottype = "continuous";\n            (0, _plots.densityNode)(myn);\n            panelPlots();\n            return;\n        }\n    }\n\n    //package the output as JSON\n    var transformstuff = {\n        zdataurl: dataurl,\n        zvars: myn.name,\n        zsessionid: zparams.zsessionid,\n        transform: t,\n        callHistory: callHistory,\n        typeTransform: typeTransform,\n        typeStuff: outtypes\n    };\n    var jsonout = JSON.stringify(transformstuff);\n    var urlcall = rappURL + "transformapp";\n    var solajsonout = "solaJSON=" + jsonout;\n    cdb("urlcall out: " + urlcall);\n    cdb("POST out: " + solajsonout);\n\n    function transformSuccess(btn, json) {\n        estimateLadda.stop();\n        cdb("json in: " + JSON.stringify(json));\n\n        // Is this a typeTransform?\n        if (json.typeTransform[0]) {\n            // Yes. We\'re updating an existing node\n            d3.json(json.url, function (err, data) {\n                if (err) return console.warn(err);\n                var node = void 0;\n                for (var key in data) {\n                    node = findNodeIndex(key, true);\n                    if (!node) continue;\n                    jQuery.extend(true, node, data[key]);\n                    node.plottype === "continuous" ? (0, _plots.densityNode)(node) : node.plottype === "bar" ? (0, _plots.barsNode)(node) : null;\n                }\n                fakeClick();\n                panelPlots();\n                node && cdb(node);\n            });\n        } else {\n            /* No, we have a new node here--e.g. the transformed column\n                 example response: {\n                 "call":["t_year_2"],\n                 "url":["data/preprocessSubset_BACCBC78-7DD9-4482-B31D-6EB01C3A0C95.txt"],\n                 "trans":["year","_transvar0^2"],\n                 "typeTransform":[false]\n               }\n            */\n            callHistory.push({\n                func: "transform",\n                zvars: n,\n                transform: t\n            });\n\n            var subseted = false;\n            var rCall = [];\n\n            rCall[0] = json.call;\n            var newVar = rCall[0][0];\n\n            trans.push(newVar);\n\n            // Read the preprocess file containing values\n            // for the transformed variable\n            //\n            d3.json(json.url, function (error, json) {\n                if (error) return console.warn(error);\n\n                var jsondata = getVariableData(json);\n\n                for (var key in jsondata) {\n                    var myIndex = findNodeIndex(key);\n                    if (typeof myIndex !== "undefined") {\n                        alert("Invalid transformation: this variable name already exists.");\n                        return;\n                    }\n                    // add transformed variable to the current space\n                    var i = allNodes.length; // get new index\n                    var obj1 = {\n                        id: i,\n                        reflexive: false,\n                        name: key,\n                        labl: "transformlabel",\n                        data: [5, 15, 20, 0, 5, 15, 20],\n                        count: [.6, .2, .9, .8, .1, .3, .4],\n                        nodeCol: colors(i),\n                        baseCol: colors(i),\n                        strokeColor: _plots.selVarColor,\n                        strokeWidth: "1",\n                        subsetplot: false,\n                        subsetrange: ["", ""],\n                        setxplot: false,\n                        setxvals: ["", ""],\n                        grayout: false,\n                        defaultInterval: jsondata[key].interval,\n                        defaultNumchar: jsondata[key].numchar,\n                        defaultNature: jsondata[key].nature,\n                        defaultBinary: jsondata[key].binary\n                    };\n\n                    jQuery.extend(true, obj1, jsondata[key]);\n                    allNodes.push(obj1);\n\n                    valueKey.push(newVar);\n                    nodes.push(allNodes[i]);\n                    fakeClick();\n                    panelPlots();\n\n                    if (allNodes[i].plottype === "continuous") {\n                        (0, _plots.densityNode)(allNodes[i]);\n                    } else if (allNodes[i].plottype === "bar") {\n                        (0, _plots.barsNode)(allNodes[i]);\n                    }\n\n                    _mithril2.default.redraw();\n                }\n            });\n\n            showLog(\'transform\', rCall);\n        }\n    }\n\n    function transformFail(btn) {\n        alert("transform fail");\n        estimateLadda.stop();\n    }\n\n    estimateLadda.start(); // start spinner\n    makeCorsRequest(urlcall, btn, transformSuccess, transformFail, solajsonout);\n}\n\n// below from http://www.html5rocks.com/en/tutorials/cors/ for cross-origin resource sharing\n// Create the XHR object.\nfunction createCORSRequest(method, url, callback) {\n    var xhr = new XMLHttpRequest();\n    if ("withCredentials" in xhr) {\n        // XHR for Chrome/Firefox/Opera/Safari.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != "undefined") {\n        // XDomainRequest for IE.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // CORS not supported.\n        xhr = null;\n    }\n    // xhr.setRequestHeader(\'Content-Type\', \'text/plain\');\n    xhr.setRequestHeader(\'Content-Type\', \'application/x-www-form-urlencoded\');\n    return xhr;\n}\n\n// Make the actual CORS request.\nfunction makeCorsRequest(url, btn, callback, warningcallback, jsonstring) {\n    var xhr = createCORSRequest(\'POST\', url);\n    if (!xhr) {\n        alert(\'CORS not supported\');\n        return;\n    }\n    // Response handlers for asynchronous load\n    // onload or onreadystatechange?\n\n    xhr.onload = function () {\n        var text = xhr.responseText;\n        cdb("text ", text);\n\n        try {\n            var json = JSON.parse(text); // should wrap in try / catch\n            var names = Object.keys(json);\n        } catch (err) {\n            estimateLadda.stop();\n            selectLadda.stop();\n            cdb(err);\n            alert(\'Error: Could not parse incoming JSON.\');\n        }\n\n        if (names[0] == "warning") {\n            warningcallback(btn);\n            alert("Warning: " + json.warning);\n        } else {\n            callback(btn, json);\n        }\n    };\n    xhr.onerror = function () {\n        // note: xhr.readystate should be 4 and status should be 200. a status of 0 occurs when the url is too large\n        xhr.status == 0 ? alert(\'There was an error making the request. xmlhttprequest status is 0.\') : xhr.readyState != 4 ? alert(\'There was an error making the request. xmlhttprequest readystate is not 4.\') : alert(\'Woops, there was an error making the request.\');\n        cdb(xhr);\n        estimateLadda.stop();\n        selectLadda.stop();\n    };\n    xhr.send(jsonstring);\n}\n\nvar legend = exports.legend = function legend(_) {\n    borderState();\n    _mithril2.default.redraw();\n};\n\n// programmatically deselect every selected variable\nfunction erase() {\n    leftpanelMedium();\n    rightpanelMedium();\n    tabLeft(\'tab1\');\n    jQuery.fn.d3Click = function () {\n        this.children().each(function (i, e) {\n            var mycol = d3.rgb(this.style.backgroundColor);\n            if (mycol.toString() === varColor.toString()) return;\n            var evt = document.createEvent("MouseEvents");\n            evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            e.dispatchEvent(evt);\n        });\n    };\n    $("#varList").d3Click();\n}\n\n// http://www.tutorials2learn.com/tutorials/scripts/javascript/xml-parser-javascript.html\nfunction loadXMLDoc(XMLname) {\n    var xmlDoc;\n    if (window.XMLHttpRequest) {\n        xmlDoc = new window.XMLHttpRequest();\n        xmlDoc.open("GET", XMLname, false);\n        xmlDoc.send("");\n        return xmlDoc.responseXML;\n    }\n    // IE 5 and IE 6\n    else if (ActiveXObject("Microsoft.XMLDOM")) {\n            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");\n            xmlDoc.async = false;\n            xmlDoc.load(XMLname);\n            return xmlDoc;\n        }\n    alert("Error loading document!");\n}\n\nfunction tabLeft(tab) {\n    byId(\'tab1\').style.display = \'none\';\n    byId(\'tab2\').style.display = \'none\';\n    byId(\'tab3\').style.display = \'none\';\n    byId(tab).style.display = \'block\';\n    if (tab != \'tab3\') {\n        exports.subset = subset = tab == \'tab2\';\n        exports.summaryHold = summaryHold = false;\n    }\n    exports.lefttab = lefttab = tab;\n}\n\nfunction tabRight(tab) {\n    var select = function select(cls) {\n        var panel = d3.select("#rightpanel");\n        return cls ? panel.attr(\'class\', cls) : panel.attr(\'class\');\n    };\n    var cls = "sidepanel container clearfix";\n    var toggleR = function toggleR() {\n        select(function () {\n            var expand = cls + \' expandpanel\';\n            return this.getAttribute("class") === expand ? cls : expand;\n        });\n    };\n    var toggleRFull = function toggleRFull() {\n        select(function () {\n            var expand = cls + \' expandpanelfull\';\n            return this.getAttribute("class") === expand ? cls : expand;\n        });\n    };\n    if (tab === "btnModels") select(cls);else if (tab === "btnSetx") righttab === "btnSetx" || select() === cls && toggleRFull();else if (tab === "btnResults") !estimated ? select(cls) : righttab === "btnResults" || select() === cls && toggleR();\n    exports.righttab = righttab = tab;\n}\n\nvar summary = exports.summary = { data: [] };\n\nfunction varSummary(d) {\n    var t1 = \'Mean:, Median:, Most Freq:, Occurrences:, Median Freq:, Occurrences:, Least Freq:, Occurrences:, Std Dev:, Minimum:, Maximum:, Invalid:, Valid:, Uniques:, Herfindahl\'.split(\', \');\n\n    var rint = d3.format(\'r\');\n    var str = function str(x, p) {\n        return (+x).toPrecision(p || 4).toString();\n    };\n    var t2 = priv && d.meanCI ? [str(d.mean, 2) + \' (\' + str(d.meanCI.lowerBound, 2) + \' - \' + str(d.meanCI.upperBound, 2) + \')\', str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)] : [str(d.mean), str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)];\n\n    summary.data = [];\n    t1.forEach(function (e, i) {\n        return !t2[i].includes(\'NaN\') && t2[i] != \'NA\' && t2[i] != \'\' && summary.data.push([e, t2[i]]);\n    });\n\n    summary.name = d.name;\n    summary.labl = d.labl;\n\n    d3.select(\'#tab3\').selectAll(\'svg\').remove();\n\n    if (!d.plottype) return;\n    d.plottype == \'continuous\' ? (0, _plots.density)(d, \'varSummary\', priv) : d.plottype == "bar" ? (0, _plots.bars)(d, \'varSummary\', priv) : d3.select("#tab3") // no graph to draw, but still need to remove previous graph\n    .selectAll("svg").remove();\n}\n\nvar popoverContent = exports.popoverContent = function popoverContent(d) {\n    var text = \'\';\n    var _ref2 = [d3.format(\'r\'), function (val, int) {\n        return (+val).toPrecision(int).toString();\n    }],\n        rint = _ref2[0],\n        prec = _ref2[1];\n\n    var div = function div(field, name, val) {\n        if (field != \'NA\') text += \'<div class=\\\'form-group\\\'><label class=\\\'col-sm-4 control-label\\\'>\' + name + \'</label><div class=\\\'col-sm-6\\\'><p class=\\\'form-control-static\\\'>\' + (val || field) + \'</p></div></div>\';\n    };\n    d.labl != \'\' && div(d.labl, \'Label\');\n    div(d.mean, \'Mean\', priv && d.meanCI ? prec(d.mean, 2) + \' (\' + prec(d.meanCI.lowerBound, 2) + \' - \' + prec(d.meanCI.upperBound, 2) + \')\' : prec(d.mean, 4));\n    div(d.median, \'Median\', prec(d.median, 4));\n    div(d.mode, \'Most Freq\');\n    div(d.freqmode, \'Occurrences\', rint(d.freqmode));\n    div(d.mid, \'Median Freq\');\n    div(d.freqmid, \'Occurrences\', rint(d.freqmid));\n    div(d.fewest, \'Least Freq\');\n    div(d.freqfewest, \'Occurrences\', rint(d.freqfewest));\n    div(d.sd, \'Stand Dev\', prec(d.sd, 4));\n    div(d.max, \'Maximum\', prec(d.max, 4));\n    div(d.min, \'Minimum\', prec(d.min, 4));\n    div(d.invalid, \'Invalid\', rint(d.invalid));\n    div(d.valid, \'Valid\', rint(d.valid));\n    div(d.uniques, \'Uniques\', rint(d.uniques));\n    div(d.herfindahl, \'Herfindahl\', prec(d.herfindahl, 4));\n    return text;\n};\n\nfunction popupX(d) {\n    var tsf = d3.format(".4r");\n    var rint = d3.format("r");\n    //Create the tooltip label\n    d3.select("#tooltip").style("left", tempX + "px").style("top", tempY + "px").select("#tooltiptext").html("<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Mean</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + tsf(d.mean) + "</p></div></div>" + "<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Median</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + tsf(d.median) + "</p></div></div>" + "<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Mode</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + d.mode + "</p></div></div>" + "<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Stand Dev</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + tsf(d.sd) + "</p></div></div>" + "<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Maximum</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + tsf(d.max) + "</p></div></div>" + "<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Minimum</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + tsf(d.min) + "</p></div></div>" + "<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Valid</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + rint(d.valid) + "</p></div></div>" + "<div class=\'form-group\'><label class=\'col-sm-4 control-label\'>Invalid</label><div class=\'col-sm-6\'><p class=\'form-control-static\'>" + rint(d.invalid) + "</p></div></div>");\n}\n\nfunction panelPlots() {\n    // build arrays from nodes in main\n    var vars = [];\n    var ids = [];\n    nodes.forEach(function (n) {\n        vars.push(n.name.replace(/\\(|\\)/g, \'\'));\n        ids.push(n.id);\n    });\n\n    //remove all plots, could be smarter here\n    d3.select(\'#setxLeft\').selectAll(\'svg\').remove();\n    d3.select(\'#tab2\').selectAll(\'svg\').remove();\n    for (var i = 0; i < vars.length; i++) {\n        var node = allNodes[ids[i]];\n        node.setxplot = false;\n        node.subsetplot = false;\n        if (node.plottype === "continuous" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.density)(node, div = "setxLeft", priv);\n            node.subsetplot = true;\n            (0, _plots.density)(node, div = "subset", priv);\n        } else if (node.plottype === "bar" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.bars)(node, div = "setxLeft", priv);\n            node.subsetplot = true;\n            (0, _plots.barsSubset)(node);\n        }\n    }\n\n    d3.select("#setxLeft").selectAll("svg").each(function () {\n        d3.select(this);\n        var regstr = /(.+)_setxLeft_(\\d+)/;\n        var myname = regstr.exec(this.id);\n        var nodeid = myname[2];\n        myname = myname[1];\n        if (!vars.includes(myname)) {\n            allNodes[nodeid].setxplot = false;\n            var temp = "#".concat(myname, "_setxLeft_", nodeid);\n            d3.select(temp).remove();\n            allNodes[nodeid].subsetplot = false;\n            temp = "#".concat(myname, "_tab2_", nodeid);\n            d3.select(temp).remove();\n        }\n    });\n}\n\n// easy functions to collapse panels to base\nfunction rightpanelMedium() {\n    d3.select("#rightpanel").attr("class", "sidepanel container clearfix");\n}\n\nfunction leftpanelMedium() {\n    d3.select("#leftpanel").attr("class", "sidepanel container clearfix");\n}\n\n// converts color codes\nvar hexToRgba = exports.hexToRgba = function hexToRgba(hex) {\n    var int = parseInt(hex.replace(\'#\', \'\'), 16);\n    return \'rgba(\' + [int >> 16 & 255, int >> 8 & 255, int & 255, \'0.5\'].join(\',\') + \')\';\n};\n\n// takes node and color and updates zparams\nfunction setColors(n, c) {\n    if (n.strokeWidth == \'1\') {\n        if (c == gr1Color) {\n            var tempindex = zparams.zgroup1.indexOf(n.name);\n            if (tempindex > -1) {\n                n.group1 = false;\n                zparams.zgroup1.splice(tempindex, 1);\n            } else {\n                n.group1 = true;\n                zparams.zgroup1.push(n.name);\n            };\n        } else if (c == gr2Color) {\n            var tempindex = zparams.zgroup2.indexOf(n.name);\n            if (tempindex > -1) {\n                n.group2 = false;\n                zparams.zgroup2.splice(tempindex, 1);\n            } else {\n                n.group2 = true;\n                zparams.zgroup2.push(n.name);\n            };\n        } else {\n            // adding time, cs, dv, nom to node with no stroke\n            n.strokeWidth = \'4\';\n            n.strokeColor = c;\n            n.nodeCol = taggedColor;\n            var push = function push(_ref3) {\n                var _ref4 = _slicedToArray(_ref3, 2),\n                    color = _ref4[0],\n                    key = _ref4[1];\n\n                if (color != c) return;\n                zparams[key] = Array.isArray(zparams[key]) ? zparams[key] : [];\n                zparams[key].push(n.name);\n                if (key == \'znom\') {\n                    findNodeIndex(n.name, true).nature = "nominal";\n                    transform(n.name, t = null, typeTransform = true);\n                }\n                if (key == \'zdv\') {\n                    // remove group memberships from dv\'s\n                    if (n.group1) {\n                        n.group1 = false;\n                        zparams.zgroup1.splice(zparams.zgroup1.indexOf(n.name), 1);\n                    };\n                    if (n.group2) {\n                        n.group2 = false;\n                        zparams.zgroup2.splice(zparams.zgroup2.indexOf(n.name), 1);\n                    };\n                }\n            };\n            [[dvColor, \'zdv\'], [csColor, \'zcross\'], [timeColor, \'ztime\'], [nomColor, \'znom\']].forEach(push);\n        }\n    } else if (n.strokeWidth == \'4\') {\n        if (c == n.strokeColor) {\n            // deselecting time, cs, dv, nom\n            n.strokeWidth = \'1\';\n            n.strokeColor = _plots.selVarColor;\n            n.nodeCol = colors(n.id);\n            splice(c, n.name, [dvColor, \'zdv\'], [csColor, \'zcross\'], [timeColor, \'ztime\'], [nomColor, \'znom\']);\n            if (nomColor == c && zparams.znom.includes(n.name)) {\n                findNodeIndex(n.name, true).nature = findNodeIndex(n.name, true).defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n        } else {\n            // deselecting time, cs, dv, nom AND changing it to time, cs, dv, nom\n            splice(n.strokeColor, n.name, [dvColor, \'zdv\'], [csColor, \'zcross\'], [timeColor, \'ztime\'], [nomColor, \'znom\']);\n            if (nomColor == n.strokeColor && zparams.znom.includes(n.name)) {\n                findNodeIndex(n.name, true).nature = findNodeIndex(n.name, true).defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n            n.strokeColor = c;\n            if (dvColor == c) {\n                var dvname = n.name;\n                zparams.zdv.push(dvname);\n                if (n.group1) {\n                    // remove group memberships from dv\'s\n                    ngroup1 = false;\n                    zparams.zgroup1.splice(zparams.zgroup1.indexOf(dvname), 1);\n                };\n                if (n.group2) {\n                    ngroup2 = false;\n                    zparams.zgroup2.splice(zparams.zgroup2.indexOf(dvname), 1);\n                };\n            } else if (csColor == c) zparams.zcross.push(n.name);else if (timeColor == c) zparams.ztime.push(n.name);else if (nomColor == c) {\n                zparams.znom.push(n.name);\n                findNodeIndex(n.name, true).nature = "nominal";\n                transform(n.name, t = null, typeTransform = true);\n            }\n        }\n    }\n}\n\nfunction borderState() {\n    zparams.zdv.length > 0 ? $(\'#dvButton .rectColor svg circle\').attr(\'stroke\', dvColor) : $(\'#dvButton\').css(\'border-color\', \'#ccc\');\n    zparams.zcross.length > 0 ? $(\'#csButton .rectColor svg circle\').attr(\'stroke\', csColor) : $(\'#csButton\').css(\'border-color\', \'#ccc\');\n    zparams.ztime.length > 0 ? $(\'#timeButton .rectColor svg circle\').attr(\'stroke\', timeColor) : $(\'#timeButton\').css(\'border-color\', \'#ccc\');\n    zparams.znom.length > 0 ? $(\'#nomButton .rectColor svg circle\').attr(\'stroke\', nomColor) : $(\'#nomButton\').css(\'border-color\', \'#ccc\');\n    zparams.zgroup1.length > 0 ? $(\'#gr1Button .rectColor svg circle\').attr(\'stroke\', gr1Color).attr(\'fill\', gr1Color).attr(\'fill-opacity\', 0.6).attr(\'stroke-opacity\', 0) : $(\'#gr1Button\').css(\'border-color\', \'#ccc\');\n    zparams.zgroup2.length > 0 ? $(\'#gr2Button .rectColor svg circle\').attr(\'stroke\', gr2Color).attr(\'fill\', gr2Color).attr(\'fill-opacity\', 0.6).attr(\'stroke-opacity\', 0) : $(\'#gr2Button\').css(\'border-color\', \'#ccc\');\n}\n\n// small appearance resets, but perhaps this will become a hard reset back to all original allNode values?\nfunction nodeReset(n) {\n    n.strokeColor = _plots.selVarColor;\n    n.strokeWidth = "1";\n    n.nodeCol = n.baseCol;\n}\n\nfunction subsetSelect(btn) {\n    if (dataurl) zparams.zdataurl = dataurl;\n    if (production && zparams.zsessionid == "") {\n        alert("Warning: Data download is not complete. Try again soon.");\n        return;\n    }\n    zparams.zvars = [];\n    zparams.zplot = [];\n    var subsetEmpty = true;\n    // is this the same as zPop()?\n    for (var j = 0; j < nodes.length; j++) {\n        // populate zvars and zsubset arrays\n        zparams.zvars.push(nodes[j].name);\n        var temp = nodes[j].id;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n        if (zparams.zsubset[j].length > 0) {\n            if (zparams.zsubset[j][0] != "") zparams.zsubset[j][0] = Number(zparams.zsubset[j][0]);\n            if (zparams.zsubset[j][1] != "") zparams.zsubset[j][1] = Number(zparams.zsubset[j][1]);\n        }\n        zparams.zplot.push(allNodes[temp].plottype);\n        if (zparams.zsubset[j][1] != "") subsetEmpty = false; // only need to check one\n    }\n\n    if (subsetEmpty == true) {\n        alert("Warning: No new subset selected.");\n        return;\n    }\n\n    var outtypes = [];\n    for (var j = 0; j < allNodes.length; j++) {\n        outtypes.push({\n            varnamesTypes: allNodes[j].name,\n            nature: allNodes[j].nature,\n            numchar: allNodes[j].numchar,\n            binary: allNodes[j].binary,\n            interval: allNodes[j].interval\n        });\n    }\n\n    var subsetstuff = {\n        zdataurl: zparams.zdataurl,\n        zvars: zparams.zvars,\n        zsubset: zparams.zsubset,\n        zsessionid: zparams.zsessionid,\n        zplot: zparams.zplot,\n        callHistory: callHistory,\n        typeStuff: outtypes\n    };\n\n    var jsonout = JSON.stringify(subsetstuff);\n    var urlcall = rappURL + "subsetapp";\n    var solajsonout = "solaJSON=" + jsonout;\n    cdb("urlcall out: ", urlcall);\n    cdb("POST out: ", solajsonout);\n\n    function subsetSelectSuccess(btn, json) {\n        selectLadda.stop(); // stop motion\n        $("#btnVariables").trigger("click"); // programmatic clicks\n        $("#btnModels").trigger("click");\n\n        var grayOuts = [];\n        var rCall = [];\n        rCall[0] = json.call;\n\n        // store contents of the pre-subset space\n        zPop();\n        var myNodes = jQuery.extend(true, [], allNodes);\n        var myParams = jQuery.extend(true, {}, zparams);\n        var myTrans = jQuery.extend(true, [], trans);\n        var myForce = jQuery.extend(true, [], forcetoggle);\n        var myPreprocess = jQuery.extend(true, {}, preprocess);\n        var myLog = jQuery.extend(true, [], logArray);\n        var myHistory = jQuery.extend(true, [], callHistory);\n\n        spaces[myspace] = {\n            "allNodes": myNodes,\n            "zparams": myParams,\n            "trans": myTrans,\n            "force": myForce,\n            "preprocess": myPreprocess,\n            "logArray": myLog,\n            "callHistory": myHistory\n        };\n\n        // remove pre-subset svg\n        var selectMe = "#m".concat(myspace);\n        d3.select(selectMe).attr(\'class\', \'item\');\n        selectMe = "#whitespace".concat(myspace);\n        d3.select(selectMe).remove();\n\n        myspace = spaces.length;\n        callHistory.push({\n            func: "subset",\n            zvars: jQuery.extend(true, [], zparams.zvars),\n            zsubset: jQuery.extend(true, [], zparams.zsubset),\n            zplot: jQuery.extend(true, [], zparams.zplot)\n        });\n\n        // this is to be used to gray out and remove listeners for variables that have been subsetted out of the data\n        function varOut(v) {\n            // if in nodes, remove gray out in left panel\n            // make unclickable in left panel\n            for (var i = 0; i < v.length; i++) {\n                var selectMe = v[i].replace(/\\W/g, "_");\n                byId(selectMe).style.color = hexToRgba(grayColor);\n                selectMe = "p#".concat(selectMe);\n                d3.select(selectMe).on("click", null);\n            }\n        }\n\n        showLog(\'subset\', rCall);\n        reWriteLog();\n\n        d3.select("#innercarousel").append(\'div\').attr(\'class\', \'item active\').attr(\'id\', function () {\n            return "m".concat(myspace.toString());\n        }).append(\'svg\').attr(\'id\', \'whitespace\');\n        svg = d3.select("#whitespace");\n\n        d3.json(json.url, function (error, json) {\n            if (error) {\n                return console.warn(error);\n            }\n            var jsondata = getVariableData(json);\n\n            for (var key in jsondata) {\n                var myIndex = findNodeIndex(key);\n\n                allNodes[myIndex].plotx = undefined;\n                allNodes[myIndex].ploty = undefined;\n                allNodes[myIndex].plotvalues = undefined;\n                allNodes[myIndex].plottype = "";\n\n                jQuery.extend(true, allNodes[myIndex], jsondata[key]);\n                allNodes[myIndex].subsetplot = false;\n                allNodes[myIndex].subsetrange = ["", ""];\n                allNodes[myIndex].setxplot = false;\n                allNodes[myIndex].setxvals = ["", ""];\n\n                if (allNodes[myIndex].valid == 0) {\n                    grayOuts.push(allNodes[myIndex].name);\n                    allNodes[myIndex].grayout = true;\n                }\n            }\n            rePlot();\n\n            layout(layoutAdd);\n        });\n\n        varOut(grayOuts);\n    }\n\n    selectLadda.start(); //start button motion\n    makeCorsRequest(urlcall, btn, subsetSelectSuccess, function (btn) {\n        return selectLadda.stop();\n    }, solajsonout);\n}\n\nfunction readPreprocess(data) {\n    return new Promise(function (resolve, _) {\n        priv = data.dataset.private || priv;\n        Object.keys(data.variables).forEach(function (k) {\n            return preprocess[k] = data.variables[k];\n        });\n        resolve();\n    });\n}\n\n// removes all the children svgs inside subset and setx divs\nfunction rePlot() {\n    d3.select(\'#tab2\').selectAll(\'svg\').remove();\n    d3.select(\'#setx\').selectAll(\'svg\').remove();\n    allNodes.forEach(function (n) {\n        return n.setxplot = n.subsetplot = false;\n    });\n}\n\nvar showLog = function showLog(val, rCall) {\n    logArray.push((val + \': \').concat(rCall[0]));\n    _mithril2.default.redraw();\n};\n\nfunction reWriteLog() {\n    d3.select("#collapseLog div.panel-body").selectAll("p").remove();\n    d3.select("#collapseLog div.panel-body").selectAll("p").data(logArray).enter().append("p").text(function (d) {\n        return d;\n    });\n}\n\n// acts as if the user clicked in whitespace. useful when restart() is outside of scope\nvar fakeClick = exports.fakeClick = function fakeClick() {\n    var ws = "#whitespace".concat(myspace);\n    // d3 and programmatic events don\'t mesh well, here\'s a SO workaround that looks good but uses jquery...\n    jQuery.fn.d3Click = function () {\n        this.each(function (i, e) {\n            var evt = document.createEvent("MouseEvents");\n            evt.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            e.dispatchEvent(evt);\n        });\n    };\n    $(ws).d3Click();\n    d3.select(ws).classed(\'active\', false);\n};\n\n//EndSession(SessionContext) returns (Response) {}\nfunction endsession() {\n    var SessionContext = apiSession(zparams.zsessionid);\n\n    var jsonout = JSON.stringify(SessionContext);\n\n    var urlcall = d3mURL + "/endsession";\n    var solajsonout = "grpcrequest=" + jsonout;\n    console.log("EndSession: ");\n    console.log(solajsonout);\n    console.log("urlcall: ", urlcall);\n\n    function endSuccess(btn, Response) {\n        console.log(Response);\n    }\n\n    function endFail(btn) {\n        console.log("end session failed");\n    }\n\n    makeCorsRequest(urlcall, "nobutton", endSuccess, endFail, solajsonout);\n}\n\n//rpc ListPipelines(PipelineListRequest) returns (PipelineListResult) {}\nfunction listpipelines() {\n    var SessionContext = apiSession(zparams.zsessionid);\n    var PipeLineListRequest = { SessionContext: SessionContext };\n\n    var jsonout = JSON.stringify(PipeLineListRequest);\n\n    var urlcall = d3mURL + "/listpipelines";\n    var solajsonout = "grpcrequest=" + jsonout;\n    console.log("PipelineListRequest: ");\n    console.log(solajsonout);\n    console.log(urlcall);\n\n    function listPipesSuccess(btn, PipelineListResult) {\n        console.log(PipelineListResult);\n        //hardcoded pipes for now\n        var pipes = ["", "id1", "id2", "id3", "id4", "id5"];\n        d3.select("#results").selectAll("p").data(pipes).enter().append("p").attr("id", "_pipe_".concat).text(function (d) {\n            return d;\n        }).attr(\'class\', \'item-default\').on("click", function () {\n            if (this.className == "item-select") {\n                return;\n            } else {\n                d3.select("#results").select("p.item-select").attr(\'class\', \'item-default\');\n                d3.select(this).attr(\'class\', "item-select");\n            }\n        });\n\n        d3.select("#setxRight").selectAll("p").data(pipes).enter().append("p").attr("id", "_setxpipe_".concat).text(function (d) {\n            return d;\n        }).attr(\'class\', \'item-default\').on("click", function () {\n            if (this.className == "item-select") {\n                return;\n            } else {\n                d3.select("#setxRight").select("p.item-select").attr(\'class\', \'item-default\');\n                d3.select(this).attr(\'class\', "item-select");\n            }\n        });\n    }\n\n    function listPipesFail(btn) {\n        console.log("list pipelines failed");\n    }\n\n    makeCorsRequest(urlcall, "nobutton", listPipesSuccess, listPipesFail, solajsonout);\n}\n\n// rpc ExecutePipeline(PipelineExecuteRequest) returns (stream PipelineExecuteResult) {}\nfunction executepipeline() {\n    var SessionContext = apiSession(zparams.zsessionid);\n    var pipelineid = document.getElementById(\'setxRight\').querySelector(\'p.item-select\');\n    if (pipelineid == null) {\n        alert("Please select a pipeline to execute on.");return;\n    }\n    pipelineid = pipelineid.innerText;\n\n    zPop();\n    zparams.callHistory = callHistory;\n    var jsonout = JSON.stringify(zparams);\n\n    var features = apiFeature(zparams.zvars, "some uri");\n    var data = [];\n\n    //this will just set zparams.zsetx to the mean, which is default for setx plots\n    //note that if setxplot is modified, it will NOT == "" because zparams.zsetx is modified when the setx plot slider is moved for the first time\n    for (var i = 0; i < zparams.zvars.length; i++) {\n        var mydata = [];\n        var mymean = allNodes[findNodeIndex(zparams.zvars[i])].mean;\n        if (zparams.zsetx[i][0] == "") {\n            mydata[0] = mymean;\n        } else if (zparams.zsetx[i][0] != mymean) {\n            mydata[0] = zparams.zsetx[i][0];\n        }\n        if (zparams.zsetx[i][1] == "") {\n            mydata[1] = allNodes[findNodeIndex(zparams.zvars[i])].mean;\n        } else if (zparams.zsetx[i][1] != mymean) {\n            mydata[1] = zparams.zsetx[i][1];\n        }\n        data.push(mydata);\n    }\n\n    var PipelineExecuteRequest = { SessionContext: SessionContext, pipelineid: pipelineid, features: features, data: data };\n\n    jsonout = JSON.stringify(PipelineExecuteRequest);\n\n    var urlcall = d3mURL + "/executepipeline";\n    var solajsonout = "grpcrequest=" + jsonout;\n    console.log("PipelineExecuteRequest: ");\n    console.log(solajsonout);\n    console.log("urlcall: ", urlcall);\n\n    function executePipeSuccess(btn, PipelineExecuteResult) {\n        alert("pipeline executed");\n        console.log(PipelineExecuteResult);\n    }\n\n    function executePipeFail(btn) {\n        console.log("execute pipelines failed");\n    }\n\n    makeCorsRequest(urlcall, "nobutton", executePipeSuccess, executePipeFail, solajsonout);\n}\n\n// this is our call to django to update the problem schema\n// rpc UpdateProblemSchema(UpdateProblemSchemaRequest) returns (Response) {}\nfunction updateSchema(type, updates, lookup) {\n    var ReplaceProblemSchemaField = _defineProperty({}, type, lookup[updates[type]][1]);\n    //    let valuenum = lookup[updates[type]][2];\n    var UpdateProblemSchemaRequest = { ReplaceProblemSchemaField: ReplaceProblemSchemaField };\n\n    var jsonout = JSON.stringify(UpdateProblemSchemaRequest);\n\n    var urlcall = d3mURL + "/updateproblemschema";\n    var solajsonout = "grpcrequest=" + jsonout;\n    console.log("UpdateProblemSchemaRequest: ");\n    console.log(solajsonout);\n    console.log("urlcall: ", urlcall);\n\n    function usSuccess(btn, Response) {\n        console.log(Response);\n    }\n\n    function usFail(btn) {\n        console.log("update schema failed");\n    }\n\n    makeCorsRequest(urlcall, "nobutton", usSuccess, usFail, solajsonout);\n}\n\n// Find something centerish to the vertices of a convex hull\n// (specifically, the center of the bounding box)\nfunction jamescentroid(coord) {\n    var minx = coord[0][0],\n        maxx = coord[0][0],\n        miny = coord[0][1],\n        maxy = coord[0][1];\n    for (var j = 1; j < coord.length; j++) {\n        if (coord[j][0] < minx) minx = coord[j][0];\n        if (coord[j][1] < miny) miny = coord[j][1];\n        if (coord[j][0] > maxx) maxx = coord[j][0];\n        if (coord[j][1] > maxy) maxy = coord[j][1];\n    };\n    return [(minx + maxx) / 2, (miny + maxy) / 2];\n};\n\n// Define each pebble radius.\n// Presently, most pebbles are scaled to radius set by global allR.\n// Members of groups are scaled down if group gets large.\nfunction setPebbleRadius(d) {\n    if (d.group1 || d.group2) {\n        // if a member of a group, need to calculate radius size\n        var uppersize = 7;\n        var ng1 = d.group1 ? zparams.zgroup1.length : 1; // size of group1, if a member of group 1\n        var ng2 = d.group2 ? zparams.zgroup2.length : 1; // size of group2, if a member of group 2\n        var maxng = Math.max(ng1, ng2); // size of the largest group variable is member of\n        return maxng > uppersize ? allR * Math.sqrt(uppersize / maxng) : allR; // keep total area of pebbles bounded to pi * allR^2 * uppersize, thus shrinking radius for pebbles in larger groups                \n    } else {\n            return allR; // nongroup members get the common global radius\n        }\n};\n\n// Define each pebble charge.\n// This was the previous charge setting:\n//return ((zparams.zgroup1.indexOf(node.name) < 0 ) & (zparams.zgroup2.indexOf(node.name) < 0 ))   ? -800 : -400;  // -1 is the value if no index position found\nfunction setPebbleCharge(d) {\n    if (d.group1 || d.group2) {\n        if (d.forefront) {\n            // pebbles packed in groups repel others on mouseover\n            return -1000;\n        }\n        var uppersize = 7;\n        var ng1 = d.group1 ? zparams.zgroup1.length : 1; // size of group1, if a member of group 1\n        var ng2 = d.group2 ? zparams.zgroup2.length : 1; // size of group2, if a member of group 2\n        var maxng = Math.max(ng1, ng2); // size of the largest group variable is member of\n        return maxng > uppersize ? -400 * (uppersize / maxng) : -400; // decrease charge as pebbles become smaller, so they can pack together\n    } else {\n        return -800;\n    }\n};\n\nfunction expandrightpanel() {\n    document.getElementById(\'rightpanel\').classList.add("expandpanelfull");\n    console.log("HERE");\n}\n\nfunction toggleRightButtons(set) {\n\n    function setWidths(btns) {\n        var mywidth = 100 / btns.length;\n        mywidth = mywidth.toString() + \'%\';\n        var expandwidth = \'35%\';\n        var shrinkwidth = 65 / (btns.length - 1);\n        shrinkwidth = shrinkwidth.toString() + \'%\';\n        var mylis = document.getElementById(\'rightpanel\').querySelectorAll(".accordian li");\n        // hardly ever runs on the page\n        for (var i = 0; i < mylis.length; i++) {\n            mylis[i].style.width = mywidth;\n            mylis[i].addEventListener(\'mouseover\', function () {\n                for (var j = 0; j < mylis.length; j++) {\n                    mylis[j].style.width = shrinkwidth;\n                }\n                this.style.width = expandwidth;\n            });\n            mylis[i].addEventListener(\'mouseout\', function () {\n                for (var j = 0; j < mylis.length; j++) {\n                    mylis[j].style.width = mywidth;\n                }\n            });\n        }\n    }\n\n    if (set == "tasks") {\n\n        document.getElementById(\'btnModels\').classList.add("noshow");\n        document.getElementById(\'btnSetx\').classList.add("noshow");\n        document.getElementById(\'btnResults\').classList.add("noshow");\n\n        var mybtns = document.getElementById(\'rightpanelbuttons\').querySelectorAll(".btn:not(.noshow)");\n        setWidths(mybtns);\n    } else if (set == "all") {\n        // first remove noshow class\n        var _mybtns = document.getElementById(\'rightpanelbuttons\').querySelectorAll(".noshow");\n        for (var i = 0; i < _mybtns.length; i++) {\n            _mybtns[i].classList.remove("noshow");\n        }\n\n        // droping models for d3m_mode\n        document.getElementById(\'btnModels\').classList.add("noshow");\n\n        // then select all the buttons\n        _mybtns = document.getElementById(\'rightpanelbuttons\').querySelectorAll(".btn:not(.noshow)");\n        setWidths(_mybtns);\n    }\n    if (set == "models") {\n        document.getElementById(\'btnModels\').style.display = \'inline\';\n        document.getElementById(\'btnSetx\').style.display = \'inline\';\n        document.getElementById(\'btnResults\').style.display = \'inline\';\n\n        document.getElementById(\'btnType\').style.display = \'none\';\n        document.getElementById(\'btnSubtype\').style.display = \'none\';\n        document.getElementById(\'btnMetrics\').style.display = \'none\';\n        document.getElementById(\'btnOutputs\').style.display = \'none\';\n    }\n}\n\n// scatterplot function to go to plots.js to be reused\nfunction bivariatePlot(x_Axis, y_Axis, x_Axis_name, y_Axis_name) {\n\n    d3.select("#setxMiddle").html("");\n    d3.select("#setxMiddle").select("svg").remove();\n\n    console.log("bivariate plot called");\n    // scatter plot\n\n    var data_plot = [];\n    var nanCount = 0;\n    for (var i = 0; i < 1000; i++) {\n        if (isNaN(x_Axis[i]) || isNaN(y_Axis[i])) {\n            nanCount++;\n        } else {\n            var newNumber1 = x_Axis[i];\n            var newNumber2 = y_Axis[i];\n            data_plot.push({ xaxis: newNumber1, yaxis: newNumber2, score: Math.random() * 100 });\n        }\n    }\n\n    var margin = { top: 20, right: 15, bottom: 40, left: 60 },\n        width = 500 - margin.left - margin.right,\n        height = 280 - margin.top - margin.bottom;\n    var padding = 100;\n\n    var min_x = d3.min(data_plot, function (d, i) {\n        return data_plot[i].xaxis;\n    });\n    var max_x = d3.max(data_plot, function (d, i) {\n        return data_plot[i].xaxis;\n    });\n    var avg_x = (max_x - min_x) / 10;\n    var min_y = d3.min(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var max_y = d3.max(data_plot, function (d, i) {\n        return data_plot[i].yaxis;\n    });\n    var avg_y = (max_y - min_y) / 10;\n\n    var xScale = d3.scale.linear().domain([min_x - avg_x, max_x + avg_x]).range([0, width]);\n\n    var yScale = d3.scale.linear().domain([min_y - avg_y, max_y + avg_y]).range([height, 0]);\n\n    var xAxis = d3.svg.axis().scale(xScale).orient(\'bottom\').tickSize(-height);\n\n    var yAxis = d3.svg.axis().scale(yScale).orient(\'left\').ticks(5).tickSize(-width);\n\n    var zoom = d3.behavior.zoom().x(xScale).y(yScale).scaleExtent([1, 10]).on("zoom", zoomed);\n\n    var chart_scatter = d3.select(\'#setxMiddle\').append(\'svg:svg\').attr(\'width\', width + margin.right + margin.left).attr(\'height\', height + margin.top + margin.bottom);\n    // .call(zoom); dropping this for now, until the line zooms properly\n\n    var main1 = chart_scatter.append(\'g\').attr(\'transform\', \'translate(\' + margin.left + \',\' + margin.top + \')\').attr(\'width\', width + margin.right + margin.left).attr(\'height\', height + margin.top + margin.bottom).attr(\'class\', \'main\');\n\n    var gX = main1.append(\'g\').attr(\'transform\', \'translate(0,\' + height + \')\').attr(\'class\', \'x axis\').call(xAxis);\n\n    var gY = main1.append(\'g\').attr(\'transform\', \'translate(0,0)\').attr(\'class\', \'y axis\').call(yAxis);\n\n    var clip = main1.append("defs").append("svg:clipPath").attr("id", "clip").append("svg:rect").attr("id", "clip-rect").attr("x", "0").attr("y", "0").attr(\'width\', width).attr(\'height\', height);\n\n    main1.append("g").attr("clip-path", "url(#clip)").selectAll("circle").data(data_plot).enter().append("circle").attr("cx", function (d, i) {\n        return xScale(data_plot[i].xaxis);\n    }).attr("cy", function (d, i) {\n        return yScale(data_plot[i].yaxis);\n    }).attr("r", 2).style("fill", "#B71C1C");\n    chart_scatter.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + padding / 5 + "," + height / 2 + ")rotate(-90)") // text is drawn off the screen top left, move down and out and rotate\n    .text(y_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    chart_scatter.append("text").attr("text-anchor", "middle") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr("transform", "translate(" + width / 2 + "," + (height + padding / 2) + ")") // centre below axis\n    .text(x_Axis_name).style("fill", "#424242").style("text-indent", "20px").style("font-size", "12px").style("font-weight", "bold");\n\n    main1.append("line").attr("x1", xScale(min_x)).attr("y1", yScale(min_x)).attr("x2", xScale(max_x)).attr("y2", yScale(max_x)).attr("stroke-width", 2).attr("stroke", "black");\n\n    function zoomed() {\n        var panX = d3.event.translate[0];\n        var panY = d3.event.translate[1];\n        var scale = d3.event.scale;\n\n        panX = panX > 10 ? 10 : panX;\n        var maxX = -(scale - 1) * width - 10;\n        panX = panX < maxX ? maxX : panX;\n\n        panY = panY > 10 ? 10 : panY;\n        var maxY = -(scale - 1) * height - 10;\n        panY = panY < maxY ? maxY : panY;\n\n        zoom.translate([panX, panY]);\n\n        main1.select(".x.axis").call(xAxis);\n        main1.select(".y.axis").call(yAxis);\n        main1.selectAll("circle").attr("cx", function (d, i) {\n            console.log("circle x ", xScale(5));\n            return xScale(data_plot[i].xaxis);\n        }).attr("cy", function (d, i) {\n            return yScale(data_plot[i].yaxis);\n        }).attr("r", 2.5).style("fill", "#B71C1C");\n\n        // below doesn\'t work, so I\'m just dropping the zoom\n        main1.select("line").attr("x1", function (d, i) {\n            return xScale(min_x);\n        }).attr("y1", function (d, i) {\n            return xScale(min_x);\n        }).attr("x2", function (d, i) {\n            return xScale(max_x);\n        }).attr("y2", function (d, i) {\n            return yScale(max_x);\n        }).attr("stroke-width", 2).attr("stroke", "black");\n    }\n\n    //  d3.select("#NAcount").text("There are " + nanCount + " number of NA values in the relation.");\n\n}\n\nfunction setxTable(features) {\n    function tabulate(data, columns) {\n        var table = d3.select(\'#setxLeftBottom\').append(\'table\');\n        var thead = table.append(\'thead\');\n        var tbody = table.append(\'tbody\');\n\n        // append the header row\n        thead.append(\'tr\').selectAll(\'th\').data(columns).enter().append(\'th\').text(function (column) {\n            return column;\n        });\n\n        // create a row for each object in the data\n        var rows = tbody.selectAll(\'tr\').data(data).enter().append(\'tr\');\n\n        // create a cell in each row for each column\n        var cells = rows.selectAll(\'td\').data(function (row) {\n            return columns.map(function (column) {\n                return { column: column, value: row[column] };\n            });\n        }).enter().append(\'td\').text(function (d) {\n            return d.value;\n        });\n\n        return table;\n    }\n\n    var mydata = [];\n    for (var i = 0; i < features.length; i++) {\n        mydata.push({ "Variables": features[i], "From": 1, "To": 3 });\n    }\n\n    // render the table(s)\n    tabulate(mydata, [\'Variables\', \'From\', \'To\']); // 2 column table\n}\n\n// D3M API HELPERS\n// because these get built in various places, pulling them out for easy manipulation\nfunction apiFeature(vars, uri) {\n    var out = [];\n    for (var i = 0; i < vars.length; i++) {\n        out.push({ featureId: vars[i], dataUri: uri });\n    }\n    return out;\n}\n\n// silly but perhaps useful if in the future SessionContext requires more things (as suggest by core)\nfunction apiSession(context) {\n    return { "session_id": context };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();\n\nexports.density = density;\nexports.bars = bars;\nexports.barsSubset = barsSubset;\nexports.densityNode = densityNode;\nexports.barsNode = barsNode;\nvar d3Color = \'#1f77b4\'; // d3\'s default blue\nvar selVarColor = exports.selVarColor = \'#fa8072\'; // d3.rgb("salmon");\n\n// function to use d3 to graph density plots with preprocessed data\nfunction density(node, div, priv) {\n    div = { subset: \'#tab2\', setxLeft: \'#setxLeft\', varSummary: \'#tab3\' }[div];\n    if (!div) return alert("Error: incorrect div selected for plots");\n\n    var _ref = [node.plotx, node.ploty],\n        xVals = _ref[0],\n        yVals = _ref[1];\n\n    if (priv && node.plotCI) {\n        var _map = [\'upperBound\', \'lowerBound\'].map(function (bound) {\n            return xVals.map(function (x, i) {\n                return { x: +x, y: +node.plotCI[bound][i] };\n            });\n        }),\n            _map2 = _slicedToArray(_map, 2),\n            _upperError = _map2[0],\n            _lowerError = _map2[1];\n\n        console.log(\'upperError\\n\', _upperError);\n    }\n\n    var tempWidth = d3.select(div).style("width");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n\n    var tw = document.getElementById(\'main\').offsetWidth;\n\n    var tempHeight = d3.select(div).style("height");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 10\n    };\n\n    // Need to fix automatic width and height settings for leftpanel (#tab2, #tab3)\n    if (div == "#tab3") {\n        width = 0.7 * (width - margin.left - margin.right), height = 0.3 * (height - margin.top - margin.bottom);\n    } else if (div == "#tab2") {\n        width = 200;\n        height = 120;\n    } else if (div == "#setxLeft") {\n        width = tw * .185 - margin.left - margin.right; //rightpanel.expand is 40 percent, setxLeft to 50 percent, toggle bar is 16px, padding, it\'s all about .185\n        height = width * .6; //height to width is .6\n    } else {\n        width = 0.35 * (width - margin.left - margin.right), height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n    var invx = d3.scale.linear().range([d3.min(xVals), d3.max(xVals)]).domain([0, width]);\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n    var xAxis = d3.svg.axis().scale(x).ticks(5).orient("bottom");\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n    var brush = d3.svg.brush().x(x).extent(node.subsetrange).on("brush", brushed);\n    var brush2 = d3.svg.brush().x(x).on("brush", brushed2);\n    var area = d3.svg.area().interpolate("monotone").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n    var line = d3.svg.line().x(function (d) {\n        return x(d.x);\n    }).y(function (d) {\n        return y(d.y);\n    }).interpolate("monotone");\n\n    // cumbersome to treat "tab3" differently, but works for now\n    // tab3, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (div == "#tab3") {\n        var plotsvg = d3.select(div).selectAll("svg").remove();\n        plotsvg = d3.select(div).append("svg").attr("id", function () {\n            return node.name.toString().concat(div.substr(1));\n        }).style("width", 300) // set height to the height of #main.left\n        .style("height", 200).append("g").attr("transform", \'translate(\' + margin.left + \',\' + margin.top + \')\');\n    } else {\n        var plotsvg = d3.select(div).append("svg").attr("id", function () {\n            return node.name.toString().replace(/\\(|\\)/g, "").concat("_", div.substr(1), "_", node.id);\n        }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n        .style("height", height + margin.top + margin.bottom).append("g").attr("transform", \'translate(\' + margin.left + \',\' + margin.top + \')\');\n    };\n    plotsvg.append("path").datum(xVals.map(function (x, i) {\n        return { x: +x, y: +node.ploty[i] };\n    })).attr("class", "area").attr("d", area);\n\n    //add upper bound\n    priv && node.plotCI && plotsvg.append("path").attr("class", "upperError").datum(upperError).attr("d", area);\n\n    //add lower bound\n    priv && node.plotCI && plotsvg.append("path").attr("class", "lowerError").datum(lowerError).attr("d", area);\n\n    plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(node.name);\n\n    // add brush if subset\n    if (div == "#tab2") {\n        plotsvg.append("text").attr("id", "range").attr("x", 25).attr("y", height + 40).text(function () {\n            return "Range: ".concat(d3.min(xVals).toPrecision(4), " to ", d3.max(xVals).toPrecision(4));\n        });\n        plotsvg.append("g").attr("class", "x brush").call(brush).selectAll("rect").attr("height", height);\n    }\n\n    // add z lines and sliders setx\n    if (div == "#setxLeft") {\n        plotsvg.append("text").attr("id", "range").attr("x", 25).attr("y", height + 40).text(function () {\n            return "x: ".concat((+node.mean).toPrecision(4));\n        });\n\n        plotsvg.append("text").attr("id", "range2").attr("x", 25).attr("y", height + 50).text(function () {\n            return "x1: ".concat((+node.mean).toPrecision(4));\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate("linear");\n\n        var colSeq = ["#A2CD5A", "orange", "red"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (d3.min(xVals) - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (d3.max(xVals) - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height * .8 + ")").call(d3.svg.axis().scale(x).ticks(0).orient("bottom"));\n        var slider = plotsvg.append("g").attr("class", "slider").call(brush);\n        var handle = slider.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .7 + ")").attr("points", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[0] == \'\' ? x(node.mean) : x(node.setxvals[0]);\n            return xnm - s + "," + -s + " " + (xnm + s) + "," + -s + " " + xnm + "," + s * 1.3;\n        });\n        var slider2 = plotsvg.append("g").attr("class", "slider").call(brush2);\n        var handle2 = slider2.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .9 + ")").attr("points", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[1] == \'\' ? x(node.mean) : x(node.setxvals[1]);\n            return xnm - s + "," + s + " " + (xnm + s) + "," + s + " " + xnm + "," + -s * 1.3;\n        });\n    }\n\n    // brushing functions\n    function brushed() {\n        if (div == "#tab2") {\n            plotsvg.select("text#range").text(function () {\n                return brush.empty() ? "Range: ".concat(d3.min(xVals).toPrecision(4), " to ", d3.max(xVals).toPrecision(4)) : "Range: ".concat(brush.extent()[0].toPrecision(4), " to ", brush.extent()[1].toPrecision(4));\n            });\n            node.subsetrange = brush.extent()[0].toPrecision(4) != brush.extent()[1].toPrecision(4) ? [brush.extent()[0].toPrecision(4), brush.extent()[1].toPrecision(4)] : ["", ""];\n        } else if (div == "#setxLeft") {\n            var value = brush.extent()[0];\n            var s = 6;\n            if (d3.event.sourceEvent) {\n                value = x.invert(d3.mouse(this)[0]);\n                brush.extent([value, value]);\n            }\n\n            // set x position of slider center\n            var xpos = x(value);\n            if (value > d3.max(xVals)) {\n                // dragged past max\n                xpos = x(d3.max(xVals));\n            } else if (value < d3.min(xVals)) {\n                // dragged past min\n                xpos = x(d3.min(xVals));\n            } else {\n                var m = +node.mean;\n                var sd = +node.sd;\n                var zScore = (value - m) / sd; // z-score\n                var zRound = Math.round(zScore); // nearest integer z-score\n                if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                    xpos = x(m + zRound * sd);\n            }\n\n            // create slider symbol and text\n            handle.attr("points", function (_) {\n                return xpos - s + "," + -s + " " + (xpos + s) + "," + -s + " " + xpos + "," + s * 1.3;\n            });\n            plotsvg.select("text#range").text(function () {\n                return "x: ".concat(invx(xpos).toPrecision(4));\n            });\n            node.setxvals[0] = invx(xpos).toPrecision(4);\n        }\n    }\n\n    // certainly a more clever way to do this, but for now it\'s basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > d3.max(xVals)) {\n            // dragged past max\n            xpos = x(d3.max(xVals));\n        } else if (value < d3.min(xVals)) {\n            // dragged past min\n            xpos = x(d3.min(xVals));\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                xpos = x(m + zRound * sd);\n        }\n\n        // create slider symbol and text\n        handle2.attr("points", function (_) {\n            return xpos - s + "," + s + " " + (xpos + s) + "," + s + " " + xpos + "," + -s * 1.3;\n        });\n        plotsvg.select("text#range2").text(function () {\n            return "x1: ".concat(invx(xpos).toPrecision(4));\n        });\n        node.setxvals[1] = invx(xpos).toPrecision(4);\n    }\n}\n\nfunction bars(node, div, priv) {\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var ciUpperVals = new Array();\n    var ciLowerVals = new Array();\n    var ciSize;\n\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature == "nominal") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[xi] = node.plotValuesCI.lowerBound[keys[i]];\n                    ciUpperVals[xi] = node.plotValuesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[xi] - ciLowerVals[xi];\n            };\n\n            yValKey.push({\n                y: yVals[xi],\n                x: keys[i]\n            });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n        ciUpperVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n        ciLowerVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            console.log("plotvalues in bars");\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[i] = node.plotvaluesCI.lowerBound[keys[i]];\n                    ciUpperVals[i] = node.plotvaluesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[i] - ciLowerVals[i];\n            }\n        }\n    }\n\n    if (yVals.length > 15 & node.numchar == "numeric" || yVals.length > 5 & node.numchar == "character") plotXaxis = false;\n    var maxY = d3.max(yVals); // in the future, set maxY to the value of the maximum confidence limit\n    if (priv && node.plotvaluesCI) maxY = d3.max(ciUpperVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var mydiv = void 0;\n    if (div == "setxLeft") mydiv = "#setxLeft";else if (div == "varSummary") mydiv = "#tab3";else return alert("Error: incorrect div selected for plots");\n\n    var tempWidth = d3.select(mydiv).style("width");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n    var tempHeight = d3.select(mydiv).style("height");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 10\n    };\n    var tw = document.getElementById(\'main\').offsetWidth;\n\n    // Need to fix automatic width and height settings for leftpanel (#tab2, #tab3)\n    if (mydiv == "#tab3") {\n        width = 0.7 * (width - margin.left - margin.right);\n        height = 0.3 * (height - margin.top - margin.bottom);\n    } else if (mydiv == "#setxLeft") {\n        //width = 200;\n        //height = 120;\n        width = tw * .185 - margin.left - margin.right; //rightpanel.expand is 40 percent, setxLeft to 50 percent, toggle bar is 16px, padding, it\'s all about .185\n        height = width * .6; //height to width is .6\n    } else {\n        width = 0.35 * (width - margin.left - margin.right);\n        height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    if (priv && node.stabilityBin) {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 1.5]).range([0, width]);\n    } else {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n    }\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient("bottom");\n\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n\n    var brush = d3.svg.brush().x(x).extent(function () {\n        return node.subsetrange.length == 1 ? [node.subsetrange[0], node.subsetrange[0]] : node.subsetrange;\n    }).on("brush", brushed);\n\n    var brush2 = d3.svg.brush().x(x).on("brush", brushed2);\n\n    // Create SVG element\n    // cumbersome to treat "tab3" differently, but works for now\n    // tab3, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (mydiv == "#tab3") {\n        var plotsvg = d3.select(mydiv).selectAll("svg").remove();\n\n        var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n            return node.name.toString().concat(mydiv.substr(1));\n        }).style("width", 300) //setting height to the height of #main.left\n        .style("height", 200).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n    } else {\n        var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n            var myname = node.name.toString();\n            myname = myname.replace(/\\(|\\)/g, "");\n            return myname.concat("_", mydiv.substr(1), "_", node.id);\n        }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n        .style("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n    };\n\n    var rectWidth = x(minX + 0.5 - 2 * barPadding); //the "width" is the coordinate of the end of the first bar\n\n    plotsvg.selectAll("rect").data(yVals).enter().append("rect").attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(maxY - d);\n    }).attr("width", rectWidth).attr("height", y).attr("fill", "#1f77b4");\n\n    // draw error bars, threshold line and extra bin\n    if (priv) {\n        if (yVals.length <= 20) {\n            plotsvg.selectAll("line").data(ciUpperVals).enter().append("line").style("stroke", "black").attr("x1", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr("y2", function (d) {\n                var y2 = y(maxY - d + ciSize);\n                return y2 >= y(maxY) ? y(maxY) : y2;\n            });\n\n            //draw top ticks on error bars\n            //need to fix the height of the graphs - the tops of error bars are getting cut off\n            plotsvg.selectAll(".topTick").data(ciUpperVals).enter().append("line").attr("class", "topTick").style("stroke", "black").attr("x1", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding); //make tick bigger to increase visibility\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth; //make tick bigger to increase visibility\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr("y2", function (d) {\n                return y(maxY - d);\n            });\n\n            // draw bottom ticks of error bars\n            plotsvg.selectAll(".bottomTick").data(ciLowerVals).enter().append("line").attr("class", "bottomTick").style("stroke", "black").attr("x1", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding);\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth;\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr("y2", function (d) {\n                return y(maxY - d);\n            });\n        } else {\n            plotsvg.selectAll(".denseError").data(yVals).enter().append("rect").attr("class", "denseError").attr("x", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding);\n            }).attr("y", function (d) {\n                return y(maxY - d) - .1 * y(d);\n            }).attr("width", rectWidth).attr("height", function (d) {\n                return y(maxY - d) + .1 * y(d) - (y(maxY - d) - .1 * y(d));\n            }).attr("fill", "silver");\n        }\n\n        //if statement for stability histograms\n        //extra stability bin\n        if (node.stabilityBin) {\n            plotsvg.append("rect").attr("x", x(maxX + 0.5 - barPadding)).attr("y", y(maxY) - node.stabilityBin).attr("width", rectWidth).attr("height", node.stabilityBin).attr("fill", "silver");\n        }\n\n        //threshold line\n        if (node.threshold) {\n            plotsvg.append("line").style("stroke", "black").attr("x1", x(minX - 0.5 + barPadding)).attr("y1", y(maxY) - node.threshold).attr("x2", function () {\n                console.log("stabilityBin");\n                console.log(node.stabilityBin);\n                if (node.stabilityBin) {\n                    return x(maxX + 0.5 - barPadding) + rectWidth;\n                } else {\n                    return x(maxX + 0.5 - barPadding);\n                }\n            }).attr("y2", y(maxY) - node.threshold);\n        }\n    }\n\n    if (plotXaxis) {\n        plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n    }\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(node.name);\n\n    if (mydiv == "#setxLeft") {\n        plotsvg.append("text").attr("id", "range").attr("x", 25).attr("y", height + 40).text(function () {\n            if (node.nature === "nominal") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                return "x: " + yValKey[t].x;\n            } else {\n                return "x: ".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        plotsvg.append("text").attr("id", "range2").attr("x", 25).attr("y", height + 50).text(function () {\n            if (node.nature === "nominal") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                return "x1: " + yValKey[t].x;\n            } else {\n                return "x1: ".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate("linear");\n\n        var colSeq = ["#A2CD5A", "orange", "red"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (minX - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (maxX - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = d3.min(xVals); i <= d3.max(xVals); i++) {\n            lineData = [{\n                "x": x(i),\n                "y": height * .75\n            }, {\n                "x": x(i),\n                "y": height * .85\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", "black").attr("stroke-width", 1).attr("fill", "none");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height * .8 + ")").call(d3.svg.axis().scale(x).ticks(0).orient("bottom"));\n\n        var slider = plotsvg.append("g").attr("class", "slider").call(brush);\n        var slider2 = plotsvg.append("g").attr("class", "slider").call(brush2);\n\n        var points = function points(i) {\n            return function (d) {\n                var xnm = void 0,\n                    s = 6;\n                if (node.setxvals[i] == \'\') {\n                    // if nominal, use the median frequency as the position for the setx slider\n                    xnm = node.nature == \'nominal\' ? x(Math.round(xVals.length / 2) - 1) : x(node.mean);\n                } else {\n                    xnm = x(node.setxvals[i]);\n                };\n                return xnm - s + \',\' + -s + \' \' + (xnm + s) + \',\' + -s + \' \' + xnm + \',\' + s * 1.3;\n            };\n        };\n        var handle = slider.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .7 + ")").attr("points", points(0));\n        var handle2 = slider2.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .9 + ")").attr("points", points(1));\n    }\n\n    function twoSF(x) {\n        var tsf = d3.format(".2r"); // format to two significant figures after the decimal place\n        return tsf(x).replace(/0+$/, "").replace(/\\.$/, ""); // trim trailing zeros after a period, and any orphaned period\n    }\n\n    // brushing functions\n    function brushed() {\n        var value = brush.extent()[0];\n        var s = 6;\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle.attr("points", function (d) {\n            return xpos - s + "," + -s + " " + (xpos + s) + "," + -s + " " + xpos + "," + s * 1.3;\n        });\n        plotsvg.select("text#range").text(function () {\n            if (node.nature === "nominal") {\n                return "x: " + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                return "x: ".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[0] = +invx(xpos).toPrecision(4);\n    }\n\n    // certainly a more clever way to do this, but for now it\'s basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle2.attr("points", function (d) {\n            return xpos - s + "," + s + " " + (xpos + s) + "," + s + " " + xpos + "," + -s * 1.3;\n        });\n        plotsvg.select("text#range2").text(function () {\n            if (node.nature === "nominal") {\n                return "x1: " + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                return "x1: ".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[1] = +invx(xpos).toPrecision(4);\n    }\n}\n\n// draws barplots in subset tab\nfunction barsSubset(node) {\n    // if untouched, set node.subsetrange to an empty array, meaning all values selected by default\n    if (node.subsetrange[0] == "" & node.subsetrange[1] == "") {\n        node.subsetrange = [];\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Variable name\n    var myname = node.name.toString();\n    myname = myname.replace(/\\(|\\)/g, "");\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    var xi = 0;\n    for (var i = 0; i < keys.length; i++) {\n        if (node.plotvalues[keys[i]] == 0) continue;\n        yVals[xi] = node.plotvalues[keys[i]];\n        xVals[xi] = xi;\n        yValKey.push({\n            y: yVals[xi],\n            x: keys[i]\n        });\n        xi = xi + 1;\n    }\n    if (node.nature === "nominal") {\n        // if nominal, orders bars left to right, highest frequency to lowest\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    }\n\n    plotXaxis = false;\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n    var gname = ["subsetyes", "subsetno"];\n\n    var yVals2 = [];\n    var yVals1 = [];\n    for (i = 0; i < yVals.length; i++) {\n        yVals1.push({\n            y0: maxY - yVals[i],\n            y1: yVals[i],\n            col: d3Color\n        });\n        yVals2.push({\n            y0: 0,\n            y1: maxY - yVals[i],\n            col: "transparent"\n        });\n    }\n    var freqs = [yVals1, yVals2];\n\n    // y0 is the starting point\n    // y1 is the length of the bar\n\n    var mydiv = "#tab2";\n    var width = 200;\n    var height = 120;\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 50\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient("bottom");\n\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n\n    //Create SVG element\n    var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n        return myname.concat("_", mydiv.substr(1), "_", node.id);\n    }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n    .style("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    var freq = plotsvg.selectAll("g.freq").data(freqs).enter().append("g").attr("class", "freq").attr("name", function (d, i) {\n        return myname.concat(gname[i]);\n    });\n\n    var rect = freq.selectAll("rect").data(Object).enter().append("rect").attr("class", "bar").attr("name", function (d, i) {\n        return xVals[i];\n    }).attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(d.y0);\n    }).attr("width", x(minX + 0.5 - 2 * barPadding)) // the "width" is the coordinate of the end of the first bar\n    .attr("height", function (d) {\n        return y(d.y1);\n    }).style("fill", function (d, i) {\n        if (node.subsetrange.length > 0 & d.col === d3Color & $.inArray(xVals[i].toString(), node.subsetrange) > -1) {\n            return selVarColor;\n        } else {\n            return d.col;\n        }\n    }).on("click", function () {\n        var selectMe = this;\n        var selectName = this.getAttribute("name");\n        if (this.parentNode.getAttribute("name") == myname.concat("subsetno")) {\n            selectMe = $(\'[name="\' + myname.concat("subsetyes") + \'"]\').children(\'[name="\' + selectName + \'"]\')[0];\n        }\n        d3.select(selectMe).style("fill", function (d, i) {\n            var myCol = "";\n            if (this.style.fill === selVarColor) {\n                var myindex = node.subsetrange.indexOf(this.getAttribute("name"));\n                node.subsetrange.splice(myindex, 1);\n                myCol = d3Color;\n            } else {\n                node.subsetrange.push(this.getAttribute("name"));\n                myCol = selVarColor;\n            }\n            return myCol;\n        });\n        plotsvg.select("text#selectrange").text(function () {\n            if (node.subsetrange.length == 0) {\n                return "Selected: all values";\n            } else {\n                var a = node.subsetrange;\n                var selecteds = new Array();\n                a.forEach(function (val) {\n                    selecteds.push(yValKey[val].x);\n                });\n                return "Selected: " + selecteds;\n            }\n        });\n    }).on("mouseover", function () {\n        var i = this.getAttribute("name");\n        plotsvg.select("text#mymouseover").text(function () {\n            return yValKey[i].x + ": " + yValKey[i].y;\n        });\n    }).on("mouseout", function () {\n        var i = this.getAttribute("name");\n        plotsvg.select("text#mymouseover").text(function () {\n            return "Value: Frequency";\n        });\n    });\n\n    if (plotXaxis) {\n        plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n    } else {\n        plotsvg.append("text").attr("id", "mymouseover").attr("x", 25).attr("y", height + 20).text(function () {\n            return "Value: Frequency";\n        });\n    }\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(myname);\n\n    plotsvg.append("text").attr("id", "selectrange").attr("x", 25).attr("y", height + 40).text(function () {\n        if (node.subsetrange.length == 0) return "Selected: all values";\n        var selecteds = new Array();\n        node.subsetrange.forEach(function (val) {\n            return selecteds.push(yValKey[val].x);\n        });\n        return "Selected: " + selecteds;\n    });\n}\n\nfunction densityNode(node, obj) {\n    var myname = node.name.toString().concat("nodeplot");\n\n    if (typeof obj === "undefined") {\n        var obj = document.getElementById(node.name.toString() + "biggroup");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll("svg")[0].length > 0) d3.select(obj).selectAll("svg").remove();\n    }\n\n    var yVals = node.ploty;\n    var xVals = node.plotx;\n    // array of objects\n    var data2 = node.plotx.map(function (x, i) {\n        return { x: +x, y: +node.ploty[i] };\n    });\n\n    var width = 60; // hardcoded, should be set automatically\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n\n    var area = d3.svg.area().interpolate("monotone").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n\n    var plotsvg = d3.select(obj).insert("svg", ":first-child").attr("x", -40) // NOTE: Not sure exactly why these numbers work, but these hardcoded values seem to position the plot inside g correctly.  this shouldn\'t be hardcoded in the future\n    .attr("y", -45).attr("id", function () {\n        return myname;\n    }).style("width", width).style("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    plotsvg.append("path").datum(data2).attr("class", "area").attr("d", area);\n}\n\nfunction barsNode(node, obj) {\n    var myname = node.name.toString().concat("nodeplot");\n\n    if (typeof obj === "undefined") {\n        var obj = document.getElementById(node.name.toString() + "biggroup");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll("svg")[0].length > 0) {\n            d3.select(obj).selectAll("svg").remove();\n        }\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature === "nominal") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            yValKey.push({ y: yVals[xi], x: keys[i] });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n        }\n    }\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var width = 60;\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    //Create SVG element\n    var plotsvg = d3.select(obj).insert("svg", ":first-child").attr("x", -40).attr("y", -45).attr("id", function () {\n        return myname;\n    }).style("width", width) // set height to the height of #main.left\n    .style("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    plotsvg.selectAll("rect").data(yVals).enter().append("rect").attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(maxY - d);\n    }).attr("width", x(minX + 0.5 - 2 * barPadding)) // the "width" is the coordinate of the end of the first bar\n    .attr("height", y).attr("fill", "#1f77b4");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3Bsb3RzLmpzP2JmMWYiXSwibmFtZXMiOlsiZGVuc2l0eSIsImJhcnMiLCJiYXJzU3Vic2V0IiwiZGVuc2l0eU5vZGUiLCJiYXJzTm9kZSIsImQzQ29sb3IiLCJzZWxWYXJDb2xvciIsIm5vZGUiLCJkaXYiLCJwcml2Iiwic3Vic2V0Iiwic2V0eExlZnQiLCJ2YXJTdW1tYXJ5IiwiYWxlcnQiLCJwbG90eCIsInBsb3R5IiwieFZhbHMiLCJ5VmFscyIsInBsb3RDSSIsIm1hcCIsIngiLCJpIiwieSIsImJvdW5kIiwidXBwZXJFcnJvciIsImxvd2VyRXJyb3IiLCJjb25zb2xlIiwibG9nIiwidGVtcFdpZHRoIiwiZDMiLCJzZWxlY3QiLCJzdHlsZSIsIndpZHRoIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwidHciLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwib2Zmc2V0V2lkdGgiLCJ0ZW1wSGVpZ2h0IiwiaGVpZ2h0IiwibWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0Iiwic2NhbGUiLCJsaW5lYXIiLCJkb21haW4iLCJtaW4iLCJtYXgiLCJyYW5nZSIsImludngiLCJ4QXhpcyIsInN2ZyIsImF4aXMiLCJ0aWNrcyIsIm9yaWVudCIsInlBeGlzIiwiYnJ1c2giLCJleHRlbnQiLCJzdWJzZXRyYW5nZSIsIm9uIiwiYnJ1c2hlZCIsImJydXNoMiIsImJydXNoZWQyIiwiYXJlYSIsImludGVycG9sYXRlIiwiZCIsInkwIiwieTEiLCJsaW5lIiwicGxvdHN2ZyIsInNlbGVjdEFsbCIsInJlbW92ZSIsImFwcGVuZCIsImF0dHIiLCJuYW1lIiwidG9TdHJpbmciLCJjb25jYXQiLCJzdWJzdHIiLCJyZXBsYWNlIiwiaWQiLCJkYXR1bSIsImNhbGwiLCJ0ZXh0IiwidG9QcmVjaXNpb24iLCJtZWFuIiwibGluZUZ1bmN0aW9uIiwiY29sU2VxIiwibGluZURhdGEiLCJBcnJheSIsInpMb3dlciIsInNkIiwielVwcGVyIiwic2xpZGVCb3giLCJzbGlkZXIiLCJoYW5kbGUiLCJzIiwieG5tIiwic2V0eHZhbHMiLCJzbGlkZXIyIiwiaGFuZGxlMiIsImVtcHR5IiwidmFsdWUiLCJldmVudCIsInNvdXJjZUV2ZW50IiwiaW52ZXJ0IiwibW91c2UiLCJ4cG9zIiwibSIsInpTY29yZSIsInpSb3VuZCIsIk1hdGgiLCJyb3VuZCIsImFicyIsImJhclBhZGRpbmciLCJ0b3BTY2FsZSIsInBsb3RYYXhpcyIsImtleXMiLCJPYmplY3QiLCJwbG90dmFsdWVzIiwiY2lVcHBlclZhbHMiLCJjaUxvd2VyVmFscyIsImNpU2l6ZSIsInlWYWxLZXkiLCJuYXR1cmUiLCJ4aSIsInBsb3R2YWx1ZXNDSSIsInBsb3RWYWx1ZXNDSSIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwicHVzaCIsInNvcnQiLCJhIiwiYiIsIk51bWJlciIsIm51bWNoYXIiLCJtYXhZIiwibWluWCIsIm1heFgiLCJteWRpdiIsInN0YWJpbGl0eUJpbiIsIm15bmFtZSIsInJlY3RXaWR0aCIsImRhdGEiLCJlbnRlciIsInkyIiwidGhyZXNob2xkIiwidCIsInBvaW50cyIsInR3b1NGIiwidHNmIiwiZm9ybWF0IiwiZ25hbWUiLCJ5VmFsczIiLCJ5VmFsczEiLCJjb2wiLCJmcmVxcyIsImZyZXEiLCJyZWN0IiwiJCIsImluQXJyYXkiLCJzZWxlY3RNZSIsInNlbGVjdE5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwiY2hpbGRyZW4iLCJteUNvbCIsImZpbGwiLCJteWluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInNlbGVjdGVkcyIsImZvckVhY2giLCJ2YWwiLCJvYmoiLCJkYXRhMiIsImluc2VydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7UUFJZ0JBLE8sR0FBQUEsTztRQWdUQUMsSSxHQUFBQSxJO1FBcWdCQUMsVSxHQUFBQSxVO1FBNk5BQyxXLEdBQUFBLFc7UUFzREFDLFEsR0FBQUEsUTtBQTVrQ2hCLElBQUlDLFVBQVUsU0FBZCxDLENB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LEdBQWEsSUFBSXZCLFVBQW5CLENBTm5CLEVBTW1EO0FBTm5ELEtBT0t4QyxJQVBMLENBT1UsUUFQVixFQU9vQnRELENBUHBCLEVBUUtzRCxJQVJMLENBUVUsTUFSVixFQVFrQixTQVJsQjtBQVNIIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZDNDb2xvciA9ICcjMWY3N2I0JzsgLy8gZDMncyBkZWZhdWx0IGJsdWVcbmV4cG9ydCBsZXQgc2VsVmFyQ29sb3IgPSAnI2ZhODA3Mic7IC8vIGQzLnJnYihcInNhbG1vblwiKTtcblxuLy8gZnVuY3Rpb24gdG8gdXNlIGQzIHRvIGdyYXBoIGRlbnNpdHkgcGxvdHMgd2l0aCBwcmVwcm9jZXNzZWQgZGF0YVxuZXhwb3J0IGZ1bmN0aW9uIGRlbnNpdHkobm9kZSwgZGl2LCBwcml2KSB7XG4gICAgZGl2ID0ge3N1YnNldDogJyN0YWIyJywgc2V0eExlZnQ6ICcjc2V0eExlZnQnLCB2YXJTdW1tYXJ5OiAnI3RhYjMnfVtkaXZdO1xuICAgIGlmICghZGl2KVxuICAgICAgICByZXR1cm4gYWxlcnQoXCJFcnJvcjogaW5jb3JyZWN0IGRpdiBzZWxlY3RlZCBmb3IgcGxvdHNcIik7XG5cbiAgICBsZXQgW3hWYWxzLCB5VmFsc10gPSBbbm9kZS5wbG90eCwgbm9kZS5wbG90eV07XG4gICAgaWYgKHByaXYgJiYgbm9kZS5wbG90Q0kpIHtcbiAgICAgICAgbGV0IFt1cHBlckVycm9yLCBsb3dlckVycm9yXSA9IFsndXBwZXJCb3VuZCcsICdsb3dlckJvdW5kJ10ubWFwKFxuICAgICAgICAgICAgYm91bmQgPT4geFZhbHMubWFwKCh4LCBpKSA9PiAoe3g6ICt4LCB5OiArbm9kZS5wbG90Q0lbYm91bmRdW2ldfSkpKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3VwcGVyRXJyb3JcXG4nLCB1cHBlckVycm9yKTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcFdpZHRoID0gZDMuc2VsZWN0KGRpdikuc3R5bGUoXCJ3aWR0aFwiKTtcbiAgICB2YXIgd2lkdGggPSB0ZW1wV2lkdGguc3Vic3RyaW5nKDAsICh0ZW1wV2lkdGgubGVuZ3RoIC0gMikpO1xuICAgIFxuICAgIGxldCB0dyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluJykub2Zmc2V0V2lkdGg7XG4gICAgXG4gICAgdmFyIHRlbXBIZWlnaHQgPSBkMy5zZWxlY3QoZGl2KS5zdHlsZShcImhlaWdodFwiKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGVtcEhlaWdodC5zdWJzdHJpbmcoMCwgKHRlbXBIZWlnaHQubGVuZ3RoIC0gMikpO1xuICAgIHZhciBtYXJnaW4gPSB7XG4gICAgICAgIHRvcDogMjAsXG4gICAgICAgIHJpZ2h0OiAyMCxcbiAgICAgICAgYm90dG9tOiA1MyxcbiAgICAgICAgbGVmdDogMTBcbiAgICB9O1xuXG4gICAgLy8gTmVlZCB0byBmaXggYXV0b21hdGljIHdpZHRoIGFuZCBoZWlnaHQgc2V0dGluZ3MgZm9yIGxlZnRwYW5lbCAoI3RhYjIsICN0YWIzKVxuICAgIGlmIChkaXYgPT0gXCIjdGFiM1wiKSB7XG4gICAgICAgIHdpZHRoID0gMC43ICogKHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQpLFxuICAgICAgICBoZWlnaHQgPSAwLjMgKiAoaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20pO1xuICAgIH0gZWxzZSBpZiAoZGl2ID09IFwiI3RhYjJcIikge1xuICAgICAgICB3aWR0aCA9IDIwMDtcbiAgICAgICAgaGVpZ2h0ID0gMTIwO1xuICAgIH0gZWxzZSBpZiAoZGl2ID09IFwiI3NldHhMZWZ0XCIpIHtcbiAgICAgICAgd2lkdGg9dHcqLjE4NS1tYXJnaW4ubGVmdC1tYXJnaW4ucmlnaHQ7IC8vcmlnaHRwYW5lbC5leHBhbmQgaXMgNDAgcGVyY2VudCwgc2V0eExlZnQgdG8gNTAgcGVyY2VudCwgdG9nZ2xlIGJhciBpcyAxNnB4LCBwYWRkaW5nLCBpdCdzIGFsbCBhYm91dCAuMTg1XG4gICAgICAgIGhlaWdodD13aWR0aCouNjsgLy9oZWlnaHQgdG8gd2lkdGggaXMgLjZcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aCA9IDAuMzUgKiAod2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCksXG4gICAgICAgIGhlaWdodCA9IDAuMjUgKiAoaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20pO1xuICAgIH07XG5cbiAgICB2YXIgeCA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgIC5kb21haW4oW2QzLm1pbih4VmFscyksIGQzLm1heCh4VmFscyldKVxuICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG4gICAgdmFyIGludnggPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAucmFuZ2UoW2QzLm1pbih4VmFscyksIGQzLm1heCh4VmFscyldKVxuICAgICAgICAuZG9tYWluKFswLCB3aWR0aF0pO1xuICAgIHZhciB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbZDMubWluKHlWYWxzKSwgZDMubWF4KHlWYWxzKV0pXG4gICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG4gICAgdmFyIHhBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAuc2NhbGUoeClcbiAgICAgICAgLnRpY2tzKDUpXG4gICAgICAgIC5vcmllbnQoXCJib3R0b21cIik7XG4gICAgdmFyIHlBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAuc2NhbGUoeSlcbiAgICAgICAgLm9yaWVudChcImxlZnRcIik7XG4gICAgdmFyIGJydXNoID0gZDMuc3ZnLmJydXNoKClcbiAgICAgICAgLngoeClcbiAgICAgICAgLmV4dGVudChub2RlLnN1YnNldHJhbmdlKVxuICAgICAgICAub24oXCJicnVzaFwiLCBicnVzaGVkKTtcbiAgICB2YXIgYnJ1c2gyID0gZDMuc3ZnLmJydXNoKClcbiAgICAgICAgLngoeClcbiAgICAgICAgLm9uKFwiYnJ1c2hcIiwgYnJ1c2hlZDIpO1xuICAgIHZhciBhcmVhID0gZDMuc3ZnLmFyZWEoKVxuICAgICAgICAuaW50ZXJwb2xhdGUoXCJtb25vdG9uZVwiKVxuICAgICAgICAueChkID0+IHgoZC54KSlcbiAgICAgICAgLnkwKGhlaWdodClcbiAgICAgICAgLnkxKGQgPT4geShkLnkpKTtcbiAgICB2YXIgbGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgLngoZCA9PiB4KGQueCkpXG4gICAgICAgIC55KGQgPT4geShkLnkpKVxuICAgICAgICAuaW50ZXJwb2xhdGUoXCJtb25vdG9uZVwiKTtcblxuICAgIC8vIGN1bWJlcnNvbWUgdG8gdHJlYXQgXCJ0YWIzXCIgZGlmZmVyZW50bHksIGJ1dCB3b3JrcyBmb3Igbm93XG4gICAgLy8gdGFiMywgaGFzIGFuIGlzc3VlLCB0aGF0IHVubGVzcyB3aWR0aCBoZWlnaHQgaGFyZGNvZGVkLCB0aGV5IGdyb3cgd2l0aCBlYWNoIGFkZGl0aW9uYWwgZ3JhcGguXG4gICAgaWYgKGRpdiA9PSBcIiN0YWIzXCIpIHtcbiAgICAgICAgdmFyIHBsb3RzdmcgPSBkMy5zZWxlY3QoZGl2KVxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInN2Z1wiKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuICAgICAgICBwbG90c3ZnID0gZDMuc2VsZWN0KGRpdilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgKCkgPT4gbm9kZS5uYW1lLnRvU3RyaW5nKCkuY29uY2F0KGRpdi5zdWJzdHIoMSkpKVxuICAgICAgICAgICAgLnN0eWxlKFwid2lkdGhcIiwgMzAwKSAvLyBzZXQgaGVpZ2h0IHRvIHRoZSBoZWlnaHQgb2YgI21haW4ubGVmdFxuICAgICAgICAgICAgLnN0eWxlKFwiaGVpZ2h0XCIsIDIwMClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBsb3RzdmcgPSBkMy5zZWxlY3QoZGl2KVxuICAgICAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCAoKSA9PiBub2RlLm5hbWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKHxcXCkvZywgXCJcIilcbiAgICAgICAgICAgICAgICAgIC5jb25jYXQoXCJfXCIsIGRpdi5zdWJzdHIoMSksIFwiX1wiLCBub2RlLmlkKSlcbiAgICAgICAgICAgIC5zdHlsZShcIndpZHRoXCIsIHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpIC8vc2V0dGluZyBoZWlnaHQgdG8gdGhlIGhlaWdodCBvZiAjbWFpbi5sZWZ0XG4gICAgICAgICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuICAgIH07XG4gICAgcGxvdHN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC5kYXR1bSh4VmFscy5tYXAoKHgsIGkpID0+ICh7eDogK3gsIHk6ICtub2RlLnBsb3R5W2ldfSkpKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXJlYVwiKVxuICAgICAgICAuYXR0cihcImRcIiwgYXJlYSk7XG5cbiAgICAvL2FkZCB1cHBlciBib3VuZFxuICAgIHByaXYgJiYgbm9kZS5wbG90Q0kgJiYgcGxvdHN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ1cHBlckVycm9yXCIpXG4gICAgICAgIC5kYXR1bSh1cHBlckVycm9yKVxuICAgICAgICAuYXR0cihcImRcIiwgYXJlYSk7XG5cbiAgICAvL2FkZCBsb3dlciBib3VuZFxuICAgIHByaXYgJiYgbm9kZS5wbG90Q0kgJiYgcGxvdHN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsb3dlckVycm9yXCIpXG4gICAgICAgIC5kYXR1bShsb3dlckVycm9yKVxuICAgICAgICAuYXR0cihcImRcIiwgYXJlYSk7XG5cbiAgICBwbG90c3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInggYXhpc1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgIC5jYWxsKHhBeGlzKTtcblxuICAgIHBsb3RzdmcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgKHdpZHRoIC8gMikpXG4gICAgICAgIC5hdHRyKFwieVwiLCAwIC0gKG1hcmdpbi50b3AgLyAyKSlcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxMnB4XCIpXG4gICAgICAgIC50ZXh0KG5vZGUubmFtZSk7XG5cbiAgICAvLyBhZGQgYnJ1c2ggaWYgc3Vic2V0XG4gICAgaWYgKGRpdiA9PSBcIiN0YWIyXCIpIHtcbiAgICAgICAgcGxvdHN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIFwicmFuZ2VcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAyNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBoZWlnaHQgKyA0MClcbiAgICAgICAgICAgIC50ZXh0KCgpID0+IFwiUmFuZ2U6IFwiLmNvbmNhdChkMy5taW4oeFZhbHMpLnRvUHJlY2lzaW9uKDQpLCBcIiB0byBcIiwgZDMubWF4KHhWYWxzKS50b1ByZWNpc2lvbig0KSkpO1xuICAgICAgICBwbG90c3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ4IGJydXNoXCIpXG4gICAgICAgICAgICAuY2FsbChicnVzaClcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIC8vIGFkZCB6IGxpbmVzIGFuZCBzbGlkZXJzIHNldHhcbiAgICBpZiAoZGl2ID09IFwiI3NldHhMZWZ0XCIpIHtcbiAgICAgICAgcGxvdHN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIFwicmFuZ2VcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAyNSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBoZWlnaHQgKyA0MClcbiAgICAgICAgICAgIC50ZXh0KCgpID0+IFwieDogXCIuY29uY2F0KCgrbm9kZS5tZWFuKS50b1ByZWNpc2lvbig0KSkpO1xuXG4gICAgICAgIHBsb3RzdmcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcInJhbmdlMlwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDI1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIDUwKVxuICAgICAgICAgICAgLnRleHQoKCkgPT4gXCJ4MTogXCIuY29uY2F0KCgrbm9kZS5tZWFuKS50b1ByZWNpc2lvbig0KSkpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0aWNrIG1hcmtzIGF0IGFsbCB6c2NvcmVzIGluIHRoZSBib3VuZHMgb2YgdGhlIGRhdGFcbiAgICAgICAgdmFyIGxpbmVGdW5jdGlvbiA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgIC54KGQgPT4gZC54KVxuICAgICAgICAgICAgLnkoZCA9PiBkLnkpXG4gICAgICAgICAgICAuaW50ZXJwb2xhdGUoXCJsaW5lYXJcIik7XG5cbiAgICAgICAgdmFyIGNvbFNlcSA9IFtcIiNBMkNENUFcIiwgXCJvcmFuZ2VcIiwgXCJyZWRcIl07IC8vIHdpbGwgY3ljbGUgdGhyb3VnaCBjb2xvciBzZXF1ZW5jZSwgYW5kIHRoZW4gcmVwZWF0IGxhc3QgY29sb3JcbiAgICAgICAgdmFyIGxpbmVEYXRhID0gbmV3IEFycmF5O1xuXG4gICAgICAgIHZhciB6TG93ZXIgPSAtMSAqIChkMy5taW4oeFZhbHMpIC0gbm9kZS5tZWFuKSAvIG5vZGUuc2Q7IC8vIHpzY29yZSBvZiBsb3dlciBib3VuZFxuICAgICAgICB2YXIgelVwcGVyID0gKGQzLm1heCh4VmFscykgLSBub2RlLm1lYW4pIC8gbm9kZS5zZDsgLy8genNjb3JlIG9mIHVwcGVyIGJvdW5kXG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB6VXBwZXI7IGkrKykge1xuICAgICAgICAgICAgbGluZURhdGEgPSBbe1xuICAgICAgICAgICAgICAgIFwieFwiOiB4KCtub2RlLm1lYW4gKyBpICogbm9kZS5zZCksXG4gICAgICAgICAgICAgICAgXCJ5XCI6IGhlaWdodCAqIC43XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IHgoK25vZGUubWVhbiArIGkgKiBub2RlLnNkKSxcbiAgICAgICAgICAgICAgICBcInlcIjogaGVpZ2h0ICogLjlcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgcGxvdHN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGxpbmVGdW5jdGlvbihbbGluZURhdGFbMF0sIGxpbmVEYXRhWzFdXSkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgY29sU2VxW2QzLm1pbihbaSwgY29sU2VxLmxlbmd0aCAtIDFdKV0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHpMb3dlcjsgaSsrKSB7XG4gICAgICAgICAgICBsaW5lRGF0YSA9IFt7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IHgoK25vZGUubWVhbiAtIGkgKiBub2RlLnNkKSxcbiAgICAgICAgICAgICAgICBcInlcIjogaGVpZ2h0ICogLjdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcInhcIjogeCgrbm9kZS5tZWFuIC0gaSAqIG5vZGUuc2QpLFxuICAgICAgICAgICAgICAgIFwieVwiOiBoZWlnaHQgKiAuOVxuICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBwbG90c3ZnLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgbGluZUZ1bmN0aW9uKFtsaW5lRGF0YVswXSwgbGluZURhdGFbMV1dKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBjb2xTZXFbZDMubWluKFtpLCBjb2xTZXEubGVuZ3RoIC0gMV0pXSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxLjUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXRpYWxpemUgc2xpZGVyIGNvbXBvbmVudHNcbiAgICAgICAgdmFyIHNsaWRlQm94ID0gcGxvdHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICogLjggKyBcIilcIilcbiAgICAgICAgICAgIC5jYWxsKGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAgICAgICAgIC5zY2FsZSh4KVxuICAgICAgICAgICAgICAgICAgLnRpY2tzKDApXG4gICAgICAgICAgICAgICAgICAub3JpZW50KFwiYm90dG9tXCIpKTtcbiAgICAgICAgdmFyIHNsaWRlciA9IHBsb3RzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNsaWRlclwiKVxuICAgICAgICAgICAgLmNhbGwoYnJ1c2gpO1xuICAgICAgICB2YXIgaGFuZGxlID0gc2xpZGVyLmFwcGVuZChcInBvbHlnb25cIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJoYW5kbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKiAuNyArIFwiKVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJwb2ludHNcIiwgXyA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHMgPSA2O1xuICAgICAgICAgICAgICAgIGxldCB4bm0gPSBub2RlLnNldHh2YWxzWzBdID09ICcnID8geChub2RlLm1lYW4pIDogeChub2RlLnNldHh2YWxzWzBdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHhubSAtIHMpICsgXCIsXCIgKyAoLXMpICsgXCIgXCIgKyAoeG5tICsgcykgKyBcIixcIiArICgtcykgKyBcIiBcIiArIHhubSArIFwiLFwiICsgKHMgKiAxLjMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHZhciBzbGlkZXIyID0gcGxvdHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2xpZGVyXCIpXG4gICAgICAgICAgICAuY2FsbChicnVzaDIpO1xuICAgICAgICB2YXIgaGFuZGxlMiA9IHNsaWRlcjIuYXBwZW5kKFwicG9seWdvblwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImhhbmRsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCAqIC45ICsgXCIpXCIpXG4gICAgICAgICAgICAuYXR0cihcInBvaW50c1wiLCBfID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcyA9IDY7XG4gICAgICAgICAgICAgICAgbGV0IHhubSA9IG5vZGUuc2V0eHZhbHNbMV0gPT0gJycgPyB4KG5vZGUubWVhbikgOiB4KG5vZGUuc2V0eHZhbHNbMV0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAoeG5tIC0gcykgKyBcIixcIiArIHMgKyBcIiBcIiArICh4bm0gKyBzKSArIFwiLFwiICsgcyArIFwiIFwiICsgeG5tICsgXCIsXCIgKyAoLXMgKiAxLjMpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gYnJ1c2hpbmcgZnVuY3Rpb25zXG4gICAgZnVuY3Rpb24gYnJ1c2hlZCgpIHtcbiAgICAgICAgaWYgKGRpdiA9PSBcIiN0YWIyXCIpIHtcbiAgICAgICAgICAgIHBsb3Rzdmcuc2VsZWN0KFwidGV4dCNyYW5nZVwiKVxuICAgICAgICAgICAgICAgIC50ZXh0KCgpID0+IGJydXNoLmVtcHR5KCkgP1xuICAgICAgICAgICAgICAgICAgICBcIlJhbmdlOiBcIi5jb25jYXQoZDMubWluKHhWYWxzKS50b1ByZWNpc2lvbig0KSwgXCIgdG8gXCIsIGQzLm1heCh4VmFscykudG9QcmVjaXNpb24oNCkpIDpcbiAgICAgICAgICAgICAgICAgICAgXCJSYW5nZTogXCIuY29uY2F0KChicnVzaC5leHRlbnQoKVswXSkudG9QcmVjaXNpb24oNCksIFwiIHRvIFwiLCAoYnJ1c2guZXh0ZW50KClbMV0pLnRvUHJlY2lzaW9uKDQpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBub2RlLnN1YnNldHJhbmdlID0gYnJ1c2guZXh0ZW50KClbMF0udG9QcmVjaXNpb24oNCkgIT0gYnJ1c2guZXh0ZW50KClbMV0udG9QcmVjaXNpb24oNCkgP1xuICAgICAgICAgICAgICAgIFsoYnJ1c2guZXh0ZW50KClbMF0pLnRvUHJlY2lzaW9uKDQpLCAoYnJ1c2guZXh0ZW50KClbMV0pLnRvUHJlY2lzaW9uKDQpXSA6XG4gICAgICAgICAgICAgICAgW1wiXCIsIFwiXCJdO1xuICAgICAgICB9IGVsc2UgaWYgKGRpdiA9PSBcIiNzZXR4TGVmdFwiKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBicnVzaC5leHRlbnQoKVswXTtcbiAgICAgICAgICAgIHZhciBzID0gNjtcbiAgICAgICAgICAgIGlmIChkMy5ldmVudC5zb3VyY2VFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0geC5pbnZlcnQoZDMubW91c2UodGhpcylbMF0pO1xuICAgICAgICAgICAgICAgIGJydXNoLmV4dGVudChbdmFsdWUsIHZhbHVlXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNldCB4IHBvc2l0aW9uIG9mIHNsaWRlciBjZW50ZXJcbiAgICAgICAgICAgIHZhciB4cG9zID0geCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPiBkMy5tYXgoeFZhbHMpKSB7IC8vIGRyYWdnZWQgcGFzdCBtYXhcbiAgICAgICAgICAgICAgICB4cG9zID0geChkMy5tYXgoeFZhbHMpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPCBkMy5taW4oeFZhbHMpKSB7IC8vIGRyYWdnZWQgcGFzdCBtaW5cbiAgICAgICAgICAgICAgICB4cG9zID0geChkMy5taW4oeFZhbHMpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSArbm9kZS5tZWFuO1xuICAgICAgICAgICAgICAgIHZhciBzZCA9ICtub2RlLnNkO1xuICAgICAgICAgICAgICAgIHZhciB6U2NvcmUgPSAodmFsdWUgLSBtKSAvIHNkOyAvLyB6LXNjb3JlXG4gICAgICAgICAgICAgICAgdmFyIHpSb3VuZCA9IE1hdGgucm91bmQoelNjb3JlKTsgLy8gbmVhcmVzdCBpbnRlZ2VyIHotc2NvcmVcbiAgICAgICAgICAgICAgICBpZiAoLjEgPiBNYXRoLmFicyh6Um91bmQgLSB6U2NvcmUpKSAvLyBzbmFwIHRvIGludGVnZXIgei1zY29yZVxuICAgICAgICAgICAgICAgICAgICB4cG9zID0geChtICsgKHpSb3VuZCAqIHNkKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBzbGlkZXIgc3ltYm9sIGFuZCB0ZXh0XG4gICAgICAgICAgICBoYW5kbGUuYXR0cihcInBvaW50c1wiLCBfID0+ICh4cG9zIC0gcykgKyBcIixcIiArICgtcykgKyBcIiBcIiArICh4cG9zICsgcykgKyBcIixcIiArICgtcykgKyBcIiBcIiArIHhwb3MgKyBcIixcIiArIChzICogMS4zKSk7XG4gICAgICAgICAgICBwbG90c3ZnLnNlbGVjdChcInRleHQjcmFuZ2VcIilcbiAgICAgICAgICAgICAgICAudGV4dCgoKSA9PiBcIng6IFwiLmNvbmNhdCgoaW52eCh4cG9zKSkudG9QcmVjaXNpb24oNCkpKTtcbiAgICAgICAgICAgIG5vZGUuc2V0eHZhbHNbMF0gPSAoaW52eCh4cG9zKSkudG9QcmVjaXNpb24oNCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjZXJ0YWlubHkgYSBtb3JlIGNsZXZlciB3YXkgdG8gZG8gdGhpcywgYnV0IGZvciBub3cgaXQncyBiYXNpY2FsbHkgY29waWVkIHdpdGggYnJ1c2ggYW5kIGhhbmRsZSBjaGFuZ2VzIHRvIGJydXNoMiBhbmQgaGFuZGxlMiBhbmQgI3JhbmdlIHRvICNyYW5nZTIgYW5kIHNldHh2YWxzWzBdIHRvIHNldHh2YWxzWzFdXG4gICAgZnVuY3Rpb24gYnJ1c2hlZDIoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGJydXNoMi5leHRlbnQoKVswXTtcbiAgICAgICAgdmFyIHMgPSA2OyAvLyBzY2FsaW5nIGZvciB0cmlhbmdsZSBzaGFwZVxuXG4gICAgICAgIGlmIChkMy5ldmVudC5zb3VyY2VFdmVudCkge1xuICAgICAgICAgICAgdmFsdWUgPSB4LmludmVydChkMy5tb3VzZSh0aGlzKVswXSk7XG4gICAgICAgICAgICBicnVzaDIuZXh0ZW50KFt2YWx1ZSwgdmFsdWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCB4IHBvc2l0aW9uIG9mIHNsaWRlciBjZW50ZXJcbiAgICAgICAgdmFyIHhwb3MgPSB4KHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlID4gZDMubWF4KHhWYWxzKSkgeyAvLyBkcmFnZ2VkIHBhc3QgbWF4XG4gICAgICAgICAgICB4cG9zID0geChkMy5tYXgoeFZhbHMpKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IGQzLm1pbih4VmFscykpIHsgLy8gZHJhZ2dlZCBwYXN0IG1pblxuICAgICAgICAgICAgeHBvcyA9IHgoZDMubWluKHhWYWxzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbSA9ICtub2RlLm1lYW47XG4gICAgICAgICAgICB2YXIgc2QgPSArbm9kZS5zZDtcbiAgICAgICAgICAgIHZhciB6U2NvcmUgPSAodmFsdWUgLSBtKSAvIHNkOyAvLyB6LXNjb3JlXG4gICAgICAgICAgICB2YXIgelJvdW5kID0gTWF0aC5yb3VuZCh6U2NvcmUpOyAvLyBuZWFyZXN0IGludGVnZXIgei1zY29yZVxuICAgICAgICAgICAgaWYgKC4xID4gTWF0aC5hYnMoelJvdW5kIC0gelNjb3JlKSkgLy8gc25hcCB0byBpbnRlZ2VyIHotc2NvcmVcbiAgICAgICAgICAgICAgICB4cG9zID0geChtICsgKHpSb3VuZCAqIHNkKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgc2xpZGVyIHN5bWJvbCBhbmQgdGV4dFxuICAgICAgICBoYW5kbGUyLmF0dHIoXCJwb2ludHNcIiwgXyA9PiAoeHBvcyAtIHMpICsgXCIsXCIgKyBzICsgXCIgXCIgKyAoeHBvcyArIHMpICsgXCIsXCIgKyBzICsgXCIgXCIgKyB4cG9zICsgXCIsXCIgKyAoLXMgKiAxLjMpKTtcbiAgICAgICAgcGxvdHN2Zy5zZWxlY3QoXCJ0ZXh0I3JhbmdlMlwiKVxuICAgICAgICAgICAgLnRleHQoKCkgPT4gXCJ4MTogXCIuY29uY2F0KChpbnZ4KHhwb3MpKS50b1ByZWNpc2lvbig0KSkpO1xuICAgICAgICBub2RlLnNldHh2YWxzWzFdID0gKGludngoeHBvcykpLnRvUHJlY2lzaW9uKDQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhcnMobm9kZSwgZGl2LCBwcml2KSB7XG4gICAgLy8gSGlzdG9ncmFtIHNwYWNpbmdcbiAgICB2YXIgYmFyUGFkZGluZyA9IC4wMTU7IC8vIFNwYWNlIGJldHdlZW4gYmFyc1xuICAgIHZhciB0b3BTY2FsZSA9IDEuMjsgLy8gTXVsdGlwbGljYXRpdmUgZmFjdG9yIHRvIGFzc2lnbiBzcGFjZSBhdCB0b3Agd2l0aGluIGdyYXBoIC0gY3VycmVudGx5IHJlbW92ZWQgZnJvbSBpbXBsZW1lbnRhdGlvblxuICAgIHZhciBwbG90WGF4aXMgPSB0cnVlO1xuXG4gICAgLy8gRGF0YVxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobm9kZS5wbG90dmFsdWVzKTtcbiAgICB2YXIgeVZhbHMgPSBuZXcgQXJyYXk7XG4gICAgdmFyIGNpVXBwZXJWYWxzID0gbmV3IEFycmF5O1xuICAgIHZhciBjaUxvd2VyVmFscyA9IG5ldyBBcnJheTtcbiAgICB2YXIgY2lTaXplO1xuXG4gICAgdmFyIHhWYWxzID0gbmV3IEFycmF5O1xuICAgIHZhciB5VmFsS2V5ID0gbmV3IEFycmF5O1xuXG4gICAgaWYgKG5vZGUubmF0dXJlID09IFwibm9taW5hbFwiKSB7XG4gICAgICAgIHZhciB4aSA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG5vZGUucGxvdHZhbHVlc1trZXlzW2ldXSA9PSAwKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgeVZhbHNbeGldID0gbm9kZS5wbG90dmFsdWVzW2tleXNbaV1dO1xuICAgICAgICAgICAgeFZhbHNbeGldID0geGk7XG4gICAgICAgICAgICBpZiAocHJpdikge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLnBsb3R2YWx1ZXNDSSkge1xuICAgICAgICAgICAgICAgICAgICBjaUxvd2VyVmFsc1t4aV0gPSBub2RlLnBsb3RWYWx1ZXNDSS5sb3dlckJvdW5kW2tleXNbaV1dO1xuICAgICAgICAgICAgICAgICAgICBjaVVwcGVyVmFsc1t4aV0gPSBub2RlLnBsb3RWYWx1ZXNDSS51cHBlckJvdW5kW2tleXNbaV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaVNpemUgPSBjaVVwcGVyVmFsc1t4aV0gLSBjaUxvd2VyVmFsc1t4aV07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB5VmFsS2V5LnB1c2goe1xuICAgICAgICAgICAgICAgIHk6IHlWYWxzW3hpXSxcbiAgICAgICAgICAgICAgICB4OiBrZXlzW2ldXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHhpID0geGkgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHlWYWxLZXkuc29ydCgoYSwgYikgPT4gYi55IC0gYS55KTsgLy8gYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCBvYmplY3QgaGFzIHksIHRoZSBzYW1lIGFzIHlWYWxzLCBhbmQgeCwgdGhlIGNhdGVnb3J5XG4gICAgICAgIHlWYWxzLnNvcnQoKGEsIGIpID0+IGIgLSBhKTsgLy8gYXJyYXkgb2YgeSB2YWx1ZXMsIHRoZSBoZWlnaHQgb2YgdGhlIGJhcnNcbiAgICAgICAgY2lVcHBlclZhbHMuc29ydCgoYSwgYikgPT4gYi55IC0gYS55KTsgLy8gP1xuICAgICAgICBjaUxvd2VyVmFscy5zb3J0KChhLCBiKSA9PiBiLnkgLSBhLnkpOyAvLyA/XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBsb3R2YWx1ZXMgaW4gYmFyc1wiKTtcbiAgICAgICAgICAgIHlWYWxzW2ldID0gbm9kZS5wbG90dmFsdWVzW2tleXNbaV1dO1xuICAgICAgICAgICAgeFZhbHNbaV0gPSBOdW1iZXIoa2V5c1tpXSk7XG4gICAgICAgICAgICBpZiAocHJpdikge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLnBsb3R2YWx1ZXNDSSkge1xuICAgICAgICAgICAgICAgICAgICBjaUxvd2VyVmFsc1tpXSA9IG5vZGUucGxvdHZhbHVlc0NJLmxvd2VyQm91bmRba2V5c1tpXV07XG4gICAgICAgICAgICAgICAgICAgIGNpVXBwZXJWYWxzW2ldID0gbm9kZS5wbG90dmFsdWVzQ0kudXBwZXJCb3VuZFtrZXlzW2ldXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2lTaXplID0gY2lVcHBlclZhbHNbaV0gLSBjaUxvd2VyVmFsc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICgoeVZhbHMubGVuZ3RoID4gMTUgJiBub2RlLm51bWNoYXIgPT0gXCJudW1lcmljXCIpIHx8ICh5VmFscy5sZW5ndGggPiA1ICYgbm9kZS5udW1jaGFyID09IFwiY2hhcmFjdGVyXCIpKVxuICAgICAgICBwbG90WGF4aXMgPSBmYWxzZTtcbiAgICB2YXIgbWF4WSA9IGQzLm1heCh5VmFscyk7IC8vIGluIHRoZSBmdXR1cmUsIHNldCBtYXhZIHRvIHRoZSB2YWx1ZSBvZiB0aGUgbWF4aW11bSBjb25maWRlbmNlIGxpbWl0XG4gICAgaWYgKHByaXYgJiYgbm9kZS5wbG90dmFsdWVzQ0kpIG1heFkgPSBkMy5tYXgoY2lVcHBlclZhbHMpO1xuICAgIHZhciBtaW5YID0gZDMubWluKHhWYWxzKTtcbiAgICB2YXIgbWF4WCA9IGQzLm1heCh4VmFscyk7XG5cbiAgICBsZXQgbXlkaXY7XG4gICAgaWYgKGRpdiA9PSBcInNldHhMZWZ0XCIpIG15ZGl2ID0gXCIjc2V0eExlZnRcIjtcbiAgICBlbHNlIGlmIChkaXYgPT0gXCJ2YXJTdW1tYXJ5XCIpIG15ZGl2ID0gXCIjdGFiM1wiO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGFsZXJ0KFwiRXJyb3I6IGluY29ycmVjdCBkaXYgc2VsZWN0ZWQgZm9yIHBsb3RzXCIpO1xuXG4gICAgdmFyIHRlbXBXaWR0aCA9IGQzLnNlbGVjdChteWRpdikuc3R5bGUoXCJ3aWR0aFwiKVxuICAgIHZhciB3aWR0aCA9IHRlbXBXaWR0aC5zdWJzdHJpbmcoMCwgKHRlbXBXaWR0aC5sZW5ndGggLSAyKSk7XG4gICAgdmFyIHRlbXBIZWlnaHQgPSBkMy5zZWxlY3QobXlkaXYpLnN0eWxlKFwiaGVpZ2h0XCIpXG4gICAgdmFyIGhlaWdodCA9IHRlbXBIZWlnaHQuc3Vic3RyaW5nKDAsICh0ZW1wSGVpZ2h0Lmxlbmd0aCAtIDIpKTtcblxuICAgIHZhciBtYXJnaW4gPSB7XG4gICAgICAgIHRvcDogMjAsXG4gICAgICAgIHJpZ2h0OiAyMCxcbiAgICAgICAgYm90dG9tOiA1MyxcbiAgICAgICAgbGVmdDogMTBcbiAgICB9O1xuICAgIGxldCB0dyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluJykub2Zmc2V0V2lkdGg7XG5cbiAgICAvLyBOZWVkIHRvIGZpeCBhdXRvbWF0aWMgd2lkdGggYW5kIGhlaWdodCBzZXR0aW5ncyBmb3IgbGVmdHBhbmVsICgjdGFiMiwgI3RhYjMpXG4gICAgaWYgKG15ZGl2ID09IFwiI3RhYjNcIikge1xuICAgICAgICB3aWR0aCA9IDAuNyAqICh3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0KTtcbiAgICAgICAgaGVpZ2h0ID0gMC4zICogKGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tKTtcbiAgICB9IGVsc2UgaWYgKG15ZGl2ID09IFwiI3NldHhMZWZ0XCIpIHtcbiAgICAgICAgLy93aWR0aCA9IDIwMDtcbiAgICAgICAgLy9oZWlnaHQgPSAxMjA7XG4gICAgICAgIHdpZHRoPXR3Ki4xODUtbWFyZ2luLmxlZnQtbWFyZ2luLnJpZ2h0OyAvL3JpZ2h0cGFuZWwuZXhwYW5kIGlzIDQwIHBlcmNlbnQsIHNldHhMZWZ0IHRvIDUwIHBlcmNlbnQsIHRvZ2dsZSBiYXIgaXMgMTZweCwgcGFkZGluZywgaXQncyBhbGwgYWJvdXQgLjE4NVxuICAgICAgICBoZWlnaHQ9d2lkdGgqLjY7IC8vaGVpZ2h0IHRvIHdpZHRoIGlzIC42XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2lkdGggPSAwLjM1ICogKHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQpO1xuICAgICAgICBoZWlnaHQgPSAwLjI1ICogKGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tKTtcbiAgICB9O1xuXG4gICAgaWYgKHByaXYgJiYgbm9kZS5zdGFiaWxpdHlCaW4pIHtcbiAgICAgICAgdmFyIHggPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihbbWluWCAtIDAuNSwgbWF4WCArIDEuNV0pXG4gICAgICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHggPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgLmRvbWFpbihbbWluWCAtIDAuNSwgbWF4WCArIDAuNV0pXG4gICAgICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG4gICAgfVxuXG4gICAgdmFyIGludnggPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAucmFuZ2UoW21pblggLSAwLjUsIG1heFggKyAwLjVdKVxuICAgICAgICAuZG9tYWluKFswLCB3aWR0aF0pO1xuXG4gICAgdmFyIHkgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAuZG9tYWluKFswLCBtYXhZXSlcbiAgICAgICAgLnJhbmdlKFswLCBoZWlnaHRdKTtcblxuICAgIHZhciB4QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgICAgLnNjYWxlKHgpXG4gICAgICAgIC50aWNrcyh5VmFscy5sZW5ndGgpXG4gICAgICAgIC5vcmllbnQoXCJib3R0b21cIik7XG5cbiAgICB2YXIgeUF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgIC5zY2FsZSh5KVxuICAgICAgICAub3JpZW50KFwibGVmdFwiKTtcblxuICAgIHZhciBicnVzaCA9IGQzLnN2Zy5icnVzaCgpXG4gICAgICAgIC54KHgpXG4gICAgICAgIC5leHRlbnQoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuc3Vic2V0cmFuZ2UubGVuZ3RoID09IDEgP1xuICAgICAgICAgICAgICAgIFtub2RlLnN1YnNldHJhbmdlWzBdLCBub2RlLnN1YnNldHJhbmdlWzBdXVxuICAgICAgICAgICAgICAgIDogbm9kZS5zdWJzZXRyYW5nZTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwiYnJ1c2hcIiwgYnJ1c2hlZCk7XG5cbiAgICB2YXIgYnJ1c2gyID0gZDMuc3ZnLmJydXNoKClcbiAgICAgICAgLngoeClcbiAgICAgICAgLm9uKFwiYnJ1c2hcIiwgYnJ1c2hlZDIpO1xuXG4gICAgLy8gQ3JlYXRlIFNWRyBlbGVtZW50XG4gICAgLy8gY3VtYmVyc29tZSB0byB0cmVhdCBcInRhYjNcIiBkaWZmZXJlbnRseSwgYnV0IHdvcmtzIGZvciBub3dcbiAgICAvLyB0YWIzLCBoYXMgYW4gaXNzdWUsIHRoYXQgdW5sZXNzIHdpZHRoIGhlaWdodCBoYXJkY29kZWQsIHRoZXkgZ3JvdyB3aXRoIGVhY2ggYWRkaXRpb25hbCBncmFwaC5cbiAgICBpZiAobXlkaXYgPT0gXCIjdGFiM1wiKSB7XG4gICAgICAgIHZhciBwbG90c3ZnID0gZDMuc2VsZWN0KG15ZGl2KVxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInN2Z1wiKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIHZhciBwbG90c3ZnID0gZDMuc2VsZWN0KG15ZGl2KVxuICAgICAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCAoKSA9PiBub2RlLm5hbWUudG9TdHJpbmcoKS5jb25jYXQobXlkaXYuc3Vic3RyKDEpKSlcbiAgICAgICAgICAgIC5zdHlsZShcIndpZHRoXCIsIDMwMCkgLy9zZXR0aW5nIGhlaWdodCB0byB0aGUgaGVpZ2h0IG9mICNtYWluLmxlZnRcbiAgICAgICAgICAgIC5zdHlsZShcImhlaWdodFwiLCAyMDApXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGxvdHN2ZyA9IGQzLnNlbGVjdChteWRpdilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG15bmFtZSA9IG5vZGUubmFtZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIG15bmFtZSA9IG15bmFtZS5yZXBsYWNlKC9cXCh8XFwpL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBteW5hbWUuY29uY2F0KFwiX1wiLCBteWRpdi5zdWJzdHIoMSksIFwiX1wiLCBub2RlLmlkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJ3aWR0aFwiLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KSAvL3NldHRpbmcgaGVpZ2h0IHRvIHRoZSBoZWlnaHQgb2YgI21haW4ubGVmdFxuICAgICAgICAgICAgLnN0eWxlKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG4gICAgfTtcblxuICAgIHZhciByZWN0V2lkdGggPSB4KG1pblggKyAwLjUgLSAyICogYmFyUGFkZGluZyk7IC8vdGhlIFwid2lkdGhcIiBpcyB0aGUgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIG9mIHRoZSBmaXJzdCBiYXJcblxuICAgIHBsb3Rzdmcuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgICAuZGF0YSh5VmFscylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiB4KHhWYWxzW2ldIC0gMC41ICsgYmFyUGFkZGluZykpXG4gICAgICAgIC5hdHRyKFwieVwiLCBkID0+IHkobWF4WSAtIGQpKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHJlY3RXaWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgeSlcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzFmNzdiNFwiKTtcblxuICAgIC8vIGRyYXcgZXJyb3IgYmFycywgdGhyZXNob2xkIGxpbmUgYW5kIGV4dHJhIGJpblxuICAgIGlmIChwcml2KSB7XG4gICAgICAgIGlmICh5VmFscy5sZW5ndGggPD0gMjApIHtcbiAgICAgICAgICAgIHBsb3Rzdmcuc2VsZWN0QWxsKFwibGluZVwiKVxuICAgICAgICAgICAgICAgIC5kYXRhKGNpVXBwZXJWYWxzKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJibGFja1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geCh4VmFsc1tpXSAtIDAuNSArIGJhclBhZGRpbmcpICsgcmVjdFdpZHRoIC8gMlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIFx0LmF0dHIoXCJ5MVwiLCBkID0+IHkobWF4WSAtIGQpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geCh4VmFsc1tpXSAtIDAuNSArIGJhclBhZGRpbmcpICsgcmVjdFdpZHRoIC8gMlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCBkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkyID0geShtYXhZIC0gZCArIGNpU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5MiA+PSB5KG1heFkpID8geShtYXhZKSA6IHkyO1xuICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy9kcmF3IHRvcCB0aWNrcyBvbiBlcnJvciBiYXJzXG4gICAgICAgICAgICAvL25lZWQgdG8gZml4IHRoZSBoZWlnaHQgb2YgdGhlIGdyYXBocyAtIHRoZSB0b3BzIG9mIGVycm9yIGJhcnMgYXJlIGdldHRpbmcgY3V0IG9mZlxuICAgICAgICAgICAgcGxvdHN2Zy5zZWxlY3RBbGwoXCIudG9wVGlja1wiKVxuICAgICAgICAgICAgICAgIC5kYXRhKGNpVXBwZXJWYWxzKVxuICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidG9wVGlja1wiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImJsYWNrXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh5VmFscy5sZW5ndGggPiAyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoeFZhbHNbaV0gLSAwLjUgKyBiYXJQYWRkaW5nKSAvL21ha2UgdGljayBiaWdnZXIgdG8gaW5jcmVhc2UgdmlzaWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoeFZhbHNbaV0gLSAwLjUgKyBiYXJQYWRkaW5nKSArIDAuNCAqIHJlY3RXaWR0aFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkobWF4WSAtIGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh5VmFscy5sZW5ndGggPiAyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoeFZhbHNbaV0gLSAwLjUgKyBiYXJQYWRkaW5nKSArIHJlY3RXaWR0aCAvL21ha2UgdGljayBiaWdnZXIgdG8gaW5jcmVhc2UgdmlzaWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgoeFZhbHNbaV0gLSAwLjUgKyBiYXJQYWRkaW5nKSArIDAuNiAqIHJlY3RXaWR0aFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIGQgPT4geShtYXhZIC0gZCkpO1xuXG4gICAgICAgICAgICAvLyBkcmF3IGJvdHRvbSB0aWNrcyBvZiBlcnJvciBiYXJzXG4gICAgICAgICAgICBwbG90c3ZnLnNlbGVjdEFsbChcIi5ib3R0b21UaWNrXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEoY2lMb3dlclZhbHMpXG4gICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJib3R0b21UaWNrXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiYmxhY2tcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHlWYWxzLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geCh4VmFsc1tpXSAtIDAuNSArIGJhclBhZGRpbmcpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geCh4VmFsc1tpXSAtIDAuNSArIGJhclBhZGRpbmcpICsgMC40ICogcmVjdFdpZHRoXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgZCA9PiB5KG1heFkgLSBkKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHlWYWxzLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geCh4VmFsc1tpXSAtIDAuNSArIGJhclBhZGRpbmcpICsgcmVjdFdpZHRoXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geCh4VmFsc1tpXSAtIDAuNSArIGJhclBhZGRpbmcpICsgMC42ICogcmVjdFdpZHRoXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgZCA9PiB5KG1heFkgLSBkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbG90c3ZnLnNlbGVjdEFsbChcIi5kZW5zZUVycm9yXCIpXG4gICAgICAgICAgICAgICAgLmRhdGEoeVZhbHMpXG4gICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkZW5zZUVycm9yXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkLCBpKSA9PiB4KHhWYWxzW2ldIC0gMC41ICsgYmFyUGFkZGluZykpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGQgPT4geShtYXhZIC0gZCkgLSAuMSAqIHkoZCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZWN0V2lkdGgpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZCA9PiAoeShtYXhZIC0gZCkgKyAuMSAqIHkoZCkpIC0gKHkobWF4WSAtIGQpIC0gLjEgKiB5KGQpKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJzaWx2ZXJcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHN0YXRlbWVudCBmb3Igc3RhYmlsaXR5IGhpc3RvZ3JhbXNcbiAgICAgICAgLy9leHRyYSBzdGFiaWxpdHkgYmluXG4gICAgICAgIGlmIChub2RlLnN0YWJpbGl0eUJpbikge1xuICAgICAgICAgICAgcGxvdHN2Zy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHgobWF4WCArIDAuNSAtIGJhclBhZGRpbmcpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB5KG1heFkpIC0gbm9kZS5zdGFiaWxpdHlCaW4pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByZWN0V2lkdGgpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbm9kZS5zdGFiaWxpdHlCaW4pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwic2lsdmVyXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aHJlc2hvbGQgbGluZVxuICAgICAgICBpZiAobm9kZS50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgIHBsb3RzdmcuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImJsYWNrXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCB4KG1pblggLSAwLjUgKyBiYXJQYWRkaW5nKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHkobWF4WSkgLSBub2RlLnRocmVzaG9sZClcbiAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YWJpbGl0eUJpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobm9kZS5zdGFiaWxpdHlCaW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5zdGFiaWxpdHlCaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4KG1heFggKyAwLjUgLSBiYXJQYWRkaW5nKSArIHJlY3RXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4KG1heFggKyAwLjUgLSBiYXJQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB5KG1heFkpIC0gbm9kZS50aHJlc2hvbGQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGxvdFhheGlzKSB7XG4gICAgICAgIHBsb3RzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInggYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgLmNhbGwoeEF4aXMpO1xuICAgIH1cblxuICAgIHBsb3RzdmcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgKHdpZHRoIC8gMikpXG4gICAgICAgIC5hdHRyKFwieVwiLCAwIC0gKG1hcmdpbi50b3AgLyAyKSlcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxMnB4XCIpXG4gICAgICAgIC50ZXh0KG5vZGUubmFtZSk7XG5cbiAgICBpZiAobXlkaXYgPT0gXCIjc2V0eExlZnRcIikge1xuICAgICAgICBwbG90c3ZnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJyYW5nZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDI1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIDQwKVxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmF0dXJlID09PSBcIm5vbWluYWxcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IE1hdGgucm91bmQoeVZhbEtleS5sZW5ndGggLyAyKSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJ4OiBcIiArIHlWYWxLZXlbdF0ueCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIng6IFwiLmNvbmNhdCgoK25vZGUubWVhbikudG9QcmVjaXNpb24oNCkudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHBsb3RzdmcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcInJhbmdlMlwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDI1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIDUwKVxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmF0dXJlID09PSBcIm5vbWluYWxcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IE1hdGgucm91bmQoeVZhbEtleS5sZW5ndGggLyAyKSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJ4MTogXCIgKyB5VmFsS2V5W3RdLngpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJ4MTogXCIuY29uY2F0KCgrbm9kZS5tZWFuKS50b1ByZWNpc2lvbig0KS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRpY2sgbWFya3MgYXQgYWxsIHpzY29yZXMgaW4gdGhlIGJvdW5kcyBvZiB0aGUgZGF0YVxuICAgICAgICB2YXIgbGluZUZ1bmN0aW9uID0gZDMuc3ZnLmxpbmUoKVxuICAgICAgICAgICAgLngoZCA9PiBkLngpXG4gICAgICAgICAgICAueShkID0+IGQueSlcbiAgICAgICAgICAgIC5pbnRlcnBvbGF0ZShcImxpbmVhclwiKTtcblxuICAgICAgICB2YXIgY29sU2VxID0gW1wiI0EyQ0Q1QVwiLCBcIm9yYW5nZVwiLCBcInJlZFwiXTsgLy8gd2lsbCBjeWNsZSB0aHJvdWdoIGNvbG9yIHNlcXVlbmNlLCBhbmQgdGhlbiByZXBlYXQgbGFzdCBjb2xvclxuICAgICAgICB2YXIgbGluZURhdGEgPSBuZXcgQXJyYXk7XG5cbiAgICAgICAgdmFyIHpMb3dlciA9IC0xICogKG1pblggLSBub2RlLm1lYW4pIC8gbm9kZS5zZDsgLy8genNjb3JlIG9mIGxvd2VyIGJvdW5kXG4gICAgICAgIHZhciB6VXBwZXIgPSAobWF4WCAtIG5vZGUubWVhbikgLyBub2RlLnNkOyAvLyB6c2NvcmUgb2YgdXBwZXIgYm91bmRcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHpVcHBlcjsgaSsrKSB7XG4gICAgICAgICAgICBsaW5lRGF0YSA9IFt7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IHgoK25vZGUubWVhbiArIGkgKiBub2RlLnNkKSxcbiAgICAgICAgICAgICAgICBcInlcIjogaGVpZ2h0ICogLjdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBcInhcIjogeCgrbm9kZS5tZWFuICsgaSAqIG5vZGUuc2QpLFxuICAgICAgICAgICAgICAgIFwieVwiOiBoZWlnaHQgKiAuOVxuICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBwbG90c3ZnLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgbGluZUZ1bmN0aW9uKFtsaW5lRGF0YVswXSwgbGluZURhdGFbMV1dKSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBjb2xTZXFbZDMubWluKFtpLCBjb2xTZXEubGVuZ3RoIC0gMV0pXSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxLjUpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgekxvd2VyOyBpKyspIHtcbiAgICAgICAgICAgIGxpbmVEYXRhID0gW3tcbiAgICAgICAgICAgICAgICBcInhcIjogeCgrbm9kZS5tZWFuIC0gaSAqIG5vZGUuc2QpLFxuICAgICAgICAgICAgICAgIFwieVwiOiBoZWlnaHQgKiAuN1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwieFwiOiB4KCtub2RlLm1lYW4gLSBpICogbm9kZS5zZCksXG4gICAgICAgICAgICAgICAgXCJ5XCI6IGhlaWdodCAqIC45XG4gICAgICAgICAgICB9XTtcbiAgICAgICAgICAgIHBsb3RzdmcuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBsaW5lRnVuY3Rpb24oW2xpbmVEYXRhWzBdLCBsaW5lRGF0YVsxXV0pKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIGNvbFNlcVtkMy5taW4oW2ksIGNvbFNlcS5sZW5ndGggLSAxXSldKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEuNSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGQzLm1pbih4VmFscyk7IGkgPD0gZDMubWF4KHhWYWxzKTsgaSsrKSB7XG4gICAgICAgICAgICBsaW5lRGF0YSA9IFt7XG4gICAgICAgICAgICAgICAgXCJ4XCI6IHgoaSksXG4gICAgICAgICAgICAgICAgXCJ5XCI6IGhlaWdodCAqIC43NVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIFwieFwiOiB4KGkpLFxuICAgICAgICAgICAgICAgIFwieVwiOiBoZWlnaHQgKiAuODVcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgcGxvdHN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGxpbmVGdW5jdGlvbihbbGluZURhdGFbMF0sIGxpbmVEYXRhWzFdXSkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXRpYWxpemUgc2xpZGVyIGNvbXBvbmVudHNcbiAgICAgICAgdmFyIHNsaWRlQm94ID0gcGxvdHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICogLjggKyBcIilcIilcbiAgICAgICAgICAgIC5jYWxsKGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAgICAgICAgIC5zY2FsZSh4KVxuICAgICAgICAgICAgICAgICAgLnRpY2tzKDApXG4gICAgICAgICAgICAgICAgICAub3JpZW50KFwiYm90dG9tXCIpKTtcblxuICAgICAgICB2YXIgc2xpZGVyID0gcGxvdHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2xpZGVyXCIpXG4gICAgICAgICAgICAuY2FsbChicnVzaCk7XG4gICAgICAgIHZhciBzbGlkZXIyID0gcGxvdHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2xpZGVyXCIpXG4gICAgICAgICAgICAuY2FsbChicnVzaDIpO1xuXG4gICAgICAgIGxldCBwb2ludHMgPSBpID0+IGQgPT4ge1xuICAgICAgICAgICAgbGV0IHhubSwgcyA9IDY7XG4gICAgICAgICAgICBpZiAobm9kZS5zZXR4dmFsc1tpXSA9PSAnJykge1xuICAgICAgICAgICAgICAgIC8vIGlmIG5vbWluYWwsIHVzZSB0aGUgbWVkaWFuIGZyZXF1ZW5jeSBhcyB0aGUgcG9zaXRpb24gZm9yIHRoZSBzZXR4IHNsaWRlclxuICAgICAgICAgICAgICAgIHhubSA9IG5vZGUubmF0dXJlID09ICdub21pbmFsJyA/IHgoTWF0aC5yb3VuZCh4VmFscy5sZW5ndGggLyAyKSAtIDEpIDogeChub2RlLm1lYW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4bm0gPSB4KG5vZGUuc2V0eHZhbHNbaV0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBgJHt4bm0gLSBzfSwkey1zfSAke3hubSArIHN9LCR7LXN9ICR7eG5tfSwke3MgKiAxLjN9YDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhhbmRsZSA9IHNsaWRlci5hcHBlbmQoXCJwb2x5Z29uXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaGFuZGxlXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICogLjcgKyBcIilcIilcbiAgICAgICAgICAgIC5hdHRyKFwicG9pbnRzXCIsIHBvaW50cygwKSk7XG4gICAgICAgIHZhciBoYW5kbGUyID0gc2xpZGVyMi5hcHBlbmQoXCJwb2x5Z29uXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaGFuZGxlXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICogLjkgKyBcIilcIilcbiAgICAgICAgICAgIC5hdHRyKFwicG9pbnRzXCIsIHBvaW50cygxKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHdvU0YoeCkge1xuICAgICAgICB2YXIgdHNmID0gZDMuZm9ybWF0KFwiLjJyXCIpOyAvLyBmb3JtYXQgdG8gdHdvIHNpZ25pZmljYW50IGZpZ3VyZXMgYWZ0ZXIgdGhlIGRlY2ltYWwgcGxhY2VcbiAgICAgICAgcmV0dXJuIHRzZih4KS5yZXBsYWNlKC8wKyQvLCBcIlwiKS5yZXBsYWNlKC9cXC4kLywgXCJcIik7IC8vIHRyaW0gdHJhaWxpbmcgemVyb3MgYWZ0ZXIgYSBwZXJpb2QsIGFuZCBhbnkgb3JwaGFuZWQgcGVyaW9kXG4gICAgfVxuXG4gICAgLy8gYnJ1c2hpbmcgZnVuY3Rpb25zXG4gICAgZnVuY3Rpb24gYnJ1c2hlZCgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYnJ1c2guZXh0ZW50KClbMF07XG4gICAgICAgIHZhciBzID0gNjtcblxuICAgICAgICBpZiAoZDMuZXZlbnQuc291cmNlRXZlbnQpIHtcbiAgICAgICAgICAgIHZhbHVlID0geC5pbnZlcnQoZDMubW91c2UodGhpcylbMF0pO1xuICAgICAgICAgICAgYnJ1c2guZXh0ZW50KFt2YWx1ZSwgdmFsdWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNldCB4IHBvc2l0aW9uIG9mIHNsaWRlciBjZW50ZXJcbiAgICAgICAgdmFyIHhwb3MgPSB4KHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlID4gbWF4WCkgeyAvLyBkcmFnZ2VkIHBhc3QgbWF4XG4gICAgICAgICAgICB4cG9zID0geChtYXhYKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IG1pblgpIHsgLy8gZHJhZ2dlZCBwYXN0IG1pblxuICAgICAgICAgICAgeHBvcyA9IHgobWluWCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbSA9ICtub2RlLm1lYW47XG4gICAgICAgICAgICB2YXIgc2QgPSArbm9kZS5zZDtcbiAgICAgICAgICAgIHZhciB6U2NvcmUgPSAodmFsdWUgLSBtKSAvIHNkOyAvLyB6LXNjb3JlXG4gICAgICAgICAgICB2YXIgelJvdW5kID0gTWF0aC5yb3VuZCh6U2NvcmUpOyAvLyBuZWFyZXN0IGludGVnZXIgei1zY29yZVxuICAgICAgICAgICAgaWYgKC4xID4gTWF0aC5hYnMoTWF0aC5yb3VuZCh2YWx1ZSkgLSB2YWx1ZSkpIHsgLy8gc25hcCB0byBpbnRlZ2VyXG4gICAgICAgICAgICAgICAgeHBvcyA9IHgoTWF0aC5yb3VuZCh2YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICguMSA+IE1hdGguYWJzKHpSb3VuZCAtIHpTY29yZSkpIHsgLy8gc25hcCB0byBpbnRlZ2VyIHotc2NvcmVcbiAgICAgICAgICAgICAgICB4cG9zID0geChtICsgKHpSb3VuZCAqIHNkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgc2xpZGVyIHN5bWJvbCBhbmQgdGV4dFxuICAgICAgICBoYW5kbGUuYXR0cihcInBvaW50c1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICByZXR1cm4gKHhwb3MgLSBzKSArIFwiLFwiICsgKC1zKSArIFwiIFwiICsgKHhwb3MgKyBzKSArIFwiLFwiICsgKC1zKSArIFwiIFwiICsgeHBvcyArIFwiLFwiICsgKHMgKiAxLjMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcGxvdHN2Zy5zZWxlY3QoXCJ0ZXh0I3JhbmdlXCIpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5uYXR1cmUgPT09IFwibm9taW5hbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJ4OiBcIiArIHlWYWxLZXlbTWF0aC5yb3VuZChpbnZ4KHhwb3MpKV0ueCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIng6IFwiLmNvbmNhdCgrKGludngoeHBvcykpLnRvUHJlY2lzaW9uKDQpLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbm9kZS5zZXR4dmFsc1swXSA9ICsoaW52eCh4cG9zKSkudG9QcmVjaXNpb24oNCk7XG4gICAgfVxuXG4gICAgLy8gY2VydGFpbmx5IGEgbW9yZSBjbGV2ZXIgd2F5IHRvIGRvIHRoaXMsIGJ1dCBmb3Igbm93IGl0J3MgYmFzaWNhbGx5IGNvcGllZCB3aXRoIGJydXNoIGFuZCBoYW5kbGUgY2hhbmdlcyB0byBicnVzaDIgYW5kIGhhbmRsZTIgYW5kICNyYW5nZSB0byAjcmFuZ2UyIGFuZCBzZXR4dmFsc1swXSB0byBzZXR4dmFsc1sxXVxuICAgIGZ1bmN0aW9uIGJydXNoZWQyKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBicnVzaDIuZXh0ZW50KClbMF07XG4gICAgICAgIHZhciBzID0gNjsgLy8gc2NhbGluZyBmb3IgdHJpYW5nbGUgc2hhcGVcblxuICAgICAgICBpZiAoZDMuZXZlbnQuc291cmNlRXZlbnQpIHtcbiAgICAgICAgICAgIHZhbHVlID0geC5pbnZlcnQoZDMubW91c2UodGhpcylbMF0pO1xuICAgICAgICAgICAgYnJ1c2gyLmV4dGVudChbdmFsdWUsIHZhbHVlXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgeCBwb3NpdGlvbiBvZiBzbGlkZXIgY2VudGVyXG4gICAgICAgIHZhciB4cG9zID0geCh2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSA+IG1heFgpIHsgLy8gZHJhZ2dlZCBwYXN0IG1heFxuICAgICAgICAgICAgeHBvcyA9IHgobWF4WCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPCBtaW5YKSB7IC8vIGRyYWdnZWQgcGFzdCBtaW5cbiAgICAgICAgICAgIHhwb3MgPSB4KG1pblgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG0gPSArbm9kZS5tZWFuO1xuICAgICAgICAgICAgdmFyIHNkID0gK25vZGUuc2Q7XG4gICAgICAgICAgICB2YXIgelNjb3JlID0gKHZhbHVlIC0gbSkgLyBzZDsgLy8gei1zY29yZVxuICAgICAgICAgICAgdmFyIHpSb3VuZCA9IE1hdGgucm91bmQoelNjb3JlKTsgLy8gbmVhcmVzdCBpbnRlZ2VyIHotc2NvcmVcbiAgICAgICAgICAgIGlmICguMSA+IE1hdGguYWJzKE1hdGgucm91bmQodmFsdWUpIC0gdmFsdWUpKSB7IC8vIHNuYXAgdG8gaW50ZWdlclxuICAgICAgICAgICAgICAgIHhwb3MgPSB4KE1hdGgucm91bmQodmFsdWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLjEgPiBNYXRoLmFicyh6Um91bmQgLSB6U2NvcmUpKSB7IC8vIHNuYXAgdG8gaW50ZWdlciB6LXNjb3JlXG4gICAgICAgICAgICAgICAgeHBvcyA9IHgobSArICh6Um91bmQgKiBzZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3JlYXRlIHNsaWRlciBzeW1ib2wgYW5kIHRleHRcbiAgICAgICAgaGFuZGxlMi5hdHRyKFwicG9pbnRzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiAoeHBvcyAtIHMpICsgXCIsXCIgKyBzICsgXCIgXCIgKyAoeHBvcyArIHMpICsgXCIsXCIgKyBzICsgXCIgXCIgKyB4cG9zICsgXCIsXCIgKyAoLXMgKiAxLjMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcGxvdHN2Zy5zZWxlY3QoXCJ0ZXh0I3JhbmdlMlwiKVxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmF0dXJlID09PSBcIm5vbWluYWxcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwieDE6IFwiICsgeVZhbEtleVtNYXRoLnJvdW5kKGludngoeHBvcykpXS54KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwieDE6IFwiLmNvbmNhdCgrKGludngoeHBvcykpLnRvUHJlY2lzaW9uKDQpLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbm9kZS5zZXR4dmFsc1sxXSA9ICsoaW52eCh4cG9zKSkudG9QcmVjaXNpb24oNCk7XG4gICAgfVxufVxuXG4vLyBkcmF3cyBiYXJwbG90cyBpbiBzdWJzZXQgdGFiXG5leHBvcnQgZnVuY3Rpb24gYmFyc1N1YnNldChub2RlKSB7XG4gICAgLy8gaWYgdW50b3VjaGVkLCBzZXQgbm9kZS5zdWJzZXRyYW5nZSB0byBhbiBlbXB0eSBhcnJheSwgbWVhbmluZyBhbGwgdmFsdWVzIHNlbGVjdGVkIGJ5IGRlZmF1bHRcbiAgICBpZiAobm9kZS5zdWJzZXRyYW5nZVswXSA9PSBcIlwiICYgbm9kZS5zdWJzZXRyYW5nZVsxXSA9PSBcIlwiKSB7XG4gICAgICAgIG5vZGUuc3Vic2V0cmFuZ2UgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBIaXN0b2dyYW0gc3BhY2luZ1xuICAgIHZhciBiYXJQYWRkaW5nID0gLjAxNTsgLy8gU3BhY2UgYmV0d2VlbiBiYXJzXG4gICAgdmFyIHRvcFNjYWxlID0gMS4yOyAvLyBNdWx0aXBsaWNhdGl2ZSBmYWN0b3IgdG8gYXNzaWduIHNwYWNlIGF0IHRvcCB3aXRoaW4gZ3JhcGggLSBjdXJyZW50bHkgcmVtb3ZlZCBmcm9tIGltcGxlbWVudGF0aW9uXG4gICAgdmFyIHBsb3RYYXhpcyA9IHRydWU7XG5cbiAgICAvLyBWYXJpYWJsZSBuYW1lXG4gICAgdmFyIG15bmFtZSA9IG5vZGUubmFtZS50b1N0cmluZygpO1xuICAgIG15bmFtZSA9IG15bmFtZS5yZXBsYWNlKC9cXCh8XFwpL2csIFwiXCIpO1xuXG4gICAgLy8gRGF0YVxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobm9kZS5wbG90dmFsdWVzKTtcbiAgICB2YXIgeVZhbHMgPSBuZXcgQXJyYXk7XG4gICAgdmFyIHhWYWxzID0gbmV3IEFycmF5O1xuICAgIHZhciB5VmFsS2V5ID0gbmV3IEFycmF5O1xuXG4gICAgdmFyIHhpID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUucGxvdHZhbHVlc1trZXlzW2ldXSA9PSAwKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHlWYWxzW3hpXSA9IG5vZGUucGxvdHZhbHVlc1trZXlzW2ldXTtcbiAgICAgICAgeFZhbHNbeGldID0geGk7XG4gICAgICAgIHlWYWxLZXkucHVzaCh7XG4gICAgICAgICAgICB5OiB5VmFsc1t4aV0sXG4gICAgICAgICAgICB4OiBrZXlzW2ldXG4gICAgICAgIH0pO1xuICAgICAgICB4aSA9IHhpICsgMTtcbiAgICB9XG4gICAgaWYgKG5vZGUubmF0dXJlID09PSBcIm5vbWluYWxcIikgeyAvLyBpZiBub21pbmFsLCBvcmRlcnMgYmFycyBsZWZ0IHRvIHJpZ2h0LCBoaWdoZXN0IGZyZXF1ZW5jeSB0byBsb3dlc3RcbiAgICAgICAgeVZhbEtleS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLnkgLSBhLnlcbiAgICAgICAgfSk7IC8vIGFycmF5IG9mIG9iamVjdHMsIGVhY2ggb2JqZWN0IGhhcyB5LCB0aGUgc2FtZSBhcyB5VmFscywgYW5kIHgsIHRoZSBjYXRlZ29yeVxuICAgICAgICB5VmFscy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiIC0gYVxuICAgICAgICB9KTsgLy8gYXJyYXkgb2YgeSB2YWx1ZXMsIHRoZSBoZWlnaHQgb2YgdGhlIGJhcnNcbiAgICB9XG5cbiAgICBwbG90WGF4aXMgPSBmYWxzZTtcblxuICAgIHZhciBtYXhZID0gZDMubWF4KHlWYWxzKTtcbiAgICB2YXIgbWluWCA9IGQzLm1pbih4VmFscyk7XG4gICAgdmFyIG1heFggPSBkMy5tYXgoeFZhbHMpO1xuICAgIHZhciBnbmFtZSA9IFtcInN1YnNldHllc1wiLCBcInN1YnNldG5vXCJdO1xuXG4gICAgdmFyIHlWYWxzMiA9IFtdO1xuICAgIHZhciB5VmFsczEgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgeVZhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgeVZhbHMxLnB1c2goe1xuICAgICAgICAgICAgeTA6IG1heFkgLSB5VmFsc1tpXSxcbiAgICAgICAgICAgIHkxOiB5VmFsc1tpXSxcbiAgICAgICAgICAgIGNvbDogZDNDb2xvclxuICAgICAgICB9KTtcbiAgICAgICAgeVZhbHMyLnB1c2goe1xuICAgICAgICAgICAgeTA6IDAsXG4gICAgICAgICAgICB5MTogbWF4WSAtIHlWYWxzW2ldLFxuICAgICAgICAgICAgY29sOiBcInRyYW5zcGFyZW50XCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBmcmVxcyA9IFt5VmFsczEsIHlWYWxzMl07XG5cbiAgICAvLyB5MCBpcyB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAvLyB5MSBpcyB0aGUgbGVuZ3RoIG9mIHRoZSBiYXJcblxuICAgIHZhciBteWRpdiA9IFwiI3RhYjJcIjtcbiAgICB2YXIgd2lkdGggPSAyMDA7XG4gICAgdmFyIGhlaWdodCA9IDEyMDtcbiAgICB2YXIgbWFyZ2luID0ge1xuICAgICAgICB0b3A6IDIwLFxuICAgICAgICByaWdodDogMjAsXG4gICAgICAgIGJvdHRvbTogNTMsXG4gICAgICAgIGxlZnQ6IDUwXG4gICAgfTtcblxuICAgIHZhciB4ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbbWluWCAtIDAuNSwgbWF4WCArIDAuNV0pXG4gICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxuICAgIHZhciBpbnZ4ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgLnJhbmdlKFttaW5YIC0gMC41LCBtYXhYICsgMC41XSlcbiAgICAgICAgLmRvbWFpbihbMCwgd2lkdGhdKTtcblxuICAgIHZhciB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbMCwgbWF4WV0pXG4gICAgICAgIC5yYW5nZShbMCwgaGVpZ2h0XSk7XG5cbiAgICB2YXIgeEF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgIC5zY2FsZSh4KVxuICAgICAgICAudGlja3MoeVZhbHMubGVuZ3RoKVxuICAgICAgICAub3JpZW50KFwiYm90dG9tXCIpO1xuXG4gICAgdmFyIHlBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAuc2NhbGUoeSlcbiAgICAgICAgLm9yaWVudChcImxlZnRcIik7XG5cbiAgICAvL0NyZWF0ZSBTVkcgZWxlbWVudFxuICAgIHZhciBwbG90c3ZnID0gZDMuc2VsZWN0KG15ZGl2KVxuICAgICAgICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbXluYW1lLmNvbmNhdChcIl9cIiwgbXlkaXYuc3Vic3RyKDEpLCBcIl9cIiwgbm9kZS5pZCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcIndpZHRoXCIsIHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpIC8vc2V0dGluZyBoZWlnaHQgdG8gdGhlIGhlaWdodCBvZiAjbWFpbi5sZWZ0XG4gICAgICAgIC5zdHlsZShcImhlaWdodFwiLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgIHZhciBmcmVxID0gcGxvdHN2Zy5zZWxlY3RBbGwoXCJnLmZyZXFcIilcbiAgICAgICAgLmRhdGEoZnJlcXMpXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImZyZXFcIilcbiAgICAgICAgLmF0dHIoXCJuYW1lXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBteW5hbWUuY29uY2F0KGduYW1lW2ldKTtcbiAgICAgICAgfSk7XG5cbiAgICB2YXIgcmVjdCA9IGZyZXEuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgICAuZGF0YShPYmplY3QpXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhclwiKVxuICAgICAgICAuYXR0cihcIm5hbWVcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHhWYWxzW2ldO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHgoeFZhbHNbaV0gLSAwLjUgKyBiYXJQYWRkaW5nKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHJldHVybiB5KGQueTApO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHgobWluWCArIDAuNSAtIDIgKiBiYXJQYWRkaW5nKSkgLy8gdGhlIFwid2lkdGhcIiBpcyB0aGUgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIG9mIHRoZSBmaXJzdCBiYXJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHkoZC55MSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgaWYgKG5vZGUuc3Vic2V0cmFuZ2UubGVuZ3RoID4gMCAmIGQuY29sID09PSBkM0NvbG9yICYgJC5pbkFycmF5KHhWYWxzW2ldLnRvU3RyaW5nKCksIG5vZGUuc3Vic2V0cmFuZ2UpID4gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsVmFyQ29sb3I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLmNvbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0TWUgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHNlbGVjdE5hbWUgPSB0aGlzLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT0gbXluYW1lLmNvbmNhdChcInN1YnNldG5vXCIpKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0TWUgPSAkKCdbbmFtZT1cIicgKyBteW5hbWUuY29uY2F0KFwic3Vic2V0eWVzXCIpICsgJ1wiXScpLmNoaWxkcmVuKCdbbmFtZT1cIicgKyBzZWxlY3ROYW1lICsgJ1wiXScpWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZDMuc2VsZWN0KHNlbGVjdE1lKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXlDb2wgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdHlsZS5maWxsID09PSBzZWxWYXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG15aW5kZXggPSBub2RlLnN1YnNldHJhbmdlLmluZGV4T2YodGhpcy5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3Vic2V0cmFuZ2Uuc3BsaWNlKG15aW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXlDb2wgPSBkM0NvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdWJzZXRyYW5nZS5wdXNoKHRoaXMuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBteUNvbCA9IHNlbFZhckNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBteUNvbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBsb3Rzdmcuc2VsZWN0KFwidGV4dCNzZWxlY3RyYW5nZVwiKVxuICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5zdWJzZXRyYW5nZS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIlNlbGVjdGVkOiBhbGwgdmFsdWVzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBub2RlLnN1YnNldHJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkcyA9IG5ldyBBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZm9yRWFjaChmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZHMucHVzaCh5VmFsS2V5W3ZhbF0ueCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIlNlbGVjdGVkOiBcIiArIHNlbGVjdGVkcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcbiAgICAgICAgICAgIHBsb3Rzdmcuc2VsZWN0KFwidGV4dCNteW1vdXNlb3ZlclwiKVxuICAgICAgICAgICAgICAgIC50ZXh0KCgpID0+IHlWYWxLZXlbaV0ueCArIFwiOiBcIiArIHlWYWxLZXlbaV0ueSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XG4gICAgICAgICAgICBwbG90c3ZnLnNlbGVjdChcInRleHQjbXltb3VzZW92ZXJcIilcbiAgICAgICAgICAgICAgICAudGV4dCgoKSA9PiBcIlZhbHVlOiBGcmVxdWVuY3lcIik7XG4gICAgICAgIH0pO1xuXG4gICAgaWYgKHBsb3RYYXhpcykge1xuICAgICAgICBwbG90c3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ4IGF4aXNcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgIC5jYWxsKHhBeGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwbG90c3ZnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJteW1vdXNlb3ZlclwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDI1KVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIDIwKVxuICAgICAgICAgICAgLnRleHQoKCkgPT4gXCJWYWx1ZTogRnJlcXVlbmN5XCIpO1xuICAgIH1cblxuICAgIHBsb3RzdmcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgKHdpZHRoIC8gMikpXG4gICAgICAgIC5hdHRyKFwieVwiLCAwIC0gKG1hcmdpbi50b3AgLyAyKSlcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxMnB4XCIpXG4gICAgICAgIC50ZXh0KG15bmFtZSk7XG5cbiAgICBwbG90c3ZnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInNlbGVjdHJhbmdlXCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCAyNSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIDQwKVxuICAgICAgICAudGV4dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZS5zdWJzZXRyYW5nZS5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJTZWxlY3RlZDogYWxsIHZhbHVlc1wiO1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkcyA9IG5ldyBBcnJheTtcbiAgICAgICAgICAgIG5vZGUuc3Vic2V0cmFuZ2UuZm9yRWFjaCh2YWwgPT4gIHNlbGVjdGVkcy5wdXNoKHlWYWxLZXlbdmFsXS54KSk7XG4gICAgICAgICAgICByZXR1cm4gXCJTZWxlY3RlZDogXCIgKyBzZWxlY3RlZHM7XG4gICAgICAgIH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZW5zaXR5Tm9kZShub2RlLCBvYmopIHtcbiAgICB2YXIgbXluYW1lID0gbm9kZS5uYW1lLnRvU3RyaW5nKCkuY29uY2F0KFwibm9kZXBsb3RcIik7XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB2YXIgb2JqID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZS5uYW1lLnRvU3RyaW5nKCkgKyBcImJpZ2dyb3VwXCIpO1xuICAgICAgICAvLyBpZiBvYmogY29udGFpbnMgYW4gc3ZnIGVsZW1lbnQsIHJlbW92ZSBpdC4gdGhpcyByZW1vdmVzIGFueSBwbG90IGluc2lkZSB0aGUgbm9kZVxuICAgICAgICBpZiAoZDMuc2VsZWN0KG9iaikuc2VsZWN0QWxsKFwic3ZnXCIpWzBdLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBkMy5zZWxlY3Qob2JqKS5zZWxlY3RBbGwoXCJzdmdcIikucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdmFyIHlWYWxzID0gbm9kZS5wbG90eTtcbiAgICB2YXIgeFZhbHMgPSBub2RlLnBsb3R4O1xuICAgIC8vIGFycmF5IG9mIG9iamVjdHNcbiAgICBsZXQgZGF0YTIgPSBub2RlLnBsb3R4Lm1hcCgoeCwgaSkgPT4gKHt4OiAreCwgeTogK25vZGUucGxvdHlbaV19KSk7XG5cbiAgICB2YXIgd2lkdGggPSA2MDsgLy8gaGFyZGNvZGVkLCBzaG91bGQgYmUgc2V0IGF1dG9tYXRpY2FsbHlcbiAgICB2YXIgaGVpZ2h0ID0gMzA7XG4gICAgdmFyIG1hcmdpbiA9IHtcbiAgICAgICAgdG9wOiAyMCxcbiAgICAgICAgcmlnaHQ6IDEwLFxuICAgICAgICBib3R0b206IDUzLFxuICAgICAgICBsZWZ0OiAxMFxuICAgIH07XG5cbiAgICB2YXIgeCA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgIC5kb21haW4oW2QzLm1pbih4VmFscyksIGQzLm1heCh4VmFscyldKVxuICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG5cbiAgICB2YXIgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgIC5kb21haW4oW2QzLm1pbih5VmFscyksIGQzLm1heCh5VmFscyldKVxuICAgICAgICAucmFuZ2UoW2hlaWdodCwgMF0pO1xuXG4gICAgdmFyIGFyZWEgPSBkMy5zdmcuYXJlYSgpXG4gICAgICAgIC5pbnRlcnBvbGF0ZShcIm1vbm90b25lXCIpXG4gICAgICAgIC54KGQgPT4geChkLngpKVxuICAgICAgICAueTAoaGVpZ2h0KVxuICAgICAgICAueTEoZCA9PiB5KGQueSkpO1xuXG4gICAgdmFyIHBsb3RzdmcgPSBkMy5zZWxlY3Qob2JqKVxuICAgICAgICAuaW5zZXJ0KFwic3ZnXCIsIFwiOmZpcnN0LWNoaWxkXCIpXG4gICAgICAgIC5hdHRyKFwieFwiLCAtNDApIC8vIE5PVEU6IE5vdCBzdXJlIGV4YWN0bHkgd2h5IHRoZXNlIG51bWJlcnMgd29yaywgYnV0IHRoZXNlIGhhcmRjb2RlZCB2YWx1ZXMgc2VlbSB0byBwb3NpdGlvbiB0aGUgcGxvdCBpbnNpZGUgZyBjb3JyZWN0bHkuICB0aGlzIHNob3VsZG4ndCBiZSBoYXJkY29kZWQgaW4gdGhlIGZ1dHVyZVxuICAgICAgICAuYXR0cihcInlcIiwgLTQ1KVxuICAgICAgICAuYXR0cihcImlkXCIsICgpID0+IG15bmFtZSlcbiAgICAgICAgLnN0eWxlKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgIC5zdHlsZShcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICBwbG90c3ZnLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgLmRhdHVtKGRhdGEyKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXJlYVwiKVxuICAgICAgICAuYXR0cihcImRcIiwgYXJlYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXJzTm9kZShub2RlLCBvYmopIHtcbiAgICB2YXIgbXluYW1lID0gbm9kZS5uYW1lLnRvU3RyaW5nKCkuY29uY2F0KFwibm9kZXBsb3RcIik7XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB2YXIgb2JqID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm9kZS5uYW1lLnRvU3RyaW5nKCkgKyBcImJpZ2dyb3VwXCIpO1xuICAgICAgICAvLyBpZiBvYmogY29udGFpbnMgYW4gc3ZnIGVsZW1lbnQsIHJlbW92ZSBpdC4gdGhpcyByZW1vdmVzIGFueSBwbG90IGluc2lkZSB0aGUgbm9kZVxuICAgICAgICBpZiAoZDMuc2VsZWN0KG9iaikuc2VsZWN0QWxsKFwic3ZnXCIpWzBdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdChvYmopLnNlbGVjdEFsbChcInN2Z1wiKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhpc3RvZ3JhbSBzcGFjaW5nXG4gICAgdmFyIGJhclBhZGRpbmcgPSAuMDE1OyAvLyBTcGFjZSBiZXR3ZWVuIGJhcnNcbiAgICB2YXIgdG9wU2NhbGUgPSAxLjI7IC8vIE11bHRpcGxpY2F0aXZlIGZhY3RvciB0byBhc3NpZ24gc3BhY2UgYXQgdG9wIHdpdGhpbiBncmFwaCAtIGN1cnJlbnRseSByZW1vdmVkIGZyb20gaW1wbGVtZW50YXRpb25cblxuICAgIC8vIERhdGFcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG5vZGUucGxvdHZhbHVlcyk7XG4gICAgdmFyIHlWYWxzID0gbmV3IEFycmF5O1xuICAgIHZhciB4VmFscyA9IG5ldyBBcnJheTtcbiAgICB2YXIgeVZhbEtleSA9IG5ldyBBcnJheTtcblxuICAgIGlmIChub2RlLm5hdHVyZSA9PT0gXCJub21pbmFsXCIpIHtcbiAgICAgICAgdmFyIHhpID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5wbG90dmFsdWVzW2tleXNbaV1dID09IDApXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB5VmFsc1t4aV0gPSBub2RlLnBsb3R2YWx1ZXNba2V5c1tpXV07XG4gICAgICAgICAgICB4VmFsc1t4aV0gPSB4aTtcbiAgICAgICAgICAgIHlWYWxLZXkucHVzaCh7eTogeVZhbHNbeGldLCB4OiBrZXlzW2ldfSk7XG4gICAgICAgICAgICB4aSA9IHhpICsgMTtcbiAgICAgICAgfVxuICAgICAgICB5VmFsS2V5LnNvcnQoKGEsIGIpID0+IGIueSAtIGEueSk7IC8vIGFycmF5IG9mIG9iamVjdHMsIGVhY2ggb2JqZWN0IGhhcyB5LCB0aGUgc2FtZSBhcyB5VmFscywgYW5kIHgsIHRoZSBjYXRlZ29yeVxuICAgICAgICB5VmFscy5zb3J0KChhLCBiKSA9PiBiIC0gYSk7IC8vIGFycmF5IG9mIHkgdmFsdWVzLCB0aGUgaGVpZ2h0IG9mIHRoZSBiYXJzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB5VmFsc1tpXSA9IG5vZGUucGxvdHZhbHVlc1trZXlzW2ldXTtcbiAgICAgICAgICAgIHhWYWxzW2ldID0gTnVtYmVyKGtleXNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1heFkgPSBkMy5tYXgoeVZhbHMpO1xuICAgIHZhciBtaW5YID0gZDMubWluKHhWYWxzKTtcbiAgICB2YXIgbWF4WCA9IGQzLm1heCh4VmFscyk7XG5cbiAgICB2YXIgd2lkdGggPSA2MDtcbiAgICB2YXIgaGVpZ2h0ID0gMzA7XG4gICAgdmFyIG1hcmdpbiA9IHtcbiAgICAgICAgdG9wOiAyMCxcbiAgICAgICAgcmlnaHQ6IDEwLFxuICAgICAgICBib3R0b206IDUzLFxuICAgICAgICBsZWZ0OiAxMFxuICAgIH07XG5cbiAgICB2YXIgeCA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgIC5kb21haW4oW21pblggLSAwLjUsIG1heFggKyAwLjVdKVxuICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG5cbiAgICB2YXIgaW52eCA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgIC5yYW5nZShbbWluWCAtIDAuNSwgbWF4WCArIDAuNV0pXG4gICAgICAgIC5kb21haW4oWzAsIHdpZHRoXSk7XG5cbiAgICB2YXIgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgIC5kb21haW4oWzAsIG1heFldKVxuICAgICAgICAucmFuZ2UoWzAsIGhlaWdodF0pO1xuXG4gICAgLy9DcmVhdGUgU1ZHIGVsZW1lbnRcbiAgICB2YXIgcGxvdHN2ZyA9IGQzLnNlbGVjdChvYmopXG4gICAgICAgIC5pbnNlcnQoXCJzdmdcIiwgXCI6Zmlyc3QtY2hpbGRcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIC00MClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIC00NSlcbiAgICAgICAgLmF0dHIoXCJpZFwiLCAoKSA9PiBteW5hbWUpXG4gICAgICAgIC5zdHlsZShcIndpZHRoXCIsIHdpZHRoKSAvLyBzZXQgaGVpZ2h0IHRvIHRoZSBoZWlnaHQgb2YgI21haW4ubGVmdFxuICAgICAgICAuc3R5bGUoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gICAgcGxvdHN2Zy5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgICAgIC5kYXRhKHlWYWxzKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgKGQsIGkpID0+ICB4KHhWYWxzW2ldIC0gMC41ICsgYmFyUGFkZGluZykpXG4gICAgICAgIC5hdHRyKFwieVwiLCBkID0+ICB5KG1heFkgLSBkKSlcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB4KG1pblggKyAwLjUgLSAyICogYmFyUGFkZGluZykpIC8vIHRoZSBcIndpZHRoXCIgaXMgdGhlIGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBvZiB0aGUgZmlyc3QgYmFyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHkpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMxZjc3YjRcIik7XG59XG5cblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvYXBwL3Bsb3RzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getClasses = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar getClasses = exports.getClasses = function getClasses(cls, panel) {\n    return cls + (panel.closed ? '.closepanel' : panel.side === 'left' && app.lefttab === 'tab2' ? '.expandpanel' : '');\n};\n\nvar Panel = function () {\n    function Panel() {\n        _classCallCheck(this, Panel);\n    }\n\n    _createClass(Panel, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            this.closed = false;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var _vnode$attrs = vnode.attrs,\n                side = _vnode$attrs.side,\n                title = _vnode$attrs.title;\n\n            var dot = [_mithril2.default.trust('&#9679;'), (0, _mithril2.default)('br')];\n            return (0, _mithril2.default)(getClasses('#' + side + 'panel.sidepanel.container.clearfix', this), (0, _mithril2.default)('#toggle' + (side === 'left' ? 'L' : 'R') + 'panelicon.panelbar[style=height: 100%]', (0, _mithril2.default)('span', { onclick: function onclick(_) {\n                    return _this.closed = !_this.closed;\n                } }, dot, dot, dot, dot)), (0, _mithril2.default)('#' + side + 'paneltitle.panel-heading.text-center', (0, _mithril2.default)(\"h3.panel-title\", title)), vnode.children[0], (0, _mithril2.default)(getClasses('.row-fluid', this), (0, _mithril2.default)('#' + side + 'panelcontent', (0, _mithril2.default)('#' + side + 'ContentArea[style=height: calc(100vh - 210px); overflow: auto]', vnode.children.slice(1)))));\n        }\n    }]);\n\n    return Panel;\n}();\n\nexports.default = Panel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1BhbmVsLmpzPzkyNGYiXSwibmFtZXMiOlsiYXBwIiwiZ2V0Q2xhc3NlcyIsImNscyIsInBhbmVsIiwiY2xvc2VkIiwic2lkZSIsImxlZnR0YWIiLCJQYW5lbCIsInZub2RlIiwiYXR0cnMiLCJ0aXRsZSIsImRvdCIsInRydXN0Iiwib25jbGljayIsImNoaWxkcmVuIiwic2xpY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7O0FBRUE7O0lBQVlBLEc7Ozs7Ozs7O0FBRUwsSUFBSUMsa0NBQWEsU0FBYkEsVUFBYSxDQUFTQyxHQUFULEVBQWNDLEtBQWQsRUFBcUI7QUFDekMsV0FBT0QsT0FBT0MsTUFBTUMsTUFBTixHQUFlLGFBQWYsR0FDVEQsTUFBTUUsSUFBTixLQUFlLE1BQWYsSUFBeUJMLElBQUlNLE9BQUosS0FBZ0IsTUFBMUMsR0FBb0QsY0FBcEQsR0FDQSxFQUZHLENBQVA7QUFHSCxDQUpNOztJQU1EQyxLOzs7Ozs7OytCQUNLQyxLLEVBQU87QUFDVixpQkFBS0osTUFBTCxHQUFjLEtBQWQ7QUFDSDs7OzZCQUVJSSxLLEVBQU87QUFBQTs7QUFBQSwrQkFDWUEsTUFBTUMsS0FEbEI7QUFBQSxnQkFDSEosSUFERyxnQkFDSEEsSUFERztBQUFBLGdCQUNHSyxLQURILGdCQUNHQSxLQURIOztBQUVSLGdCQUFNQyxNQUFNLENBQUMsa0JBQUVDLEtBQUYsQ0FBUSxTQUFSLENBQUQsRUFBcUIsdUJBQUUsSUFBRixDQUFyQixDQUFaO0FBQ0EsbUJBQU8sdUJBQUVYLGlCQUFlSSxJQUFmLHlDQUF5RCxJQUF6RCxDQUFGLEVBQ0gsb0NBQVlBLFNBQVMsTUFBVCxHQUFrQixHQUFsQixHQUF3QixHQUFwQyw4Q0FDRSx1QkFBRSxNQUFGLEVBQVUsRUFBQ1EsU0FBUztBQUFBLDJCQUFLLE1BQUtULE1BQUwsR0FBYyxDQUFDLE1BQUtBLE1BQXpCO0FBQUEsaUJBQVYsRUFBVixFQUFzRE8sR0FBdEQsRUFBMkRBLEdBQTNELEVBQWdFQSxHQUFoRSxFQUFxRUEsR0FBckUsQ0FERixDQURHLEVBR0gsNkJBQU1OLElBQU4sMkNBQ0UsdUJBQUUsZ0JBQUYsRUFBb0JLLEtBQXBCLENBREYsQ0FIRyxFQUtIRixNQUFNTSxRQUFOLENBQWUsQ0FBZixDQUxHLEVBTUgsdUJBQUViLFdBQVcsWUFBWCxFQUF5QixJQUF6QixDQUFGLEVBQ0UsNkJBQU1JLElBQU4sbUJBQ0UsNkJBQU1BLElBQU4scUVBQTRFRyxNQUFNTSxRQUFOLENBQWVDLEtBQWYsQ0FBcUIsQ0FBckIsQ0FBNUUsQ0FERixDQURGLENBTkcsQ0FBUDtBQVNIOzs7Ozs7a0JBR1VSLEsiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4vYXBwJztcblxuZXhwb3J0IGxldCBnZXRDbGFzc2VzID0gZnVuY3Rpb24oY2xzLCBwYW5lbCkge1xuICAgIHJldHVybiBjbHMgKyAocGFuZWwuY2xvc2VkID8gJy5jbG9zZXBhbmVsJyA6IFxuICAgICAgICAocGFuZWwuc2lkZSA9PT0gJ2xlZnQnICYmIGFwcC5sZWZ0dGFiID09PSAndGFiMicpID8gJy5leHBhbmRwYW5lbCcgOiBcbiAgICAgICAgJycpO1xufTtcblxuY2xhc3MgUGFuZWwge1xuICAgIG9uaW5pdCh2bm9kZSkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZpZXcodm5vZGUpIHtcbiAgICAgICAgbGV0IHtzaWRlLCB0aXRsZX0gPSB2bm9kZS5hdHRycztcbiAgICAgICAgY29uc3QgZG90ID0gW20udHJ1c3QoJyYjOTY3OTsnKSwgbSgnYnInKV07IFxuICAgICAgICByZXR1cm4gbShnZXRDbGFzc2VzKGAjJHtzaWRlfXBhbmVsLnNpZGVwYW5lbC5jb250YWluZXIuY2xlYXJmaXhgLCB0aGlzKSxcbiAgICAgICAgICAgIG0oYCN0b2dnbGUke3NpZGUgPT09ICdsZWZ0JyA/ICdMJyA6ICdSJ31wYW5lbGljb24ucGFuZWxiYXJbc3R5bGU9aGVpZ2h0OiAxMDAlXWAsXG4gICAgICAgICAgICAgIG0oJ3NwYW4nLCB7b25jbGljazogXyA9PiB0aGlzLmNsb3NlZCA9ICF0aGlzLmNsb3NlZH0sIGRvdCwgZG90LCBkb3QsIGRvdCkpLFxuICAgICAgICAgICAgbShgIyR7c2lkZX1wYW5lbHRpdGxlLnBhbmVsLWhlYWRpbmcudGV4dC1jZW50ZXJgLFxuICAgICAgICAgICAgICBtKFwiaDMucGFuZWwtdGl0bGVcIiwgdGl0bGUpKSxcbiAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuWzBdLFxuICAgICAgICAgICAgbShnZXRDbGFzc2VzKCcucm93LWZsdWlkJywgdGhpcyksIFxuICAgICAgICAgICAgICBtKGAjJHtzaWRlfXBhbmVsY29udGVudGAsXG4gICAgICAgICAgICAgICAgbShgIyR7c2lkZX1Db250ZW50QXJlYVtzdHlsZT1oZWlnaHQ6IGNhbGMoMTAwdmggLSAyMTBweCk7IG92ZXJmbG93OiBhdXRvXWAsIHZub2RlLmNoaWxkcmVuLnNsaWNlKDEpKSkpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhbmVsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2FwcC92aWV3cy9QYW5lbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.or = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar or = exports.or = function or(side, val) {\n    var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'block';\n    var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none';\n\n    return app[side + 'tab'] === val ? y : n;\n};\n\nvar PanelButton = function () {\n    function PanelButton() {\n        _classCallCheck(this, PanelButton);\n    }\n\n    _createClass(PanelButton, [{\n        key: 'view',\n        value: function view(vnode) {\n            var _vnode$attrs = vnode.attrs,\n                id = _vnode$attrs.id,\n                id2 = _vnode$attrs.id2,\n                classes = _vnode$attrs.classes,\n                onclick = _vnode$attrs.onclick,\n                style = _vnode$attrs.style,\n                title = _vnode$attrs.title;\n\n            var left = id2 ? true : false;\n            id2 = id2 || id;\n            return (0, _mithril2.default)('button#' + id + '.btn.' + (classes || or(left ? 'left' : 'right', id2, 'active', 'btn-default')) + '[type=button]', {\n                onclick: onclick || function (_) {\n                    return left ? app.tabLeft(id2) : app.tabRight(id2);\n                },\n                style: style,\n                title: title }, vnode.children);\n        }\n    }]);\n\n    return PanelButton;\n}();\n\nexports.default = PanelButton;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1BhbmVsQnV0dG9uLmpzP2M4NTciXSwibmFtZXMiOlsiYXBwIiwib3IiLCJzaWRlIiwidmFsIiwieSIsIm4iLCJQYW5lbEJ1dHRvbiIsInZub2RlIiwiYXR0cnMiLCJpZCIsImlkMiIsImNsYXNzZXMiLCJvbmNsaWNrIiwic3R5bGUiLCJ0aXRsZSIsImxlZnQiLCJ0YWJMZWZ0IiwidGFiUmlnaHQiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7SUFBWUEsRzs7Ozs7Ozs7QUFFTCxJQUFJQyxrQkFBSyxTQUFMQSxFQUFLLENBQVNDLElBQVQsRUFBZUMsR0FBZixFQUF5QztBQUFBLFFBQXJCQyxDQUFxQix1RUFBbkIsT0FBbUI7QUFBQSxRQUFWQyxDQUFVLHVFQUFSLE1BQVE7O0FBQ3JELFdBQU9MLElBQUlFLE9BQU8sS0FBWCxNQUFzQkMsR0FBdEIsR0FBNEJDLENBQTVCLEdBQWdDQyxDQUF2QztBQUNILENBRk07O0lBSURDLFc7Ozs7Ozs7NkJBQ0dDLEssRUFBTztBQUFBLCtCQUN3Q0EsTUFBTUMsS0FEOUM7QUFBQSxnQkFDSEMsRUFERyxnQkFDSEEsRUFERztBQUFBLGdCQUNDQyxHQURELGdCQUNDQSxHQUREO0FBQUEsZ0JBQ01DLE9BRE4sZ0JBQ01BLE9BRE47QUFBQSxnQkFDZUMsT0FEZixnQkFDZUEsT0FEZjtBQUFBLGdCQUN3QkMsS0FEeEIsZ0JBQ3dCQSxLQUR4QjtBQUFBLGdCQUMrQkMsS0FEL0IsZ0JBQytCQSxLQUQvQjs7QUFFUixnQkFBSUMsT0FBT0wsTUFBTSxJQUFOLEdBQWEsS0FBeEI7QUFDQUEsa0JBQU1BLE9BQU9ELEVBQWI7QUFDQSxtQkFBTyxtQ0FBWUEsRUFBWixjQUFzQkUsV0FBV1YsR0FBR2MsT0FBTyxNQUFQLEdBQWdCLE9BQW5CLEVBQTRCTCxHQUE1QixFQUFpQyxRQUFqQyxFQUEyQyxhQUEzQyxDQUFqQyxxQkFBMkc7QUFDOUdFLHlCQUFTQSxXQUFZO0FBQUEsMkJBQUtHLE9BQU9mLElBQUlnQixPQUFKLENBQVlOLEdBQVosQ0FBUCxHQUEwQlYsSUFBSWlCLFFBQUosQ0FBYVAsR0FBYixDQUEvQjtBQUFBLGlCQUR5RjtBQUU5R0csdUJBQU9BLEtBRnVHO0FBRzlHQyx1QkFBT0EsS0FIdUcsRUFBM0csRUFJSFAsTUFBTVcsUUFKSCxDQUFQO0FBS0g7Ozs7OztrQkFHVVosVyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCAqIGFzIGFwcCBmcm9tICcuLi9hcHAnO1xuXG5leHBvcnQgbGV0IG9yID0gZnVuY3Rpb24oc2lkZSwgdmFsLCB5PSdibG9jaycsIG49J25vbmUnKSB7XG4gICAgcmV0dXJuIGFwcFtzaWRlICsgJ3RhYiddID09PSB2YWwgPyB5IDogbjtcbn07XG5cbmNsYXNzIFBhbmVsQnV0dG9uIHtcbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7aWQsIGlkMiwgY2xhc3Nlcywgb25jbGljaywgc3R5bGUsIHRpdGxlfSA9IHZub2RlLmF0dHJzO1xuICAgICAgICBsZXQgbGVmdCA9IGlkMiA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgaWQyID0gaWQyIHx8IGlkO1xuICAgICAgICByZXR1cm4gbShgYnV0dG9uIyR7aWR9LmJ0bi4ke2NsYXNzZXMgfHwgb3IobGVmdCA/ICdsZWZ0JyA6ICdyaWdodCcsIGlkMiwgJ2FjdGl2ZScsICdidG4tZGVmYXVsdCcpfVt0eXBlPWJ1dHRvbl1gLCB7XG4gICAgICAgICAgICBvbmNsaWNrOiBvbmNsaWNrIHx8IChfID0+IGxlZnQgPyBhcHAudGFiTGVmdChpZDIpIDogYXBwLnRhYlJpZ2h0KGlkMikpLFxuICAgICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlfSxcbiAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhbmVsQnV0dG9uO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2FwcC92aWV3cy9QYW5lbEJ1dHRvbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.searchIndex = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar searchIndex = exports.searchIndex = void 0;\n\nvar search = function search(val) {\n    var all = app.allNodes;\n    if (val === '') {\n        exports.searchIndex = searchIndex = null;\n        return app.valueKey = all.map(function (n) {\n            return n.name;\n        });\n    }\n\n    var matches = [],\n        others = [],\n        match = function match(n, key) {\n        return n[key].toLowerCase().includes(val.toLowerCase());\n    };\n\n    all.forEach(function (n) {\n        return match(n, 'name') || match(n, 'labl') ? matches.push(n) : others.push(n);\n    });\n    exports.searchIndex = searchIndex = matches.length;\n    app.valueKey = matches.concat(others).map(function (n) {\n        return n.name;\n    });\n};\n\nvar Search = function () {\n    function Search() {\n        _classCallCheck(this, Search);\n    }\n\n    _createClass(Search, [{\n        key: 'view',\n        value: function view(vnode) {\n            vnode.attrs.oninput = _mithril2.default.withAttr('value', search);\n            return (0, _mithril2.default)('input#searchvar.form-control[style=margin-bottom: 5px; width: 100%]', vnode.attrs);\n        }\n    }]);\n\n    return Search;\n}();\n\nexports.default = Search;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1NlYXJjaC5qcz8xMzc4Il0sIm5hbWVzIjpbImFwcCIsInNlYXJjaEluZGV4Iiwic2VhcmNoIiwiYWxsIiwiYWxsTm9kZXMiLCJ2YWwiLCJ2YWx1ZUtleSIsIm1hcCIsIm4iLCJuYW1lIiwibWF0Y2hlcyIsIm90aGVycyIsIm1hdGNoIiwia2V5IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImZvckVhY2giLCJwdXNoIiwibGVuZ3RoIiwiY29uY2F0IiwiU2VhcmNoIiwidm5vZGUiLCJhdHRycyIsIm9uaW5wdXQiLCJ3aXRoQXR0ciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7SUFBWUEsRzs7QUFDWjs7Ozs7Ozs7QUFFTyxJQUFJQywwQ0FBSjs7QUFFUCxJQUFJQyxTQUFTLFNBQVRBLE1BQVMsTUFBTztBQUNoQixRQUFJQyxNQUFNSCxJQUFJSSxRQUFkO0FBQ0EsUUFBSUMsUUFBUSxFQUFaLEVBQWdCO0FBQ1osZ0JBTEdKLFdBS0gsaUJBQWMsSUFBZDtBQUNBLGVBQU9ELElBQUlNLFFBQUosR0FBZUgsSUFBSUksR0FBSixDQUFRO0FBQUEsbUJBQUtDLEVBQUVDLElBQVA7QUFBQSxTQUFSLENBQXRCO0FBQ0g7O0FBTGUsUUFNWEMsT0FOVyxHQU1nQixFQU5oQjtBQUFBLFFBTUZDLE1BTkUsR0FNb0IsRUFOcEI7QUFBQSxRQU1NQyxLQU5OLEdBTXdCLFNBQWxCQSxLQUFrQixDQUFDSixDQUFELEVBQUlLLEdBQUo7QUFBQSxlQUFZTCxFQUFFSyxHQUFGLEVBQU9DLFdBQVAsR0FBcUJDLFFBQXJCLENBQThCVixJQUFJUyxXQUFKLEVBQTlCLENBQVo7QUFBQSxLQU54Qjs7QUFPaEJYLFFBQUlhLE9BQUosQ0FBWTtBQUFBLGVBQUtKLE1BQU1KLENBQU4sRUFBUyxNQUFULEtBQW9CSSxNQUFNSixDQUFOLEVBQVMsTUFBVCxDQUFwQixHQUF1Q0UsUUFBUU8sSUFBUixDQUFhVCxDQUFiLENBQXZDLEdBQXlERyxPQUFPTSxJQUFQLENBQVlULENBQVosQ0FBOUQ7QUFBQSxLQUFaO0FBQ0EsWUFWT1AsV0FVUCxpQkFBY1MsUUFBUVEsTUFBdEI7QUFDQWxCLFFBQUlNLFFBQUosR0FBZUksUUFDVlMsTUFEVSxDQUNIUixNQURHLEVBRVZKLEdBRlUsQ0FFTjtBQUFBLGVBQUtDLEVBQUVDLElBQVA7QUFBQSxLQUZNLENBQWY7QUFHSCxDQVpEOztJQWNNVyxNOzs7Ozs7OzZCQUNHQyxLLEVBQU87QUFDUkEsa0JBQU1DLEtBQU4sQ0FBWUMsT0FBWixHQUFzQixrQkFBRUMsUUFBRixDQUFXLE9BQVgsRUFBb0J0QixNQUFwQixDQUF0QjtBQUNBLG1CQUFPLHVCQUFFLHFFQUFGLEVBQXlFbUIsTUFBTUMsS0FBL0UsQ0FBUDtBQUNIOzs7Ozs7a0JBR1VGLE0iLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4vYXBwJztcbmltcG9ydCB7c2VsVmFyQ29sb3J9IGZyb20gJy4uL3Bsb3RzJztcblxuZXhwb3J0IGxldCBzZWFyY2hJbmRleDtcblxubGV0IHNlYXJjaCA9IHZhbCA9PiB7XG4gICAgbGV0IGFsbCA9IGFwcC5hbGxOb2RlcztcbiAgICBpZiAodmFsID09PSAnJykge1xuICAgICAgICBzZWFyY2hJbmRleCA9IG51bGw7XG4gICAgICAgIHJldHVybiBhcHAudmFsdWVLZXkgPSBhbGwubWFwKG4gPT4gbi5uYW1lKTtcbiAgICB9XG4gICAgbGV0IFttYXRjaGVzLCBvdGhlcnMsIG1hdGNoXSA9IFtbXSwgW10sIChuLCBrZXkpID0+IG5ba2V5XS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHZhbC50b0xvd2VyQ2FzZSgpKV07XG4gICAgYWxsLmZvckVhY2gobiA9PiBtYXRjaChuLCAnbmFtZScpIHx8IG1hdGNoKG4sICdsYWJsJykgPyBtYXRjaGVzLnB1c2gobikgOiBvdGhlcnMucHVzaChuKSk7XG4gICAgc2VhcmNoSW5kZXggPSBtYXRjaGVzLmxlbmd0aDtcbiAgICBhcHAudmFsdWVLZXkgPSBtYXRjaGVzXG4gICAgICAgIC5jb25jYXQob3RoZXJzKVxuICAgICAgICAubWFwKG4gPT4gbi5uYW1lKTtcbn07XG5cbmNsYXNzIFNlYXJjaCB7XG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICB2bm9kZS5hdHRycy5vbmlucHV0ID0gbS53aXRoQXR0cigndmFsdWUnLCBzZWFyY2gpO1xuICAgICAgICByZXR1cm4gbSgnaW5wdXQjc2VhcmNodmFyLmZvcm0tY29udHJvbFtzdHlsZT1tYXJnaW4tYm90dG9tOiA1cHg7IHdpZHRoOiAxMDAlXScsIHZub2RlLmF0dHJzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvU2VhcmNoLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Subpanel = function () {\n    function Subpanel() {\n        _classCallCheck(this, Subpanel);\n    }\n\n    _createClass(Subpanel, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            this.hide = false;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var title = vnode.attrs.title;\n            var legend = title === 'Legend';\n            var target = 'collapse' + title;\n            var z = app.zparams;\n            return (0, _mithril2.default)('#' + (legend ? \"legend.legendary\" : \"logdiv.logbox\") + '.panel.panel-default', {\n                style: { display: legend && z.ztime.length + z.zcross.length + z.zdv.length + z.znom.length || !legend && app.logArray.length > 0 ? 'block' : 'none' } }, (0, _mithril2.default)(\".panel-heading\", (0, _mithril2.default)(\"h3.panel-title\", title, (0, _mithril2.default)('span.glyphicon.glyphicon-large.glyphicon-chevron-' + (this.hide ? 'up' : 'down') + '.pull-right[data-target=#' + target + '][data-toggle=collapse][href=#' + target + ']', {\n                style: 'cursor: pointer',\n                onclick: function onclick(_) {\n                    return _this.hide = !_this.hide;\n                } }))), (0, _mithril2.default)('#' + target + '.panel-collapse.collapse.in', (0, _mithril2.default)(\".panel-body\", !legend ? app.logArray.map(function (x) {\n                return (0, _mithril2.default)('p', x);\n            }) : vnode.attrs.buttons.map(function (x) {\n                return (0, _mithril2.default)('#' + x[0] + '.clearfix.' + (z[x[1]].length === 0 ? \"hide\" : \"show\"), (0, _mithril2.default)(\".rectColor\", (0, _mithril2.default)(\"svg[style=width: 20px; height: 20px]\", (0, _mithril2.default)(\"circle[cx=10][cy=10][fill=white][r=9][stroke=black][stroke-width=2]\"))), (0, _mithril2.default)(\".rectLabel\", x[2]));\n            }))));\n        }\n    }]);\n\n    return Subpanel;\n}();\n\nexports.default = Subpanel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1N1YnBhbmVsLmpzP2ViYWIiXSwibmFtZXMiOlsiYXBwIiwiU3VicGFuZWwiLCJ2bm9kZSIsImhpZGUiLCJ0aXRsZSIsImF0dHJzIiwibGVnZW5kIiwidGFyZ2V0IiwieiIsInpwYXJhbXMiLCJzdHlsZSIsImRpc3BsYXkiLCJ6dGltZSIsImxlbmd0aCIsInpjcm9zcyIsInpkdiIsInpub20iLCJsb2dBcnJheSIsIm9uY2xpY2siLCJtYXAiLCJ4IiwiYnV0dG9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUVBOztJQUFZQSxHOzs7Ozs7OztJQUVOQyxROzs7Ozs7OytCQUNLQyxLLEVBQU87QUFDVixpQkFBS0MsSUFBTCxHQUFZLEtBQVo7QUFDSDs7OzZCQUVJRCxLLEVBQU87QUFBQTs7QUFDUixnQkFBSUUsUUFBUUYsTUFBTUcsS0FBTixDQUFZRCxLQUF4QjtBQUNBLGdCQUFJRSxTQUFTRixVQUFVLFFBQXZCO0FBQ0EsZ0JBQUlHLFNBQVMsYUFBYUgsS0FBMUI7QUFDQSxnQkFBSUksSUFBSVIsSUFBSVMsT0FBWjtBQUNBLG1CQUFPLDhCQUFNSCxTQUFTLGtCQUFULEdBQThCLGVBQXBDLDRCQUEyRTtBQUM5RUksdUJBQU8sRUFBQ0MsU0FBU0wsVUFBVUUsRUFBRUksS0FBRixDQUFRQyxNQUFSLEdBQWlCTCxFQUFFTSxNQUFGLENBQVNELE1BQTFCLEdBQW1DTCxFQUFFTyxHQUFGLENBQU1GLE1BQXpDLEdBQWtETCxFQUFFUSxJQUFGLENBQU9ILE1BQW5FLElBQTZFLENBQUNQLE1BQUQsSUFBV04sSUFBSWlCLFFBQUosQ0FBYUosTUFBYixHQUFzQixDQUE5RyxHQUFrSCxPQUFsSCxHQUE0SCxNQUF0SSxFQUR1RSxFQUEzRSxFQUVFLHVCQUFFLGdCQUFGLEVBQ0UsdUJBQUUsZ0JBQUYsRUFDRVQsS0FERixFQUVFLDhFQUFzRCxLQUFLRCxJQUFMLEdBQVksSUFBWixHQUFrQixNQUF4RSxrQ0FBMEdJLE1BQTFHLHNDQUFpSkEsTUFBakosUUFBNEo7QUFDeEpHLHVCQUFPLGlCQURpSjtBQUV4SlEseUJBQVM7QUFBQSwyQkFBSyxNQUFLZixJQUFMLEdBQVksQ0FBQyxNQUFLQSxJQUF2QjtBQUFBLGlCQUYrSSxFQUE1SixDQUZGLENBREYsQ0FGRixFQVFFLDZCQUFNSSxNQUFOLGtDQUNFLHVCQUFFLGFBQUYsRUFBaUIsQ0FBQ0QsTUFBRCxHQUFVTixJQUFJaUIsUUFBSixDQUFhRSxHQUFiLENBQWlCO0FBQUEsdUJBQUssdUJBQUUsR0FBRixFQUFPQyxDQUFQLENBQUw7QUFBQSxhQUFqQixDQUFWLEdBQTZDbEIsTUFBTUcsS0FBTixDQUFZZ0IsT0FBWixDQUFvQkYsR0FBcEIsQ0FBd0IsYUFBSztBQUN2Rix1QkFBTyw2QkFBTUMsRUFBRSxDQUFGLENBQU4sbUJBQXVCWixFQUFFWSxFQUFFLENBQUYsQ0FBRixFQUFRUCxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLE1BQXZCLEdBQWdDLE1BQXZELEdBQ0UsdUJBQUUsWUFBRixFQUNFLHVCQUFFLHNDQUFGLEVBQ0UsdUJBQUUscUVBQUYsQ0FERixDQURGLENBREYsRUFJRSx1QkFBRSxZQUFGLEVBQWdCTyxFQUFFLENBQUYsQ0FBaEIsQ0FKRixDQUFQO0FBSWlDLGFBTHlCLENBQTlELENBREYsQ0FSRixDQUFQO0FBZUg7Ozs7OztrQkFHVW5CLFEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4vYXBwJztcblxuY2xhc3MgU3VicGFuZWwge1xuICAgIG9uaW5pdCh2bm9kZSkge1xuICAgICAgICB0aGlzLmhpZGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB0aXRsZSA9IHZub2RlLmF0dHJzLnRpdGxlO1xuICAgICAgICBsZXQgbGVnZW5kID0gdGl0bGUgPT09ICdMZWdlbmQnO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gJ2NvbGxhcHNlJyArIHRpdGxlO1xuICAgICAgICBsZXQgeiA9IGFwcC56cGFyYW1zO1xuICAgICAgICByZXR1cm4gbShgIyR7bGVnZW5kID8gXCJsZWdlbmQubGVnZW5kYXJ5XCIgOiBcImxvZ2Rpdi5sb2dib3hcIn0ucGFuZWwucGFuZWwtZGVmYXVsdGAsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7ZGlzcGxheTogbGVnZW5kICYmIHouenRpbWUubGVuZ3RoICsgei56Y3Jvc3MubGVuZ3RoICsgei56ZHYubGVuZ3RoICsgei56bm9tLmxlbmd0aCB8fCAhbGVnZW5kICYmIGFwcC5sb2dBcnJheS5sZW5ndGggPiAwID8gJ2Jsb2NrJyA6ICdub25lJ319LFxuICAgICAgICAgICAgICAgICBtKFwiLnBhbmVsLWhlYWRpbmdcIixcbiAgICAgICAgICAgICAgICAgICBtKFwiaDMucGFuZWwtdGl0bGVcIixcbiAgICAgICAgICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgbShgc3Bhbi5nbHlwaGljb24uZ2x5cGhpY29uLWxhcmdlLmdseXBoaWNvbi1jaGV2cm9uLSR7dGhpcy5oaWRlID8gJ3VwJzogJ2Rvd24nfS5wdWxsLXJpZ2h0W2RhdGEtdGFyZ2V0PSMke3RhcmdldH1dW2RhdGEtdG9nZ2xlPWNvbGxhcHNlXVtocmVmPSMke3RhcmdldH1dYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnY3Vyc29yOiBwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBfID0+IHRoaXMuaGlkZSA9ICF0aGlzLmhpZGV9KSkpLFxuICAgICAgICAgICAgICAgICBtKGAjJHt0YXJnZXR9LnBhbmVsLWNvbGxhcHNlLmNvbGxhcHNlLmluYCxcbiAgICAgICAgICAgICAgICAgICBtKFwiLnBhbmVsLWJvZHlcIiwgIWxlZ2VuZCA/IGFwcC5sb2dBcnJheS5tYXAoeCA9PiBtKCdwJywgeCkpIDogdm5vZGUuYXR0cnMuYnV0dG9ucy5tYXAoeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGAjJHt4WzBdfS5jbGVhcmZpeC4ke3pbeFsxXV0ubGVuZ3RoID09PSAwID8gXCJoaWRlXCIgOiBcInNob3dcIn1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLnJlY3RDb2xvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJzdmdbc3R5bGU9d2lkdGg6IDIwcHg7IGhlaWdodDogMjBweF1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJjaXJjbGVbY3g9MTBdW2N5PTEwXVtmaWxsPXdoaXRlXVtyPTldW3N0cm9rZT1ibGFja11bc3Ryb2tlLXdpZHRoPTJdXCIpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIucmVjdExhYmVsXCIsIHhbMl0pKTt9KSkpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1YnBhbmVsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2FwcC92aWV3cy9TdWJwYW5lbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY3NzL2FwcC5jc3M/MmY3ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Fzc2V0cy9jc3MvYXBwLmNzc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvcGtncy9MYWRkYS9kaXN0L2xhZGRhLXRoZW1lbGVzcy5taW4uY3NzP2E2ZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvcGtncy9MYWRkYS9kaXN0L2xhZGRhLXRoZW1lbGVzcy5taW4uY3NzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvcGtncy9ib290c3RyYXAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzP2ZiNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXNzZXRzL3BrZ3MvYm9vdHN0cmFwL2Nzcy9ib290c3RyYXAtdGhlbWUubWluLmNzc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(10);\n\n__webpack_require__(8);\n\n__webpack_require__(9);\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(2);\n\nvar plots = _interopRequireWildcard(_plots);\n\nvar _Panel = __webpack_require__(4);\n\nvar _Panel2 = _interopRequireDefault(_Panel);\n\nvar _PanelButton = __webpack_require__(5);\n\nvar _PanelButton2 = _interopRequireDefault(_PanelButton);\n\nvar _Search = __webpack_require__(6);\n\nvar _Search2 = _interopRequireDefault(_Search);\n\nvar _Subpanel = __webpack_require__(7);\n\nvar _Subpanel2 = _interopRequireDefault(_Subpanel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar leftpanel = function leftpanel() {\n  return (0, _mithril2.default)(_Panel2.default, {\n    side: 'left',\n    title: 'Data Selection' }, (0, _mithril2.default)(\".btn-toolbar[role=toolbar][style=margin-left: .5em; margin-top: .5em]\", (0, _mithril2.default)(\".btn-group\", (0, _mithril2.default)(_PanelButton2.default, {\n    id: 'btnVariables',\n    id2: 'tab1',\n    title: 'Click variable name to add or remove the variable pebble from the modeling space.' }, 'Variables'), (0, _mithril2.default)(_PanelButton2.default, { id: 'btnSubset', id2: 'tab2' }, 'Subset')), (0, _mithril2.default)(_PanelButton2.default, {\n    id: 'btnSelect',\n    classes: 'btn-default.ladda-button[data-spinner-color=#000000][data-style=zoom-in]',\n    onclick: function onclick(_) {\n      return app.subsetSelect('btnSelect');\n    },\n    style: 'display: ' + (app.subset ? 'block' : 'none') + '; float: right; margin-right: 10px',\n    title: 'Subset data by the intersection of all selected values.' }, (0, _mithril2.default)('span.ladda-label[style=pointer-events: none]', 'Select'))), (0, _mithril2.default)('#tab1[style=display: ' + (0, _PanelButton.or)('left', 'tab1') + '; padding: 10px 8px; text-align: center]', (0, _mithril2.default)(_Search2.default, { placeholder: 'Search variables and labels' }), (0, _mithril2.default)('#varList[style=display: block]', app.valueKey.map(function (v, i) {\n    return (0, _mithril2.default)('p#' + v.replace(/\\W/g, '_'), {\n      style: {\n        'background-color': app.zparams.zdv.includes(v) ? app.hexToRgba(app.dvColor) : app.zparams.znom.includes(v) ? app.hexToRgba(app.nomColor) : app.nodes.map(function (n) {\n          return n.name;\n        }).includes(v) ? app.hexToRgba(plots.selVarColor) : app.varColor,\n        'border-color': '#000000',\n        'border-style': _Search.searchIndex && i < _Search.searchIndex ? 'solid' : 'none'\n      },\n      onclick: app.clickVar,\n      onmouseover: function onmouseover() {\n        $(this).popover('show');\n        $(\"body div.popover\").addClass(\"variables\");\n        $(\"body div.popover div.popover-content\").addClass(\"form-horizontal\");\n      },\n      onmouseout: \"$(this).popover('hide');\",\n      'data-container': 'body',\n      'data-content': app.popoverContent(app.findNodeIndex(v, true)),\n      'data-html': 'true',\n      'data-original-title': 'Summary Statistics',\n      'data-placement': 'right',\n      'data-toggle': 'popover',\n      'data-trigger': 'hover' }, v);\n  }))), (0, _mithril2.default)('#tab2[style=display: ' + (0, _PanelButton.or)('left', 'tab2') + '; margin-top: .5em]'), (0, _mithril2.default)('#tab3[style=height: 350px]', (0, _mithril2.default)('p[style=padding: .5em 1em; display: ' + (0, _PanelButton.or)('left', 'tab3') + ']', {\n    title: \"Select a variable from within the visualization in the center panel to view its summary statistics.\" }, (0, _mithril2.default)('center', (0, _mithril2.default)('b', app.summary.name), (0, _mithril2.default)('br'), (0, _mithril2.default)('i', app.summary.labl)), (0, _mithril2.default)('table', app.summary.data.map(function (tr) {\n    return (0, _mithril2.default)('tr', tr.map(function (td) {\n      return (0, _mithril2.default)('td', {\n        onmouseover: function onmouseover() {\n          this.style['background-color'] = 'aliceblue';\n        },\n        onmouseout: function onmouseout() {\n          this.style['background-color'] = '#f9f9f9';\n        } }, td);\n    }));\n  })))));\n};\n\nvar rightpanel = function rightpanel(mode) {\n  return mode ? (0, _mithril2.default)(_Panel2.default, {\n    side: 'right',\n    title: 'Result Exploration' }, (0, _mithril2.default)(\".btn-group.btn-group-justified[style=margin-top: .5em]\", (0, _mithril2.default)(_PanelButton2.default, { id: 'btnUnivariate' }, 'Univariate'), (0, _mithril2.default)(_PanelButton2.default, { id: 'btnBivariate' }, 'Bivariate')), (0, _mithril2.default)('#univariate[style=display: ' + (0, _PanelButton.or)('right', 'btnUnivariate') + ']'), (0, _mithril2.default)('#bivariate[style=display: ' + (0, _PanelButton.or)('right', 'btnBivariate') + ']')) : (0, _mithril2.default)(_Panel2.default, {\n    side: 'right',\n    title: 'Model Selection' }, (0, _mithril2.default)(\".accordian[style=margin-top: .5em]\", (0, _mithril2.default)(\"ul#rightpanelbuttons\", [(0, _mithril2.default)(\"li\", [(0, _mithril2.default)(_PanelButton2.default, { id: 'btnModels', style: 'width: 100%' }, 'Models')]), (0, _mithril2.default)(\"li\", [(0, _mithril2.default)(_PanelButton2.default, { id: 'btnSetx', style: 'width: 100%' }, 'Set Covar.')]), (0, _mithril2.default)(\"li\", [(0, _mithril2.default)(_PanelButton2.default, { id: 'btnResults', style: 'width: 100%' }, 'Results')]), (0, _mithril2.default)(\"li\", [(0, _mithril2.default)(_PanelButton2.default, { id: 'btnType', style: 'width: 100%' }, 'Task Type')]), (0, _mithril2.default)(\"li\", [(0, _mithril2.default)(_PanelButton2.default, { id: 'btnSubtype', style: 'width: 100%' }, 'Subtype')]), (0, _mithril2.default)(\"li\", [(0, _mithril2.default)(_PanelButton2.default, { id: 'btnMetrics', style: 'width: 100%' }, 'Metrics')]), (0, _mithril2.default)(\"li\", [(0, _mithril2.default)(_PanelButton2.default, { id: 'btnOutputs', style: 'width: 100%' }, 'Output')])])),\n  /*     m(\".btn-group.btn-group-justified#modelGroup[style=margin-top: .5em]\",\n         m(Button, {id: 'btnModels', style: 'width: 33%'}, 'Models'),\n         m(Button, {id: 'btnSetx', style: 'width: 34%'}, 'Set Covar.'),\n         m(Button, {id: 'btnResults', style: 'width: 33%'}, 'Results'),\n         m(Button, {id: 'btnType', style: 'width: 25%; display: none'}, 'Task Type'),\n         m(Button, {id: 'btnSubtype', style: 'width: 25%; display: none'}, 'Subtype'),\n         m(Button, {id: 'btnMetrics', style: 'width: 25%; display: none'}, 'Metrics'),\n         m(Button, {id: 'btnOutputs', style: 'width: 25%; display: none'}, 'Outputs')),   */\n  (0, _mithril2.default)('#results[style=display: ' + (0, _PanelButton.or)('right', 'btnResults') + '; margin-top: .5em]', (0, _mithril2.default)(\"#resultsView.container[style=float: right; overflow: auto; width: 80%; background-color: white; white-space: nowrap]\"), (0, _mithril2.default)('#modelView[style=display: none; float: left; width: 20%; background-color: white]'), (0, _mithril2.default)(\"p#resultsHolder[style=padding: .5em 1em]\")), (0, _mithril2.default)('#setx[style=display: ' + (0, _PanelButton.or)('right', 'btnSetx') + ']', (0, _mithril2.default)('#setxLeftAll[style=display:block; float: left; width: 30%; height:100%; background-color: white]', (0, _mithril2.default)('#setxLeft[style=display:block; float: left; width: 100%; height:75%; overflow:auto; background-color: white]'), (0, _mithril2.default)('#setxLeftBottom[style=display:block; float: left; width: 100%; height:25%; clear:left; background-color: white]')), (0, _mithril2.default)('#setxRightAll[style=display:block; float: left; width: 70%; height:100%; background-color: white]', (0, _mithril2.default)('#setxRightTop[style=display:block; float: left; width: 100%; height:75%; overflow:auto; background-color: white]', (0, _mithril2.default)('#setxMiddle[style=display:block; float: left; width: 70%; background-color: white]'), (0, _mithril2.default)('#setxRight[style=display:block; float: right; width: 30%; background-color: white]')), (0, _mithril2.default)('#setxRightBottom[style=display:block; float: left; width: 100%; height:25%; overflow:auto; background-color: white]', (0, _mithril2.default)(_PanelButton2.default, {\n    id: 'btnExecutePipe',\n    classes: 'btn-default.ladda-button[data-spinner-color=#000000][data-style=zoom-in]',\n    onclick: function onclick(_) {\n      return app.executepipeline('btnExecutePipe');\n    },\n    style: 'display:inline; float: left; margin-right: 10px',\n    title: 'Execute pipeline.' }, (0, _mithril2.default)('span.ladda-label[style=pointer-events: none]', 'Execute'))))), (0, _mithril2.default)('#models[style=display: ' + (0, _PanelButton.or)('right', 'btnModels') + '; padding: 6px 12px; text-align: center]'), (0, _mithril2.default)('#types[style=display: ' + (0, _PanelButton.or)('right', 'btnType') + '; padding: 6px 12px; text-align: center]'), (0, _mithril2.default)('#subtypes[style=display: ' + (0, _PanelButton.or)('right', 'btnSubtype') + '; padding: 6px 12px; text-align: center]'), (0, _mithril2.default)('#metrics[style=display: ' + (0, _PanelButton.or)('right', 'btnMetrics') + '; padding: 6px 12px; text-align: center]'), (0, _mithril2.default)('#outputs[style=display: ' + (0, _PanelButton.or)('right', 'btnOutputs') + '; padding: 6px 12px; text-align: center]'));\n};\n\nvar ticker = function ticker(mode) {\n  var link = function link(name) {\n    return (0, _mithril2.default)('a' + (name === mode ? '.active' : '') + '[href=/' + name + '][style=margin-right: 0.5em]', { oncreate: _mithril2.default.route.link }, name[0].toUpperCase() + name.slice(1));\n  };\n  return (0, _mithril2.default)('#ticker[style=background: #F9F9F9; bottom: 0; height: 40px; position: fixed; width: 100%; border-top: 1px solid #ADADAD]', link('model'), link('explore'), (0, _mithril2.default)(\"a#logID[href=somelink][target=_blank][style=margin-right: 0.5em]\", \"Replication\"));\n};\n\nvar Body = function () {\n  function Body() {\n    _classCallCheck(this, Body);\n  }\n\n  _createClass(Body, [{\n    key: 'oninit',\n    value: function oninit() {\n      this.about = false;\n      this.cite = false;\n      this.citeHidden = false;\n    }\n  }, {\n    key: 'oncreate',\n    value: function oncreate() {\n      var extract = function extract(name, key, offset, replace) {\n        key = key + '=';\n        var loc = window.location.toString();\n        var val = loc.indexOf(key) > 0 ? loc.substring(loc.indexOf(key) + offset) : '';\n        var idx = val.indexOf('&');\n        val = idx > 0 ? val.substring(0, idx) : val;\n        val = val.replace('#!/model', '');\n        console.log(name, ': ', val);\n        if (replace) val = val.replace(/%25/g, '%').replace(/%3A/g, ':').replace(/%2F/g, '/');\n        return val;\n      };\n      // let apikey = extract('apikey', 'key', 4);\n      app.main(extract('fileid', 'dfId', 5), extract('hostname', 'host', 5), extract('ddiurl', 'ddiurl', 7, true), extract('dataurl', 'dataurl', 8, true), extract('apikey', 'key', 4));\n    }\n  }, {\n    key: 'view',\n    value: function view(vnode) {\n      var _this = this;\n\n      var mode = vnode.attrs.mode;\n\n      return (0, _mithril2.default)('main', (0, _mithril2.default)(\"nav#navbar.navbar.navbar-default.navbar-fixed-top[role=navigation]\", (0, _mithril2.default)(\"a.navbar-brand[style=margin-left: 0]\", (0, _mithril2.default)(\"img[src=/static/images/TwoRavens.png][alt=TwoRavens][width=100][style=margin-left: 2em; margin-top: -0.5em]\", {\n        onmouseover: function onmouseover(_) {\n          return _this.about = true;\n        },\n        onmouseout: function onmouseout(_) {\n          return _this.about = false;\n        } })), (0, _mithril2.default)('#navbarNav[style=padding: 0.5em]', (0, _mithril2.default)('#dataField.field[style=margin-top: 0.5em; text-align: center]', (0, _mithril2.default)('h4#dataName[style=display: inline]', {\n        onclick: function onclick(_) {\n          return _this.cite = _this.citeHidden = !_this.citeHidden;\n        },\n        onmouseout: function onmouseout(_) {\n          return _this.citeHidden || (_this.cite = false);\n        },\n        onmouseover: function onmouseover(_) {\n          return _this.cite = true;\n        } }, \"Dataset Name\"), (0, _mithril2.default)('#cite.panel.panel-default[style=display: ' + (this.cite ? 'block' : 'none') + '; position: absolute; right: 50%; width: 380px; text-align: left; z-index: 50]', (0, _mithril2.default)(\".panel-body\")), (0, _mithril2.default)(\"button#btnEstimate.btn.btn-default.ladda-button.navbar-right[data-spinner-color=#000000][data-style=zoom-in][style=margin-left: 2em; margin-right: 1em]\", {\n        onclick: function onclick(_) {\n          return app.estimate('btnEstimate');\n        } }, (0, _mithril2.default)(\"span.ladda-label\", mode ? 'Explore' : 'Estimate')), (0, _mithril2.default)(\"button#btnTA2.btn.btn-default.ladda-button.navbar-right[data-spinner-color=#000000][data-style=zoom-in][style=margin-left: 15em; margin-right: 1em]\", {\n        onclick: function onclick(_) {\n          return app.ta2stuff('btnTA2');\n        } }, 'TA2'), (0, _mithril2.default)(\"button#btnReset.btn.btn-default.navbar-right[title=Reset][style=margin-left: 2.0em]\", {\n        onclick: app.reset }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-repeat[style=color: #818181; font-size: 1em; pointer-events: none]\")), (0, _mithril2.default)(\"button#btnEndSession.btn.btn-default.navbar-right[title=End Session][style=margin-left: 2.0em]\", {\n        onclick: function onclick(_) {\n          return app.endsession();\n        } }, (0, _mithril2.default)(\"span.ladda-label\", 'End Session')), (0, _mithril2.default)('#transformations.transformTool', {\n        title: 'Construct transformations of existing variables using valid R syntax. For example, assuming a variable named d, you can enter \"log(d)\" or \"d^2\".' }))), (0, _mithril2.default)('#about.panel.panel-default[style=display: ' + (this.about ? 'block' : 'none') + '; left: 140px; position: absolute; width: 500px; z-index: 50]', (0, _mithril2.default)('.panel-body', 'TwoRavens v0.1 \"Dallas\" -- The Norse god Odin had two talking ravens as advisors, who would fly out into the world and report back all they observed. In the Norse, their names were \"Thought\" and \"Memory\". In our coming release, our thought-raven automatically advises on statistical model selection, while our memory-raven accumulates previous statistical models from Dataverse, to provide cummulative guidance and meta-analysis.'))), (0, _mithril2.default)('#main.left.carousel.slide.svg-leftpanel.svg-rightpanel[style=overflow: auto]', (0, _mithril2.default)(\"#innercarousel.carousel-inner\", (0, _mithril2.default)('#m0.item.active', (0, _mithril2.default)('svg#whitespace'))), (0, _mithril2.default)(\"#spacetools.spaceTool[style=z-index: 16]\", (0, _mithril2.default)(\"button#btnLock.btn.active[title=Lock selections of problem description.]\", {\n        onclick: app.lockDescription }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-pencil\")), (0, _mithril2.default)(\"button#btnForce.btn.btn-default[title=Pin the variable pebbles to the page.]\", {\n        onclick: app.forceSwitch }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-pushpin\")), (0, _mithril2.default)(\"button#btnEraser.btn.btn-default[title=Wipe all variables from the modeling space.]\", {\n        onclick: app.erase }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-magnet\"))), (0, _mithril2.default)(_Subpanel2.default, {\n        title: \"Legend\",\n        buttons: [['timeButton', 'ztime', 'Time'], ['csButton', 'zcross', 'Cross Sec'], ['dvButton', 'zdv', 'Dep Var'], ['nomButton', 'znom', 'Nom Var'], ['gr1Button', 'zgroup1', 'Group 1'], ['gr2Button', 'zgroup2', 'Group 2']] }), (0, _mithril2.default)(_Subpanel2.default, { title: \"History\" }), ticker(mode), leftpanel(), rightpanel(mode)));\n    }\n  }]);\n\n  return Body;\n}();\n\n_mithril2.default.route(document.body, '/model', {\n  '/model': { render: function render() {\n      return (0, _mithril2.default)(Body);\n    } },\n  '/explore': { render: function render() {\n      return (0, _mithril2.default)(Body, { mode: 'explore' });\n    } }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL2luZGV4LmpzPzMzYmUiXSwibmFtZXMiOlsiYXBwIiwicGxvdHMiLCJsZWZ0cGFuZWwiLCJzaWRlIiwidGl0bGUiLCJpZCIsImlkMiIsImNsYXNzZXMiLCJvbmNsaWNrIiwic3Vic2V0U2VsZWN0Iiwic3R5bGUiLCJzdWJzZXQiLCJwbGFjZWhvbGRlciIsInZhbHVlS2V5IiwibWFwIiwidiIsImkiLCJyZXBsYWNlIiwienBhcmFtcyIsInpkdiIsImluY2x1ZGVzIiwiaGV4VG9SZ2JhIiwiZHZDb2xvciIsInpub20iLCJub21Db2xvciIsIm5vZGVzIiwibiIsIm5hbWUiLCJzZWxWYXJDb2xvciIsInZhckNvbG9yIiwiY2xpY2tWYXIiLCJvbm1vdXNlb3ZlciIsIiQiLCJwb3BvdmVyIiwiYWRkQ2xhc3MiLCJvbm1vdXNlb3V0IiwicG9wb3ZlckNvbnRlbnQiLCJmaW5kTm9kZUluZGV4Iiwic3VtbWFyeSIsImxhYmwiLCJkYXRhIiwidHIiLCJ0ZCIsInJpZ2h0cGFuZWwiLCJtb2RlIiwiZXhlY3V0ZXBpcGVsaW5lIiwidGlja2VyIiwibGluayIsIm9uY3JlYXRlIiwicm91dGUiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiQm9keSIsImFib3V0IiwiY2l0ZSIsImNpdGVIaWRkZW4iLCJleHRyYWN0Iiwia2V5Iiwib2Zmc2V0IiwibG9jIiwid2luZG93IiwibG9jYXRpb24iLCJ0b1N0cmluZyIsInZhbCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJpZHgiLCJjb25zb2xlIiwibG9nIiwibWFpbiIsInZub2RlIiwiYXR0cnMiLCJlc3RpbWF0ZSIsInRhMnN0dWZmIiwicmVzZXQiLCJlbmRzZXNzaW9uIiwibG9ja0Rlc2NyaXB0aW9uIiwiZm9yY2VTd2l0Y2giLCJlcmFzZSIsImJ1dHRvbnMiLCJkb2N1bWVudCIsImJvZHkiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUVB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QU9FLHVCQUFFLHFGQUFGLEVBQXlGO0FBQ3ZGckUsaUJBQVNSLElBQUk4RSxLQUQwRSxFQUF6RixFQUVFLHVCQUFFLGlDQUFGLENBRkYsQ0FQRixDQUpGLEVBY0UsMkNBQVk7QUFDVjFFLGVBQU8sUUFERztBQUVWMkUsaUJBQVMsQ0FDUCxDQUFDLFlBQUQsRUFBZSxPQUFmLEVBQXdCLE1BQXhCLENBRE8sRUFFUCxDQUFDLFVBQUQsRUFBYSxRQUFiLEVBQXVCLFdBQXZCLENBRk8sRUFHUCxDQUFDLFVBQUQsRUFBYSxLQUFiLEVBQW9CLFNBQXBCLENBSE8sRUFJUCxDQUFDLFdBQUQsRUFBYyxNQUFkLEVBQXNCLFNBQXRCLENBSk8sRUFLUCxDQUFDLFdBQUQsRUFBYyxTQUFkLEVBQXlCLFNBQXpCLENBTE8sRUFNUCxDQUFDLFdBQUQsRUFBYyxTQUFkLEVBQXlCLFNBQXpCLENBTk8sQ0FGQyxFQUFaLENBZEYsRUF1QkUsMkNBQVksRUFBQzNFLE9BQU8sU0FBUixFQUFaLENBdkJGLEVBd0JFMEMsT0FBT0YsSUFBUCxDQXhCRixFQXlCRTFDLFdBekJGLEVBMEJFeUMsV0FBV0MsSUFBWCxDQTFCRixDQWhDRyxDQUFQO0FBMkRIOzs7Ozs7QUFHTCxrQkFBRUssS0FBRixDQUFRK0IsU0FBU0MsSUFBakIsRUFBdUIsUUFBdkIsRUFBaUM7QUFDN0IsWUFBVSxFQUFDQyxRQUFRO0FBQUEsYUFBTSx1QkFBRTlCLElBQUYsQ0FBTjtBQUFBLEtBQVQsRUFEbUI7QUFFN0IsY0FBWSxFQUFDOEIsUUFBUTtBQUFBLGFBQU0sdUJBQUU5QixJQUFGLEVBQVEsRUFBQ1IsTUFBTSxTQUFQLEVBQVIsQ0FBTjtBQUFBLEtBQVQ7QUFGaUIsQ0FBakMiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL3BrZ3MvYm9vdHN0cmFwL2Nzcy9ib290c3RyYXAtdGhlbWUubWluLmNzcyc7XG5pbXBvcnQgJy4uL2Nzcy9hcHAuY3NzJztcbmltcG9ydCAnLi4vcGtncy9MYWRkYS9kaXN0L2xhZGRhLXRoZW1lbGVzcy5taW4uY3NzJztcblxuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmltcG9ydCAqIGFzIGFwcCBmcm9tICcuL2FwcCc7XG5pbXBvcnQgKiBhcyBwbG90cyBmcm9tICcuL3Bsb3RzJztcbmltcG9ydCBQYW5lbCBmcm9tICcuL3ZpZXdzL1BhbmVsJztcbmltcG9ydCBCdXR0b24sIHtvcn0gZnJvbSAnLi92aWV3cy9QYW5lbEJ1dHRvbic7XG5pbXBvcnQgU2VhcmNoLCB7c2VhcmNoSW5kZXh9IGZyb20gJy4vdmlld3MvU2VhcmNoJztcbmltcG9ydCBTdWJwYW5lbCBmcm9tICcuL3ZpZXdzL1N1YnBhbmVsJztcblxubGV0IGxlZnRwYW5lbCA9ICgpID0+IHtcbiAgICByZXR1cm4gbShQYW5lbCwge1xuICAgICAgICBzaWRlOiAnbGVmdCcsXG4gICAgICAgIHRpdGxlOiAnRGF0YSBTZWxlY3Rpb24nfSwgICAgICAgIFxuICAgICAgICBtKFwiLmJ0bi10b29sYmFyW3JvbGU9dG9vbGJhcl1bc3R5bGU9bWFyZ2luLWxlZnQ6IC41ZW07IG1hcmdpbi10b3A6IC41ZW1dXCIsXG4gICAgICAgICAgbShcIi5idG4tZ3JvdXBcIixcbiAgICAgICAgICAgIG0oQnV0dG9uLCB7XG4gICAgICAgICAgICAgIGlkOiAnYnRuVmFyaWFibGVzJywgXG4gICAgICAgICAgICAgIGlkMjogJ3RhYjEnLFxuICAgICAgICAgICAgICB0aXRsZTogJ0NsaWNrIHZhcmlhYmxlIG5hbWUgdG8gYWRkIG9yIHJlbW92ZSB0aGUgdmFyaWFibGUgcGViYmxlIGZyb20gdGhlIG1vZGVsaW5nIHNwYWNlLid9LCBcbiAgICAgICAgICAgICAgJ1ZhcmlhYmxlcycpLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIG0oQnV0dG9uLCB7aWQ6ICdidG5TdWJzZXQnLCBpZDI6ICd0YWIyJ30sICdTdWJzZXQnKSksXG4gICAgICAgICAgbShCdXR0b24sIHtcbiAgICAgICAgICAgIGlkOiAnYnRuU2VsZWN0JyxcbiAgICAgICAgICAgIGNsYXNzZXM6ICdidG4tZGVmYXVsdC5sYWRkYS1idXR0b25bZGF0YS1zcGlubmVyLWNvbG9yPSMwMDAwMDBdW2RhdGEtc3R5bGU9em9vbS1pbl0nLFxuICAgICAgICAgICAgb25jbGljazogXyA9PiBhcHAuc3Vic2V0U2VsZWN0KCdidG5TZWxlY3QnKSxcbiAgICAgICAgICAgIHN0eWxlOiBgZGlzcGxheTogJHthcHAuc3Vic2V0ID8gJ2Jsb2NrJyA6ICdub25lJ307IGZsb2F0OiByaWdodDsgbWFyZ2luLXJpZ2h0OiAxMHB4YCxcbiAgICAgICAgICAgIHRpdGxlOiAnU3Vic2V0IGRhdGEgYnkgdGhlIGludGVyc2VjdGlvbiBvZiBhbGwgc2VsZWN0ZWQgdmFsdWVzLid9LFxuICAgICAgICAgICAgbSgnc3Bhbi5sYWRkYS1sYWJlbFtzdHlsZT1wb2ludGVyLWV2ZW50czogbm9uZV0nLCAnU2VsZWN0JykpKSwgICAgICAgICBcbiAgICAgICAgbShgI3RhYjFbc3R5bGU9ZGlzcGxheTogJHtvcignbGVmdCcsICd0YWIxJyl9OyBwYWRkaW5nOiAxMHB4IDhweDsgdGV4dC1hbGlnbjogY2VudGVyXWAsXG4gICAgICAgICAgbShTZWFyY2gsIHtwbGFjZWhvbGRlcjogJ1NlYXJjaCB2YXJpYWJsZXMgYW5kIGxhYmVscyd9KSxcbiAgICAgICAgICBtKCcjdmFyTGlzdFtzdHlsZT1kaXNwbGF5OiBibG9ja10nLCBhcHAudmFsdWVLZXkubWFwKCh2LCBpKSA9PlxuICAgICAgICAgICAgbShgcCMke3YucmVwbGFjZSgvXFxXL2csICdfJyl9YCwge1xuICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogYXBwLnpwYXJhbXMuemR2LmluY2x1ZGVzKHYpID8gYXBwLmhleFRvUmdiYShhcHAuZHZDb2xvcikgOlxuICAgICAgICAgICAgICAgICAgIGFwcC56cGFyYW1zLnpub20uaW5jbHVkZXModikgPyBhcHAuaGV4VG9SZ2JhKGFwcC5ub21Db2xvcikgOlxuICAgICAgICAgICAgICAgICAgIGFwcC5ub2Rlcy5tYXAobiA9PiBuLm5hbWUpLmluY2x1ZGVzKHYpID8gYXBwLmhleFRvUmdiYShwbG90cy5zZWxWYXJDb2xvcikgOlxuICAgICAgICAgICAgICAgICAgIGFwcC52YXJDb2xvcixcbiAgICAgICAgICAgICAgICAnYm9yZGVyLWNvbG9yJzogJyMwMDAwMDAnLFxuICAgICAgICAgICAgICAgICdib3JkZXItc3R5bGUnOiBzZWFyY2hJbmRleCAmJiBpIDwgc2VhcmNoSW5kZXggPyAnc29saWQnIDogJ25vbmUnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbmNsaWNrOiBhcHAuY2xpY2tWYXIsXG4gICAgICAgICAgICAgIG9ubW91c2VvdmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBvcG92ZXIoJ3Nob3cnKTtcbiAgICAgICAgICAgICAgICAkKFwiYm9keSBkaXYucG9wb3ZlclwiKVxuICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInZhcmlhYmxlc1wiKTtcbiAgICAgICAgICAgICAgICAkKFwiYm9keSBkaXYucG9wb3ZlciBkaXYucG9wb3Zlci1jb250ZW50XCIpXG4gICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiZm9ybS1ob3Jpem9udGFsXCIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbm1vdXNlb3V0OiBcIiQodGhpcykucG9wb3ZlcignaGlkZScpO1wiLFxuICAgICAgICAgICAgICAnZGF0YS1jb250YWluZXInOiAnYm9keScsXG4gICAgICAgICAgICAgICdkYXRhLWNvbnRlbnQnOiBhcHAucG9wb3ZlckNvbnRlbnQoYXBwLmZpbmROb2RlSW5kZXgodiwgdHJ1ZSkpLFxuICAgICAgICAgICAgICAnZGF0YS1odG1sJzogJ3RydWUnLFxuICAgICAgICAgICAgICAnZGF0YS1vcmlnaW5hbC10aXRsZSc6ICdTdW1tYXJ5IFN0YXRpc3RpY3MnLFxuICAgICAgICAgICAgICAnZGF0YS1wbGFjZW1lbnQnOiAncmlnaHQnLFxuICAgICAgICAgICAgICAnZGF0YS10b2dnbGUnOiAncG9wb3ZlcicsXG4gICAgICAgICAgICAgICdkYXRhLXRyaWdnZXInOiAnaG92ZXInfSxcbiAgICAgICAgICAgICAgdikpKSksXG4gICAgICAgIG0oYCN0YWIyW3N0eWxlPWRpc3BsYXk6ICR7b3IoJ2xlZnQnLCAndGFiMicpfTsgbWFyZ2luLXRvcDogLjVlbV1gKSxcbiAgICAgICAgbSgnI3RhYjNbc3R5bGU9aGVpZ2h0OiAzNTBweF0nLFxuICAgICAgICAgIG0oYHBbc3R5bGU9cGFkZGluZzogLjVlbSAxZW07IGRpc3BsYXk6ICR7b3IoJ2xlZnQnLCAndGFiMycpfV1gLCB7XG4gICAgICAgICAgICB0aXRsZTogXCJTZWxlY3QgYSB2YXJpYWJsZSBmcm9tIHdpdGhpbiB0aGUgdmlzdWFsaXphdGlvbiBpbiB0aGUgY2VudGVyIHBhbmVsIHRvIHZpZXcgaXRzIHN1bW1hcnkgc3RhdGlzdGljcy5cIn0sXG4gICAgICAgICAgICBtKCdjZW50ZXInLFxuICAgICAgICAgICAgICBtKCdiJywgYXBwLnN1bW1hcnkubmFtZSksXG4gICAgICAgICAgICAgIG0oJ2JyJyksXG4gICAgICAgICAgICAgIG0oJ2knLCBhcHAuc3VtbWFyeS5sYWJsKSksXG4gICAgICAgICAgICBtKCd0YWJsZScsIGFwcC5zdW1tYXJ5LmRhdGEubWFwKFxuICAgICAgICAgICAgICB0ciA9PiBtKCd0cicsIHRyLm1hcChcbiAgICAgICAgICAgICAgICB0ZCA9PiBtKCd0ZCcsIHtcbiAgICAgICAgICAgICAgICAgIG9ubW91c2VvdmVyOiBmdW5jdGlvbigpIHt0aGlzLnN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSAnYWxpY2VibHVlJ30sXG4gICAgICAgICAgICAgICAgICBvbm1vdXNlb3V0OiBmdW5jdGlvbigpIHt0aGlzLnN0eWxlWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSAnI2Y5ZjlmOSd9fSxcbiAgICAgICAgICAgICAgICAgIHRkKSkpKSkpKSk7XG59O1xuXG5sZXQgcmlnaHRwYW5lbCA9IG1vZGUgPT4gbW9kZSA/IG0oUGFuZWwsIHtcbiAgICBzaWRlOiAncmlnaHQnLCBcbiAgICB0aXRsZTogJ1Jlc3VsdCBFeHBsb3JhdGlvbid9LFxuICAgIG0oXCIuYnRuLWdyb3VwLmJ0bi1ncm91cC1qdXN0aWZpZWRbc3R5bGU9bWFyZ2luLXRvcDogLjVlbV1cIixcbiAgICAgIG0oQnV0dG9uLCB7aWQ6ICdidG5Vbml2YXJpYXRlJ30sICdVbml2YXJpYXRlJyksXG4gICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuQml2YXJpYXRlJ30sICdCaXZhcmlhdGUnKSksXG4gICAgbShgI3VuaXZhcmlhdGVbc3R5bGU9ZGlzcGxheTogJHtvcigncmlnaHQnLCAnYnRuVW5pdmFyaWF0ZScpfV1gKSxcbiAgICBtKGAjYml2YXJpYXRlW3N0eWxlPWRpc3BsYXk6ICR7b3IoJ3JpZ2h0JywgJ2J0bkJpdmFyaWF0ZScpfV1gKSkgOlxuICAgIG0oUGFuZWwsIHtcbiAgICAgIHNpZGU6ICdyaWdodCcsIFxuICAgICAgdGl0bGU6ICdNb2RlbCBTZWxlY3Rpb24nfSxcbiAgICAgIG0oXCIuYWNjb3JkaWFuW3N0eWxlPW1hcmdpbi10b3A6IC41ZW1dXCIsXG4gICAgICAgIG0oXCJ1bCNyaWdodHBhbmVsYnV0dG9uc1wiLFtcbiAgICAgICAgICAgbShcImxpXCIsW1xuICAgICAgICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuTW9kZWxzJywgc3R5bGU6ICd3aWR0aDogMTAwJSd9LCAnTW9kZWxzJyldKSxcbiAgICAgICAgICAgbShcImxpXCIsW1xuICAgICAgICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuU2V0eCcsIHN0eWxlOiAnd2lkdGg6IDEwMCUnfSwgJ1NldCBDb3Zhci4nKV0pLFxuICAgICAgICAgICBtKFwibGlcIixbXG4gICAgICAgICAgICAgIG0oQnV0dG9uLCB7aWQ6ICdidG5SZXN1bHRzJywgc3R5bGU6ICd3aWR0aDogMTAwJSd9LCAnUmVzdWx0cycpXSksXG4gICAgICAgICAgIG0oXCJsaVwiLFtcbiAgICAgICAgICAgICAgbShCdXR0b24sIHtpZDogJ2J0blR5cGUnLCBzdHlsZTogJ3dpZHRoOiAxMDAlJ30sICdUYXNrIFR5cGUnKSxdKSxcbiAgICAgICAgICAgbShcImxpXCIsW1xuICAgICAgICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuU3VidHlwZScsIHN0eWxlOiAnd2lkdGg6IDEwMCUnfSwgJ1N1YnR5cGUnKSxdKSxcbiAgICAgICAgICAgbShcImxpXCIsW1xuICAgICAgICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuTWV0cmljcycsIHN0eWxlOiAnd2lkdGg6IDEwMCUnfSwgJ01ldHJpY3MnKV0pLFxuICAgICAgICAgICBtKFwibGlcIixbbShCdXR0b24sIHtpZDogJ2J0bk91dHB1dHMnLCBzdHlsZTogJ3dpZHRoOiAxMDAlJ30sICdPdXRwdXQnKV0pLFxuICAgICAgICAgICBdKSksXG4gLyogICAgIG0oXCIuYnRuLWdyb3VwLmJ0bi1ncm91cC1qdXN0aWZpZWQjbW9kZWxHcm91cFtzdHlsZT1tYXJnaW4tdG9wOiAuNWVtXVwiLFxuICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuTW9kZWxzJywgc3R5bGU6ICd3aWR0aDogMzMlJ30sICdNb2RlbHMnKSxcbiAgICAgICAgbShCdXR0b24sIHtpZDogJ2J0blNldHgnLCBzdHlsZTogJ3dpZHRoOiAzNCUnfSwgJ1NldCBDb3Zhci4nKSxcbiAgICAgICAgbShCdXR0b24sIHtpZDogJ2J0blJlc3VsdHMnLCBzdHlsZTogJ3dpZHRoOiAzMyUnfSwgJ1Jlc3VsdHMnKSxcbiAgICAgICAgbShCdXR0b24sIHtpZDogJ2J0blR5cGUnLCBzdHlsZTogJ3dpZHRoOiAyNSU7IGRpc3BsYXk6IG5vbmUnfSwgJ1Rhc2sgVHlwZScpLFxuICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuU3VidHlwZScsIHN0eWxlOiAnd2lkdGg6IDI1JTsgZGlzcGxheTogbm9uZSd9LCAnU3VidHlwZScpLFxuICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuTWV0cmljcycsIHN0eWxlOiAnd2lkdGg6IDI1JTsgZGlzcGxheTogbm9uZSd9LCAnTWV0cmljcycpLFxuICAgICAgICBtKEJ1dHRvbiwge2lkOiAnYnRuT3V0cHV0cycsIHN0eWxlOiAnd2lkdGg6IDI1JTsgZGlzcGxheTogbm9uZSd9LCAnT3V0cHV0cycpKSwgICAqL1xuICAgICAgbShgI3Jlc3VsdHNbc3R5bGU9ZGlzcGxheTogJHtvcigncmlnaHQnLCAnYnRuUmVzdWx0cycpfTsgbWFyZ2luLXRvcDogLjVlbV1gLFxuICAgICAgICBtKFwiI3Jlc3VsdHNWaWV3LmNvbnRhaW5lcltzdHlsZT1mbG9hdDogcmlnaHQ7IG92ZXJmbG93OiBhdXRvOyB3aWR0aDogODAlOyBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgd2hpdGUtc3BhY2U6IG5vd3JhcF1cIiksXG4gICAgICAgIG0oJyNtb2RlbFZpZXdbc3R5bGU9ZGlzcGxheTogbm9uZTsgZmxvYXQ6IGxlZnQ7IHdpZHRoOiAyMCU7IGJhY2tncm91bmQtY29sb3I6IHdoaXRlXScpLFxuICAgICAgICBtKFwicCNyZXN1bHRzSG9sZGVyW3N0eWxlPXBhZGRpbmc6IC41ZW0gMWVtXVwiKSksXG4gICAgICBtKGAjc2V0eFtzdHlsZT1kaXNwbGF5OiAke29yKCdyaWdodCcsICdidG5TZXR4Jyl9XWAsXG4gICAgICAgIG0oJyNzZXR4TGVmdEFsbFtzdHlsZT1kaXNwbGF5OmJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDMwJTsgaGVpZ2h0OjEwMCU7IGJhY2tncm91bmQtY29sb3I6IHdoaXRlXScsXG4gICAgICAgICAgbSgnI3NldHhMZWZ0W3N0eWxlPWRpc3BsYXk6YmxvY2s7IGZsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJTsgaGVpZ2h0Ojc1JTsgb3ZlcmZsb3c6YXV0bzsgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVdJyksXG4gICAgICAgIG0oJyNzZXR4TGVmdEJvdHRvbVtzdHlsZT1kaXNwbGF5OmJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCU7IGhlaWdodDoyNSU7IGNsZWFyOmxlZnQ7IGJhY2tncm91bmQtY29sb3I6IHdoaXRlXScpKSxcbiAgICAgICAgbSgnI3NldHhSaWdodEFsbFtzdHlsZT1kaXNwbGF5OmJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDcwJTsgaGVpZ2h0OjEwMCU7IGJhY2tncm91bmQtY29sb3I6IHdoaXRlXScsXG4gICAgICAgICAgbSgnI3NldHhSaWdodFRvcFtzdHlsZT1kaXNwbGF5OmJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCU7IGhlaWdodDo3NSU7IG92ZXJmbG93OmF1dG87IGJhY2tncm91bmQtY29sb3I6IHdoaXRlXScsXG4gICAgICAgICAgICBtKCcjc2V0eE1pZGRsZVtzdHlsZT1kaXNwbGF5OmJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDcwJTsgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVdJyksXG4gICAgICAgICAgICBtKCcjc2V0eFJpZ2h0W3N0eWxlPWRpc3BsYXk6YmxvY2s7IGZsb2F0OiByaWdodDsgd2lkdGg6IDMwJTsgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVdJykpLFxuICAgICAgICBtKCcjc2V0eFJpZ2h0Qm90dG9tW3N0eWxlPWRpc3BsYXk6YmxvY2s7IGZsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJTsgaGVpZ2h0OjI1JTsgb3ZlcmZsb3c6YXV0bzsgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVdJyxcbiAgICAgICAgICBtKEJ1dHRvbiwge1xuICAgICAgICAgICAgaWQ6ICdidG5FeGVjdXRlUGlwZScsXG4gICAgICAgICAgICBjbGFzc2VzOiAnYnRuLWRlZmF1bHQubGFkZGEtYnV0dG9uW2RhdGEtc3Bpbm5lci1jb2xvcj0jMDAwMDAwXVtkYXRhLXN0eWxlPXpvb20taW5dJyxcbiAgICAgICAgICAgIG9uY2xpY2s6IF8gPT4gYXBwLmV4ZWN1dGVwaXBlbGluZSgnYnRuRXhlY3V0ZVBpcGUnKSxcbiAgICAgICAgICAgIHN0eWxlOiBgZGlzcGxheTppbmxpbmU7IGZsb2F0OiBsZWZ0OyBtYXJnaW4tcmlnaHQ6IDEwcHhgLFxuICAgICAgICAgICAgdGl0bGU6ICdFeGVjdXRlIHBpcGVsaW5lLid9LFxuICAgICAgICAgICAgbSgnc3Bhbi5sYWRkYS1sYWJlbFtzdHlsZT1wb2ludGVyLWV2ZW50czogbm9uZV0nLCAnRXhlY3V0ZScpKSkpKSxcbiAgICAgIG0oYCNtb2RlbHNbc3R5bGU9ZGlzcGxheTogJHtvcigncmlnaHQnLCAnYnRuTW9kZWxzJyl9OyBwYWRkaW5nOiA2cHggMTJweDsgdGV4dC1hbGlnbjogY2VudGVyXWApLFxuICAgICAgbShgI3R5cGVzW3N0eWxlPWRpc3BsYXk6ICR7b3IoJ3JpZ2h0JywgJ2J0blR5cGUnKX07IHBhZGRpbmc6IDZweCAxMnB4OyB0ZXh0LWFsaWduOiBjZW50ZXJdYCksXG4gICAgICBtKGAjc3VidHlwZXNbc3R5bGU9ZGlzcGxheTogJHtvcigncmlnaHQnLCAnYnRuU3VidHlwZScpfTsgcGFkZGluZzogNnB4IDEycHg7IHRleHQtYWxpZ246IGNlbnRlcl1gKSxcbiAgICAgIG0oYCNtZXRyaWNzW3N0eWxlPWRpc3BsYXk6ICR7b3IoJ3JpZ2h0JywgJ2J0bk1ldHJpY3MnKX07IHBhZGRpbmc6IDZweCAxMnB4OyB0ZXh0LWFsaWduOiBjZW50ZXJdYCksXG4gICAgICBtKGAjb3V0cHV0c1tzdHlsZT1kaXNwbGF5OiAke29yKCdyaWdodCcsICdidG5PdXRwdXRzJyl9OyBwYWRkaW5nOiA2cHggMTJweDsgdGV4dC1hbGlnbjogY2VudGVyXWApKTtcblxuXG5cbmxldCB0aWNrZXIgPSBtb2RlID0+IHtcbiAgICBsZXQgbGluayA9IG5hbWUgPT4gbShgYSR7bmFtZSA9PT0gbW9kZSA/ICcuYWN0aXZlJyA6ICcnfVtocmVmPS8ke25hbWV9XVtzdHlsZT1tYXJnaW4tcmlnaHQ6IDAuNWVtXWAsIHtvbmNyZWF0ZTogbS5yb3V0ZS5saW5rfSwgbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIG0oJyN0aWNrZXJbc3R5bGU9YmFja2dyb3VuZDogI0Y5RjlGOTsgYm90dG9tOiAwOyBoZWlnaHQ6IDQwcHg7IHBvc2l0aW9uOiBmaXhlZDsgd2lkdGg6IDEwMCU7IGJvcmRlci10b3A6IDFweCBzb2xpZCAjQURBREFEXScsXG4gICAgICAgIGxpbmsoJ21vZGVsJyksXG4gICAgICAgIGxpbmsoJ2V4cGxvcmUnKSxcbiAgICAgICAgbShcImEjbG9nSURbaHJlZj1zb21lbGlua11bdGFyZ2V0PV9ibGFua11bc3R5bGU9bWFyZ2luLXJpZ2h0OiAwLjVlbV1cIiwgXCJSZXBsaWNhdGlvblwiKSk7XG59O1xuXG5cbmNsYXNzIEJvZHkge1xuICAgIG9uaW5pdCgpIHtcbiAgICAgICAgdGhpcy5hYm91dCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNpdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaXRlSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgb25jcmVhdGUoKSB7XG4gICAgICAgIGxldCBleHRyYWN0ID0gKG5hbWUsIGtleSwgb2Zmc2V0LCByZXBsYWNlKSA9PiB7XG4gICAgICAgICAgICBrZXkgPSBrZXkgKyAnPSc7XG4gICAgICAgICAgICBsZXQgbG9jID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBsZXQgdmFsID0gbG9jLmluZGV4T2Yoa2V5KSA+IDAgPyBsb2Muc3Vic3RyaW5nKGxvYy5pbmRleE9mKGtleSkgKyBvZmZzZXQpIDogJyc7XG4gICAgICAgICAgICBsZXQgaWR4ID0gdmFsLmluZGV4T2YoJyYnKTtcbiAgICAgICAgICAgIHZhbCA9IGlkeCA+IDAgPyB2YWwuc3Vic3RyaW5nKDAsIGlkeCkgOiB2YWw7XG4gICAgICAgICAgICB2YWwgPSB2YWwucmVwbGFjZSgnIyEvbW9kZWwnLCAnJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhuYW1lLCAnOiAnLCB2YWwpO1xuICAgICAgICAgICAgaWYgKHJlcGxhY2UpIHZhbCA9IHZhbFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8lMjUvZywgJyUnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8lM0EvZywgJzonKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8lMkYvZywgJy8nKTtcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGxldCBhcGlrZXkgPSBleHRyYWN0KCdhcGlrZXknLCAna2V5JywgNCk7XG4gICAgICAgIGFwcC5tYWluKFxuICAgICAgICAgICAgZXh0cmFjdCgnZmlsZWlkJywgJ2RmSWQnLCA1KSxcbiAgICAgICAgICAgIGV4dHJhY3QoJ2hvc3RuYW1lJywgJ2hvc3QnLCA1KSxcbiAgICAgICAgICAgIGV4dHJhY3QoJ2RkaXVybCcsICdkZGl1cmwnLCA3LCB0cnVlKSxcbiAgICAgICAgICAgIGV4dHJhY3QoJ2RhdGF1cmwnLCAnZGF0YXVybCcsIDgsIHRydWUpLFxuICAgICAgICAgICAgZXh0cmFjdCgnYXBpa2V5JywgJ2tleScsIDQpKTtcbiAgICB9XG5cbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB7bW9kZX0gPSB2bm9kZS5hdHRycztcbiAgICAgICAgcmV0dXJuIG0oJ21haW4nLFxuICAgICAgICAgICAgbShcIm5hdiNuYXZiYXIubmF2YmFyLm5hdmJhci1kZWZhdWx0Lm5hdmJhci1maXhlZC10b3Bbcm9sZT1uYXZpZ2F0aW9uXVwiLFxuICAgICAgICAgICAgICBtKFwiYS5uYXZiYXItYnJhbmRbc3R5bGU9bWFyZ2luLWxlZnQ6IDBdXCIsXG4gICAgICAgICAgICAgICAgbShcImltZ1tzcmM9L3N0YXRpYy9pbWFnZXMvVHdvUmF2ZW5zLnBuZ11bYWx0PVR3b1JhdmVuc11bd2lkdGg9MTAwXVtzdHlsZT1tYXJnaW4tbGVmdDogMmVtOyBtYXJnaW4tdG9wOiAtMC41ZW1dXCIsIHtcbiAgICAgICAgICAgICAgICAgIG9ubW91c2VvdmVyOiBfID0+IHRoaXMuYWJvdXQgPSB0cnVlLFxuICAgICAgICAgICAgICAgICAgb25tb3VzZW91dDogXyA9PiB0aGlzLmFib3V0ID0gZmFsc2V9KSksXG4gICAgICAgICAgICAgIG0oJyNuYXZiYXJOYXZbc3R5bGU9cGFkZGluZzogMC41ZW1dJyxcbiAgICAgICAgICAgICAgICBtKCcjZGF0YUZpZWxkLmZpZWxkW3N0eWxlPW1hcmdpbi10b3A6IDAuNWVtOyB0ZXh0LWFsaWduOiBjZW50ZXJdJyxcbiAgICAgICAgICAgICAgICAgIG0oJ2g0I2RhdGFOYW1lW3N0eWxlPWRpc3BsYXk6IGlubGluZV0nLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IF8gPT4gdGhpcy5jaXRlID0gdGhpcy5jaXRlSGlkZGVuID0gIXRoaXMuY2l0ZUhpZGRlbixcbiAgICAgICAgICAgICAgICAgICAgb25tb3VzZW91dDogXyA9PiB0aGlzLmNpdGVIaWRkZW4gfHwgKHRoaXMuY2l0ZSA9IGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgb25tb3VzZW92ZXI6IF8gPT4gdGhpcy5jaXRlID0gdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICAgIFwiRGF0YXNldCBOYW1lXCIpLFxuICAgICAgICAgICAgICAgICAgbShgI2NpdGUucGFuZWwucGFuZWwtZGVmYXVsdFtzdHlsZT1kaXNwbGF5OiAke3RoaXMuY2l0ZSA/ICdibG9jaycgOiAnbm9uZSd9OyBwb3NpdGlvbjogYWJzb2x1dGU7IHJpZ2h0OiA1MCU7IHdpZHRoOiAzODBweDsgdGV4dC1hbGlnbjogbGVmdDsgei1pbmRleDogNTBdYCxcbiAgICAgICAgICAgICAgICAgICAgbShcIi5wYW5lbC1ib2R5XCIpKSxcbiAgICAgICAgICAgICAgICAgIG0oXCJidXR0b24jYnRuRXN0aW1hdGUuYnRuLmJ0bi1kZWZhdWx0LmxhZGRhLWJ1dHRvbi5uYXZiYXItcmlnaHRbZGF0YS1zcGlubmVyLWNvbG9yPSMwMDAwMDBdW2RhdGEtc3R5bGU9em9vbS1pbl1bc3R5bGU9bWFyZ2luLWxlZnQ6IDJlbTsgbWFyZ2luLXJpZ2h0OiAxZW1dXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogXyA9PiBhcHAuZXN0aW1hdGUoJ2J0bkVzdGltYXRlJyl9LFxuICAgICAgICAgICAgICAgICAgICBtKFwic3Bhbi5sYWRkYS1sYWJlbFwiLCBtb2RlID8gJ0V4cGxvcmUnIDogJ0VzdGltYXRlJykpLFxuICAgICAgICAgICAgICAgICAgbShcImJ1dHRvbiNidG5UQTIuYnRuLmJ0bi1kZWZhdWx0LmxhZGRhLWJ1dHRvbi5uYXZiYXItcmlnaHRbZGF0YS1zcGlubmVyLWNvbG9yPSMwMDAwMDBdW2RhdGEtc3R5bGU9em9vbS1pbl1bc3R5bGU9bWFyZ2luLWxlZnQ6IDE1ZW07IG1hcmdpbi1yaWdodDogMWVtXVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgb25jbGljazogXyA9PiBhcHAudGEyc3R1ZmYoJ2J0blRBMicpfSxcbiAgICAgICAgICAgICAgICAgICAgICAnVEEyJyksXG4gICAgICAgICAgICAgICAgICBtKFwiYnV0dG9uI2J0blJlc2V0LmJ0bi5idG4tZGVmYXVsdC5uYXZiYXItcmlnaHRbdGl0bGU9UmVzZXRdW3N0eWxlPW1hcmdpbi1sZWZ0OiAyLjBlbV1cIiwge1xuICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBhcHAucmVzZXR9LFxuICAgICAgICAgICAgICAgICAgICBtKFwic3Bhbi5nbHlwaGljb24uZ2x5cGhpY29uLXJlcGVhdFtzdHlsZT1jb2xvcjogIzgxODE4MTsgZm9udC1zaXplOiAxZW07IHBvaW50ZXItZXZlbnRzOiBub25lXVwiKSksXG4gICAgICAgICAgICAgICAgICBtKFwiYnV0dG9uI2J0bkVuZFNlc3Npb24uYnRuLmJ0bi1kZWZhdWx0Lm5hdmJhci1yaWdodFt0aXRsZT1FbmQgU2Vzc2lvbl1bc3R5bGU9bWFyZ2luLWxlZnQ6IDIuMGVtXVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IF89PiBhcHAuZW5kc2Vzc2lvbigpfSxcbiAgICAgICAgICAgICAgICAgICAgbShcInNwYW4ubGFkZGEtbGFiZWxcIiwgJ0VuZCBTZXNzaW9uJykpLFxuICAgICAgICAgICAgICAgICAgbSgnI3RyYW5zZm9ybWF0aW9ucy50cmFuc2Zvcm1Ub29sJywge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NvbnN0cnVjdCB0cmFuc2Zvcm1hdGlvbnMgb2YgZXhpc3RpbmcgdmFyaWFibGVzIHVzaW5nIHZhbGlkIFIgc3ludGF4LiBGb3IgZXhhbXBsZSwgYXNzdW1pbmcgYSB2YXJpYWJsZSBuYW1lZCBkLCB5b3UgY2FuIGVudGVyIFwibG9nKGQpXCIgb3IgXCJkXjJcIi4nfSkpKSxcbiAgICAgICAgICAgICAgbShgI2Fib3V0LnBhbmVsLnBhbmVsLWRlZmF1bHRbc3R5bGU9ZGlzcGxheTogJHt0aGlzLmFib3V0ID8gJ2Jsb2NrJyA6ICdub25lJ307IGxlZnQ6IDE0MHB4OyBwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiA1MDBweDsgei1pbmRleDogNTBdYCxcbiAgICAgICAgICAgICAgICBtKCcucGFuZWwtYm9keScsXG4gICAgICAgICAgICAgICAgICAnVHdvUmF2ZW5zIHYwLjEgXCJEYWxsYXNcIiAtLSBUaGUgTm9yc2UgZ29kIE9kaW4gaGFkIHR3byB0YWxraW5nIHJhdmVucyBhcyBhZHZpc29ycywgd2hvIHdvdWxkIGZseSBvdXQgaW50byB0aGUgd29ybGQgYW5kIHJlcG9ydCBiYWNrIGFsbCB0aGV5IG9ic2VydmVkLiBJbiB0aGUgTm9yc2UsIHRoZWlyIG5hbWVzIHdlcmUgXCJUaG91Z2h0XCIgYW5kIFwiTWVtb3J5XCIuIEluIG91ciBjb21pbmcgcmVsZWFzZSwgb3VyIHRob3VnaHQtcmF2ZW4gYXV0b21hdGljYWxseSBhZHZpc2VzIG9uIHN0YXRpc3RpY2FsIG1vZGVsIHNlbGVjdGlvbiwgd2hpbGUgb3VyIG1lbW9yeS1yYXZlbiBhY2N1bXVsYXRlcyBwcmV2aW91cyBzdGF0aXN0aWNhbCBtb2RlbHMgZnJvbSBEYXRhdmVyc2UsIHRvIHByb3ZpZGUgY3VtbXVsYXRpdmUgZ3VpZGFuY2UgYW5kIG1ldGEtYW5hbHlzaXMuJykpKSxcbiAgICAgICAgICAgIG0oYCNtYWluLmxlZnQuY2Fyb3VzZWwuc2xpZGUuc3ZnLWxlZnRwYW5lbC5zdmctcmlnaHRwYW5lbFtzdHlsZT1vdmVyZmxvdzogYXV0b11gLFxuICAgICAgICAgICAgICBtKFwiI2lubmVyY2Fyb3VzZWwuY2Fyb3VzZWwtaW5uZXJcIixcbiAgICAgICAgICAgICAgICBtKCcjbTAuaXRlbS5hY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgbSgnc3ZnI3doaXRlc3BhY2UnKSkpLFxuICAgICAgICAgICAgICBtKFwiI3NwYWNldG9vbHMuc3BhY2VUb29sW3N0eWxlPXotaW5kZXg6IDE2XVwiLFxuICAgICAgICAgICAgICAgIG0oXCJidXR0b24jYnRuTG9jay5idG4uYWN0aXZlW3RpdGxlPUxvY2sgc2VsZWN0aW9ucyBvZiBwcm9ibGVtIGRlc2NyaXB0aW9uLl1cIiwge1xuICAgICAgICAgICAgICAgICAgb25jbGljazogYXBwLmxvY2tEZXNjcmlwdGlvbn0sXG4gICAgICAgICAgICAgICAgICBtKFwic3Bhbi5nbHlwaGljb24uZ2x5cGhpY29uLXBlbmNpbFwiKSksXG4gICAgICAgICAgICAgICAgbShcImJ1dHRvbiNidG5Gb3JjZS5idG4uYnRuLWRlZmF1bHRbdGl0bGU9UGluIHRoZSB2YXJpYWJsZSBwZWJibGVzIHRvIHRoZSBwYWdlLl1cIiwge1xuICAgICAgICAgICAgICAgICAgb25jbGljazogYXBwLmZvcmNlU3dpdGNofSxcbiAgICAgICAgICAgICAgICAgIG0oXCJzcGFuLmdseXBoaWNvbi5nbHlwaGljb24tcHVzaHBpblwiKSksXG4gICAgICAgICAgICAgICAgbShcImJ1dHRvbiNidG5FcmFzZXIuYnRuLmJ0bi1kZWZhdWx0W3RpdGxlPVdpcGUgYWxsIHZhcmlhYmxlcyBmcm9tIHRoZSBtb2RlbGluZyBzcGFjZS5dXCIsIHtcbiAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGFwcC5lcmFzZX0sXG4gICAgICAgICAgICAgICAgICBtKFwic3Bhbi5nbHlwaGljb24uZ2x5cGhpY29uLW1hZ25ldFwiKSkpLFxuICAgICAgICAgICAgICBtKFN1YnBhbmVsLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiTGVnZW5kXCIsXG4gICAgICAgICAgICAgICAgYnV0dG9uczogW1xuICAgICAgICAgICAgICAgICAgWyd0aW1lQnV0dG9uJywgJ3p0aW1lJywgJ1RpbWUnXSxcbiAgICAgICAgICAgICAgICAgIFsnY3NCdXR0b24nLCAnemNyb3NzJywgJ0Nyb3NzIFNlYyddLFxuICAgICAgICAgICAgICAgICAgWydkdkJ1dHRvbicsICd6ZHYnLCAnRGVwIFZhciddLFxuICAgICAgICAgICAgICAgICAgWydub21CdXR0b24nLCAnem5vbScsICdOb20gVmFyJ10sXG4gICAgICAgICAgICAgICAgICBbJ2dyMUJ1dHRvbicsICd6Z3JvdXAxJywgJ0dyb3VwIDEnXSxcbiAgICAgICAgICAgICAgICAgIFsnZ3IyQnV0dG9uJywgJ3pncm91cDInLCAnR3JvdXAgMiddXX0pLFxuICAgICAgICAgICAgICBtKFN1YnBhbmVsLCB7dGl0bGU6IFwiSGlzdG9yeVwifSksXG4gICAgICAgICAgICAgIHRpY2tlcihtb2RlKSxcbiAgICAgICAgICAgICAgbGVmdHBhbmVsKCksXG4gICAgICAgICAgICAgIHJpZ2h0cGFuZWwobW9kZSkpKTtcbiAgICB9XG59XG5cbm0ucm91dGUoZG9jdW1lbnQuYm9keSwgJy9tb2RlbCcsIHtcbiAgICAnL21vZGVsJzoge3JlbmRlcjogKCkgPT4gbShCb2R5KX0sXG4gICAgJy9leHBsb3JlJzoge3JlbmRlcjogKCkgPT4gbShCb2R5LCB7bW9kZTogJ2V4cGxvcmUnfSl9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(12)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(13);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanM/YjA4OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n")}]);